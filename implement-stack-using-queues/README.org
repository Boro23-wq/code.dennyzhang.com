* Leetcode: Implement Stack using Queues                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     oodesign
:END:
---------------------------------------------------------------------
Implement Stack using Queues
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/review-oodesign][Review: Object-Oriented Design Problems]], Tag: [[https://brain.dennyzhang.com/tag/oodesign][oodesign]]
---------------------------------------------------------------------
Implement the following operations of a stack using queues.

- push(x) -- Push element x onto stack.
- pop() -- Removes the element on top of the stack.
- top() -- Get the top element.
- empty() -- Return whether the stack is empty.

Notes:
- You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
- Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
- You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/implement-stack-using-queues][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/implement-stack-using-queues/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/implement-stack-using-queues
class MyQueue(object):

    ## Idea: Use 2 stack. When pop, move to stack1, then stack2
    ## Complexity: Time O(n), Space O(n)
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack1 = []
        self.stack2 = []
        

    def push(self, x):
        """
        Push element x to the back of queue.
        :type x: int
        :rtype: void
        """
        self.stack1.append(x)

    def pop(self):
        """
        Removes the element from in front of queue and returns that element.
        :rtype: int
        """
        ## Complexity: Time O(n), Space: O(n)
        # move elements from stack1 to stack2
        ret = None
        while len(self.stack1) != 0:
            item = self.stack1[-1]
            del self.stack1[-1]
            self.stack2.append(item)
        ret = self.stack2[-1]
        del self.stack2[-1]

        # push back to stack2
        while len(self.stack2) != 0:
            item = self.stack2[-1]
            del self.stack2[-1]
            self.stack1.append(item)
        return ret

    def peek(self):
        """
        Get the front element.
        :rtype: int
        """
        ## Complexity: Time O(n), Space: O(n)
        # move elements from stack1 to stack2
        ret = None
        while len(self.stack1) != 0:
            item = self.stack1[-1]
            del self.stack1[-1]
            self.stack2.append(item)
        ret = self.stack2[-1]

        # push back to stack2
        while len(self.stack2) != 0:
            item = self.stack2[-1]
            del self.stack2[-1]
            self.stack1.append(item)
        return ret

    def empty(self):
        """
        Returns whether the queue is empty.
        :rtype: bool
        """
        return len(self.stack1) == 0

# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
#+END_SRC
