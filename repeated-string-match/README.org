* Leetcode: Repeated String Match                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #string
:END:
---------------------------------------------------------------------
Repeated String Match
---------------------------------------------------------------------
Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.

For example, with A = "abcd" and B = "cdabcdab".

Return 3, because by repeating A three times ("abcdabcdabcd"), B is a substring of it; and B is not a substring of A repeated two times ("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/repeated-string-match][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/repeated-string-match/description/][Leetcode.com]]

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
class Solution(object):
    def repeatedStringMatch(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: int
        """
#+END_SRC
