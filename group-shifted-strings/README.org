* Leetcode: Group Shifted Strings                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, hashmap, modoperation
:END:
---------------------------------------------------------------------
Group Shifted Strings
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/group-anagrams][Group Anagrams]]
- [[https://code.dennyzhang.com/tag/hashmap][Tag: #hashmap]]
---------------------------------------------------------------------
Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:
#+BEGIN_EXAMPLE
"abc" -> "bcd" -> ... -> "xyz"
#+END_EXAMPLE
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
A solution is:
#+BEGIN_EXAMPLE
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/group-shifted-strings][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/group-shifted-strings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/group-shifted-strings
## Basic Ideas: hashmap
##
## From ["az", "ba"] we know, it's a rotated shift
## Assumptions:
##  No empty string
##  The order doesn't matter
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def groupStrings(self, strings):
        """
        :type strings: List[str]
        :rtype: List[List[str]]
        """
        import collections
        m = collections.defaultdict(list)
        for s in strings:
            # ba -> (0, 25)
            # az -> (0, 25)
            tup = tuple([(ord(ch)-ord(s[0]))%26 for ch in s])
            m[tup].append(s)
        return [m[key] for key in m]
#+END_SRC
