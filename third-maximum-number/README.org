* Leetcode: Third Maximum Number                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     heap, inspiring, manydetails, redo
:END:
---------------------------------------------------------------------
Third Maximum Number
---------------------------------------------------------------------
Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

#+BEGIN_EXAMPLE
Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/third-maximum-number][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/third-maximum-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/third-maximum-number
## Basic Ideas: minheap
##
## Complexity: O(n), Space O(1)
import heapq
class Solution(object):
    def thirdMax(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        q = []
        for num in nums:
            if num not in q:
                heapq.heappush(q, num)
            if len(q) > 3: heapq.heappop(q)

        l = []
        while len(q) != 0:
            l.insert(0, heapq.heappop(q))
        return l[0] if len(l) != 3 else l[-1]

s = Solution()
print s.thirdMax([1, 2]) # 2
print s.thirdMax([3, 2, 1]) # 1
print s.thirdMax([1, 1, 2]) # 2
print s.thirdMax([1,2,2,5,3,5]) # 2
#+END_SRC
