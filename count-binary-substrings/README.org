* Leetcode: Count Binary Substrings                                   :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #encoding, #string, #twopointer
:END:
---------------------------------------------------------------------
Count Binary Substrings
---------------------------------------------------------------------
Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.
#+BEGIN_EXAMPLE
Example 1:
Input: "00110011"
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: "10101"
Output: 4
Explanation: There are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's.
Note:

s.length will be between 1 and 50,000.
s will only consist of "0" or "1" characters.
#+END_EXAMPLE



Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/count-binary-substrings][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/count-binary-substrings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: http://brain.dennyzhang.com/count-binary-substrings
## Basic Ideas: Two pointers
##           Starting from one specific index, there could be only one or zero matches
##           The result would be no more than s.length
##           With match of 000111, we will get 3 matches. And move the pointer to right by 6 steps.
## Complexity: Time O(n), Space O(1)
class Solution(object):
    def countBinarySubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        res = 0
        length = len(s)
        i = 0
        while i < length - 1:
            count, j = 1, i+1
            ch = s[i]
            opposite_ch = str(1 - int(ch))
            while j < length and s[j] == ch:
                count += 1
                j += 1
            match_length = count
            while count != 0 and j < length and s[j] == opposite_ch:
                count -= 1
                j += 1

            if count == 0:
                res += match_length
                i = i + match_length
            else:
                i += 1
        return res

s = Solution()
print s.countBinarySubstrings('00110011')
print s.countBinarySubstrings('10101')
#+END_SRC
