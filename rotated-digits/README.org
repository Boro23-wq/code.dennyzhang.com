* Leetcode: Rotated Digits                                       :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, rotateoperation
:END:
---------------------------------------------------------------------
Rotated Digits
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/review-string][Review: String Problems]]
- Tag: [[https://brain.dennyzhang.com/tag/string][#string]], [[https://brain.dennyzhang.com/tag/rotateoperation][#rotateoperation]]
---------------------------------------------------------------------
X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X. A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other; 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number.

Now given a positive number N, how many numbers X from 1 to N are good?

Example:
#+BEGIN_EXAMPLE
Input: 10
Output: 4
Explanation: 
There are four good numbers in the range [1, 10] : 2, 5, 6, 9.
Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.
#+END_EXAMPLE

Note:
N  will be in range [1, 10000].

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/rotated-digits][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/rotated-digits/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/rotated-digits
## Basic Ideas: Check number one by one
##
## Complexity: Time O(n), Space O(1)
class Solution:
    def rotatedDigits(self, N):
        """
        :type N: int
        :rtype: int
        """
        res = 0
        for num in range(1, N+1):
            has_changed, is_valid = False, True
            for ch in str(num):
                if ch in "347":
                    is_valid = False
                    break
                if ch in "2569": has_changed = True
            if has_changed and is_valid: res += 1
        return res
#+END_SRC
