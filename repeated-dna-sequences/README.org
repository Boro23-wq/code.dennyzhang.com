* Leetcode: Repeated DNA Sequences                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     misc
:END:
---------------------------------------------------------------------
Repeated DNA Sequences
---------------------------------------------------------------------
Similar Problems:
- Tag: [[https://brain.dennyzhang.com/tag/string][#string]]
---------------------------------------------------------------------
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,
#+BEGIN_EXAMPLE
Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/repeated-dna-sequences][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/repeated-dna-sequences/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/repeated-dna-sequences
## Basic Ideas: sliding window + hashmap
##
## Complexity: Time O(n), Space O(n)
class Solution(object):
    def findRepeatedDnaSequences(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        length = len(s)
        if length <= 10: return []
        import collections
        d = collections.defaultdict(lambda:0)
        curStr = s[0:10]
        d[curStr] += 1
        res = []
        for i in range(10, length):
            curStr = curStr[1:] + s[i]
            if d[curStr] == 1: res.append(curStr)
            d[curStr] += 1
        return res
#+END_SRC
