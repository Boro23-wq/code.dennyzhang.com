* LintCode: Digital Problem                                      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     recursive
:END:
---------------------------------------------------------------------
Digital Problem
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/review-recursive][Review: Recursive Problems]]
- Tag: [[https://brain.dennyzhang.com/tag/recursive][#recursive]]
---------------------------------------------------------------------
Give a conversion rule to convert number n:
1. n is an odd number: n = 3 * n + 1
2. n is an even number: n = n / 2
3. After several conversions, n will become 1.

Given a number n, find the times of converting to 1.

 Notice
1 <= n <= 1000000

Example
#+BEGIN_EXAMPLE
Given n = 2, return 1.

Explanation:
2->1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given n = 3, return 7.

Explanation:
3->10->5->16->8->4->2->1
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/digital-problem][challenges-leetcode-interesting]]

Credits To: [[url-external:http://www.lintcode.com/en/problem/digital-problem/][lintcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/digital-problem
class Solution:
    """
    @param n: the number n 
    @return: the times n convert to 1
    """
    def digitConvert(self, n):
        if n == 1: return 0
        if n == 2: return 1
        if n%2 == 0:
            return self.digitConvert(int(n/2))+1
        else:
            return self.digitConvert(n*3+1)+1
#+END_SRC
