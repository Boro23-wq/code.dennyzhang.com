* LintCode: 3Sum II                                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, twosum
:END:
---------------------------------------------------------------------
3Sum II
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/sum-of-square-numbers][Sum of Square Numbers]]
- [[https://brain.dennyzhang.com/tag/twosum][Tag: #twosum]]
- [[https://brain.dennyzhang.com/review-twopointer][Review: TwoPointers Problems]], [[https://brain.dennyzhang.com/tag/twopointer][Tag: #twopointer]]
---------------------------------------------------------------------
Given n, find the number of solutions for all x, y, z that conforms to x^2+y^2+z^2 = n.(x, y, z are non-negative integers)

 Notice
n <= 1000000
x, y, z satisfy (x <= y <= z), we can consider that is the same solution as long as the three numbers selected are the same
Have you met this question in a real interview? 

Example
#+BEGIN_EXAMPLE
Given n = 0, return 1.

Explanation:
When x = 0, y = 0, z = 0, the equation holds.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given n = 1, return 1.

Explanation:
When one of them is 1 and the remaining two are 0, there is a total of 1 solution.
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/3sum-ii][challenges-leetcode-interesting]]

Credits To: [[url-external:http://www.lintcode.com/en/problem/3sum-ii/][LintCode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/3sum-ii
class Solution:
    """
    @param n: an integer
    @return: the number of solutions
    """
    def threeSum2(self, n):
        ## Basic Ideas:
        ## Complexity: Time O(n*n), Space O(1)
        import math
        nums = [x*x for x in range(1001)]
        res = 0
        
        max = int(math.sqrt(n))
        for i in range(max+1):
            l, r = i, max
            while l<=r:
                v = nums[i]+nums[l]+nums[r]
                if v == n:
                    res += 1
                    l += 1
                elif v>n:                
                    r -= 1
                else:
                    l += 1
        return res
#+END_SRC
