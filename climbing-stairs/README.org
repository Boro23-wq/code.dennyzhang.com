* Leetcode: Climbing Stairs                                      :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #dynamicprogramming
:END:
---------------------------------------------------------------------
Simple DP
---------------------------------------------------------------------
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

#+BEGIN_EXAMPLE
Input: 2
Output:  2
Explanation:  There are two ways to climb to the top.

1. 1 step + 1 step
2. 2 steps
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: 3
Output:  3
Explanation:  There are three ways to climb to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/climbing-stairs][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/climbing-stairs/description/][leetcode.com]]

Hint: Time O(n), Space O(1)

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
## Blog link: http://brain.dennyzhang.com/climbing-stairs
## Basic Ideas: fibonacci
class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n == 1:
            return 1
        if n == 2:
            return 2
        value1 = 1
        value2 = 2
        for i in range(3, n):
            value = value2
            value2 = value1 + value2
            value1 = value
        return value1 + value2
#+END_SRC
