* Leetcode: Pow(x, n)                                            :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     powerofn, recursive
:END:
---------------------------------------------------------------------
Implement pow(x, n).
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/super-pow][Super Pow]]
- [[https://brain.dennyzhang.com/review-recursive][Review: Recursive Problems]]
- Tag: [[https://brain.dennyzhang.com/tag/math][#math]], [[https://brain.dennyzhang.com/tag/recursive][#recursive]]
---------------------------------------------------------------------
Implement pow(x, n).
#+BEGIN_EXAMPLE
Example 1:

Input: 2.00000, 10
Output: 1024.00000
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

Input: 2.10000, 3
Output: 9.26100
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/powx-n][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/powx-n/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/powx-n
## Basic Ideas: 
##        If n < 0, x^n == (1/x)^(-n)
##        If n%2 == 0, x^n == (x*x)^(n/2)
##        If n%2 == 1, x^n == x * (x*x)^((n-1)/2)
##
## Complexity: Time O(log(n)), Space O(1)
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if n == 0:
            return 1
        if n < 0:
            n = -n
            x = 1/x
        if n %2 == 0:
            return self.myPow(x*x, n/2)
        else:
            return x*self.myPow(x*x, (n-1)/2)
#+END_SRC
