* Leetcode: Pow(x, n)                                            :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #binarysearch, #redo
:END:
---------------------------------------------------------------------
Implement pow(x, n).
---------------------------------------------------------------------
Implement pow(x, n).
#+BEGIN_EXAMPLE
Example 1:

Input: 2.00000, 10
Output: 1024.00000
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

Input: 2.10000, 3
Output: 9.26100
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/powx-n][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/powx-n/description/][Leetcode.com]]

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        ## Idea: x^n = x^(n/2) * x^(n/2) * x^(n%2)
        ## Complexity: Time O(log(n)), Space O(1)
        ## Sample Data:
        ##   pow(5, 3) = 5*5*5
        ##   pow(5, -3) = ?
        ##   pow(-5, 3) = (-5)*(-5)*(-5)
        ##   pow(5.1, 3) = 5.1*5.1*5.1
        ##   x^n = x^(n/2) * x^(n/2) * x^(n%2)
        ##   pow(x, -n) = 1/pow(x, n)
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, -n)
        if n == 1:
            return x
        if(n>=2):
            val = self.myPow(x, n/2)
            return val*val*self.myPow(x, n%2)
#+END_SRC
