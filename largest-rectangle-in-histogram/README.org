* Leetcode: Largest Rectangle in Histogram                       :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     monotone, inspiring, rectangle
:END:
---------------------------------------------------------------------
Largest Rectangle in Histogram
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/maximal-rectangle][Leetcode: Maximal Rectangle]]
- [[https://brain.dennyzhang.com/review-monotone][Review: Monotone Stack Or Monotone Queue Problems]], Tag: [[https://brain.dennyzhang.com/tag/monotone][monotone]]
- [[https://brain.dennyzhang.com/review-rectangle][Review: Rectangle Problems]], Tag: [[https://brain.dennyzhang.com/tag/rectangle][#rectangle]]
---------------------------------------------------------------------
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

[[image-blog:Largest Rectangle in Histogram][https://raw.githubusercontent.com/DennyZhang/challenges-leetcode-interesting/master/images/histogram.png]]
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

[[image-blog:Largest Rectangle in Histogram][https://raw.githubusercontent.com/DennyZhang/challenges-leetcode-interesting/master/images/histogram_area.png]]

The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/largest-rectangle-in-histogram][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/largest-rectangle-in-histogram/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/largest-rectangle-in-histogram
## Basic Ideas: Monotone stack
##              For each element, find the next non-greater value
##     Key Questions: How to get the left?
##                    What if right is not found, any special logic?
##
## Complexity:
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        length = len(heights)
        next_smallers = [-1] * length
        stack = []
        max_width = 0
        # pad with fake items for the end
        for i in xrange(length+1):
            current = heights[i] if i != length else -1
            # When heights[i] is not greater than the stack top, it's the target of stack top
            while len(stack) != 0 and  current <= heights[stack[-1]]:
                k = stack.pop()
                h = heights[k]
                left = -1 if len(stack) == 0 else stack[-1]
                left = left + 1
                right = i
                max_width = max(max_width, h*(right-left))
            stack.append(i)
        return max_width

# s = Solution()
# print s.largestRectangleArea([2, 1, 2]) # 3
#+END_SRC
