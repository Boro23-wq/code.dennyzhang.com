* Leetcode: Two Sum                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, twosum
:END:
---------------------------------------------------------------------
Pic 2 numbers to get the target sum.
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/tag/twosum][Tag: #twosum]]
- [[https://brain.dennyzhang.com/review-twopointer][Review: TwoPointers Problems]], [[https://brain.dennyzhang.com/tag/twopointer][Tag: #twopointer]]
---------------------------------------------------------------------
Given an array of integers, return *indices* of the two numbers such that they add up to a specific target.

You may assume that each input would have *exactly* one solution, and you may not use the same element twice.

Example:
#+BEGIN_EXAMPLE
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/two-sum][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/two-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/two-sum
## Basic Ideas: Sort, then two pointer
##
## Complexity: Time O(n*log(n)), Space O(1)
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        l = sorted(zip(nums, range(len(nums))))
        left, right = 0, len(l)-1
        while left<right:
            v = l[left][0]+l[right][0]
            if v == target:
                return [l[left][1], l[right][1]]
            if v < target:
                left += 1
            else:
                right -= 1
#+END_SRC
