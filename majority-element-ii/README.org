* Leetcode: Majority Element II                                   :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #numbers
:END:
---------------------------------------------------------------------
Identity number which appears exactly once.
---------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/majority-element-ii][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/majority-element-ii/description/][Leetcode.com]]

Hint:

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ## Idea: Use memory in the list
        ## Complexity: Time O(n), Space O(1)
        ## Sample Data:
        ##    1 1 0 1
        ##    1 1 0 1
        ##    1 1 0 1
        ##    0 1 1 1
        ## Asummption: Integer is 64 bits. Any negative values?
        length = 64
        bit_list = [0]*length
        for num in nums:
            for i in xrange(length):
                bit_list[i] += num % 2
                bit_list[i] = bit_list[i] % 3
                num = num >> 1

        bit_list.reverse()
        res = 0
        is_positive = True
        if bit_list[0] == 1:
            is_positive = False
            bit_list = map(lambda x:(x+1)%2, bit_list)
        for i in xrange(length):
            res = res << 1
            res = res | bit_list[i]

        if is_positive is True: return res else: return -(res+1)
#+END_SRC
