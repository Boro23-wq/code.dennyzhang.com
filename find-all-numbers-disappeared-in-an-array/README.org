* Leetcode: Find All Numbers Disappeared in an Array            :BLOG:Numbers:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #countsort
:END:
---------------------------------------------------------------------
Find missing numbers
---------------------------------------------------------------------
Given an array of integers where 1 <= a[i] <= n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:
#+BEGIN_EXAMPLE
Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/find-all-numbers-disappeared-in-an-array][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/][Leetcode.com]]

#+BEGIN_SRC python
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        ## Basic Idea: traverse each item
        ## Complexity:
        ##  1,2,3,4,5,6,7,8
        ##
        ##  4,3,2,7,8,2,3,1
        ##  1,2,3,4,    7,8
        for i in range(0, len(nums)):
            value = nums[i]
            if (value == i+1):
                continue

            while (nums[value-1] != value):
                tmp = nums[value-1]
                nums[value-1] = value
                value = tmp

        ret = []
        for i in range(0, len(nums)):
            if nums[i] != (i+1):
                ret.append(i+1)
        return ret
#+END_SRC

Leave me comments, if you know how to solve.

More Reading:
- [[http://brain.dennyzhang.com/find-duplicate-num/][Leetcode: Find the Duplicate Number]]
