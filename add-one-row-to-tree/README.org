* Leetcode: Add One Row to Tree                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #binarytree
:END:
---------------------------------------------------------------------
Add One Row to Tree
---------------------------------------------------------------------
Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.

The adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.
#+BEGIN_EXAMPLE
Example 1:
Input: 
A binary tree as following:
       4
     /   \
    2     6
   / \   / 
  3   1 5   

v = 1

d = 2

Output: 
       4
      / \
     1   1
    /     \
   2       6
  / \     / 
 3   1   5   
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: 
A binary tree as following:
      4
     /   
    2    
   / \   
  3   1    

v = 1

d = 3

Output: 
      4
     /   
    2
   / \    
  1   1
 /     \  
3       1
#+END_EXAMPLE

Note:
The given d is in range [1, maximum depth of the given tree + 1].
The given binary tree has at least one tree node.



Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/add-one-row-to-tree][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/add-one-row-to-tree/description/][leetcode.com]]

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
## Blog link: http://brain.dennyzhang.com/add-one-row-to-tree
## Basic Ideas: BFS
##              Find nodes of d-1 level
##              For each add left node or right node, if necessary
##                  If node only have one child
##                  If node have both children
##                  If node have no children
##
## Complexity: Time O(n), Space O(k) k is the width of d-1 level
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def addOneRow(self, root, v, d):
        """
        :type root: TreeNode
        :type v: int
        :type d: int
        :rtype: TreeNode
        """
        if d == 0: return None
        if d == 1:
            node = TreeNode(v)
            node.left = root
            return node
        depth = 1
        queue = []
        queue.append(root)
        while depth != d - 1:
            for i in xrange(len(queue)):
                node = queue[0]
                del queue[0]
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            depth += 1

        for i in xrange(len(queue)):
            node = queue[0]
            del queue[0]
            # add left
            t1 = TreeNode(v)
            t1.left = node.left
            node.left = t1
            # add right
            t2 = TreeNode(v)
            t2.right = node.right
            node.right = t2
        return root
#+END_SRC
