* Leetcode: Jump Game                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     greedy, game, classic
:END:
---------------------------------------------------------------------
Jump Game
---------------------------------------------------------------------
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

For example:
#+BEGIN_EXAMPLE
A = [2,3,1,1,4], return true.

A = [3,2,1,0,4], return false.
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/jump-game][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/jump-game/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/jump-game
## Basic Ideas:
##        maxIndex: keep tracking the furthest reachable index
##
## Complexity: Time O(n), Space O(1)
class Solution:
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        length = len(nums)
        if length <= 1: return True
        maxIndex = 0
        for i in range(0, length-1):
            # we can't jump anymore
            if i > maxIndex: break
            # already found the target
            if maxIndex >= length-1: break
            maxIndex = max(maxIndex, i+nums[i])
        return maxIndex >= length-1

s = Solution()
print(s.canJump([0, 2, 3])) # False
#+END_SRC
