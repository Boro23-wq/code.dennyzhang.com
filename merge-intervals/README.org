* Leetcode: Merge Intervals                                      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     interval
:END:
---------------------------------------------------------------------
Merge Intervals
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/review-interval][Review: Interval Problems]]
---------------------------------------------------------------------
Given a collection of intervals, merge all overlapping intervals.

#+BEGIN_EXAMPLE
For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/merge-intervals][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/merge-intervals/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/merge-intervals
## Basic Ideas: Search by the starting values
##
## Complexity: Time O(n*log(n)), Space O(n)
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        ret = []
        for entry in sorted(intervals, key=lambda entry: entry.start):
            if ret and entry.start <= ret[-1].end:
                ret[-1].end = max(ret[-1].end, entry.end)
            else:
                ret.append(entry)
        return ret
#+END_SRC
