* Leetcode: Shortest Word Distance II                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     hashmap, oodesign, classic
:END:
---------------------------------------------------------------------
Shortest Word Distance II
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/shortest-word-distance][Shortest Word Distance]]
- [[https://code.dennyzhang.com/shortest-word-distance-iii][Shortest Word Distance III]]
- Tag: [[https://code.dennyzhang.com/tag/oodesign][#oodesign]], [[https://code.dennyzhang.com/tag/hashmap][#hashmap]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
This is a follow up of [[https://code.dennyzhang.com/shortest-word-distance][Shortest Word Distance]]. The only difference is now you are given the list of words and your method will be called repeatedly many times with different parameters. How would you optimize it?

Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 and word2 and return the shortest distance between these two words in the list.

For example,
#+BEGIN_EXAMPLE
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Given word1 = "coding", word2 = "practice", return 3.
Given word1 = "makes", word2 = "coding", return 1.
#+END_EXAMPLE

Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/shortest-word-distance-ii][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/shortest-word-distance-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/shortest-word-distance-ii
// Basic Ideas:
//
// Complexity:
type WordDistance struct {
    
}


func Constructor(words []string) WordDistance {
    
}


func (this *WordDistance) Shortest(word1 string, word2 string) int {
    
}


/**
 * Your WordDistance object will be instantiated and called as such:
 * obj := Constructor(words);
 * param_1 := obj.Shortest(word1,word2);
 */
#+END_SRC
