* Review: Graph Problems                                        :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: graph, review
:END:
---------------------------------------------------------------------
Graph related questions mainly focus on depth first search and breath first search.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-graph"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Name                                         | Summary                                 |
|----------------------------------------------+-----------------------------------------|
| bfs and dfs relationship                     | [[https://code.dennyzhang.com/word-ladder-ii][Leetcode: Word Ladder II]]                |
| From BFS to Bidirectional BFS                | Half of the time. [[https://code.dennyzhang.com/word-ladder][Leetcode: Word Ladder]] |
| 3 cases: state is invalid/visited/unexamined | [[https://code.dennyzhang.com/word-ladder][Leetcode: Word Ladder]]                   |

*Questions*
| Name                                                                  | Example                                       |
|-----------------------------------------------------------------------+-----------------------------------------------|
| For matrix graph problems: rectangle vs square                        |                                               |
| [[https://en.wikipedia.org/wiki/Kruskal%27s_algorithm][Kruskal's algorithm]]: [[https://en.wikipedia.org/wiki/Minimum_spanning_tree][Minimum spanning tree]] of a weighted graph        | [[https://code.dennyzhang.com/connecting-cities-with-minimum-cost][Leetcode: Connecting Cities With Minimum Cost]] |
| [[https://en.wikipedia.org/wiki/Dijkstra's_algorithm][Dijkstra's algorithm]]: shortest path for two nodes in a weighted graph |                                               |
| [[https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm][Floyd-Warshall algorithm]]: find shortest paths in a weighted graph     |                                               |

Floyd-Warshall algorithm: Time O(n*n*n)
[[image-blog:Review: Graph Problems][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/review/review-graph/floyd-warshall.png]]

BFS/DFS/UnionFind; Binarysearch

#+BEGIN_EXAMPLE
1. How to get the initial set to examine?
2. How to move to next? What's the time complexity?
3. What if we want all possible answers, instead of the min step count?
#+END_EXAMPLE

Questions:

1. Why so many algorithms to find the shortest path? Shouldn't it be some optimal one(s)?

BFS:
- When to update visited_set? When add or when pop? [[https://code.dennyzhang.com/employee-importance][Employee Importance]]

BFS: 
1. visit all neighbors before visiting neighbors of your neighbors
- Keep a queue of nodes to visit
- The performamce may be different if we search from starting point or target point. [[https://code.dennyzhang.com/perfect-squares][Perfect Squares]]

Common graph algorithm problems:
1. Find length of shortest path from node s to all other nodes
- Search all nodes for a node containing a given value
- Find shortest path from node s to all other nodes

DFS:
1. visit all neighbors of a neighbor before visiting your other neighbors
- It doesn't use queue, but mark nodes as to their status. White(unchecked), Gray(Seen, but not finished), Black(finished)

Key points:
- How to evaluable the time complexity. Normally it's O(m*n). But how we can convince people with solid argument?

[[color:#c7254e][For DFS, if the path is too deep, we might run into stack overflow]].

The most impressive problems to me:
- [[https://code.dennyzhang.com/perfect-squares][Perfect Squares]]
- [[https://code.dennyzhang.com/island-perimeter][Island Perimeter]]
- [[https://code.dennyzhang.com/surrounded-regions][Surrounded Regions]]
- [[https://code.dennyzhang.com/swim-in-rising-water][Swim in Rising Water]]

---------------------------------------------------------------------
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]

See all grap problems: [[https://code.dennyzhang.com/tag/graph/][#grap]]
[display-posts tag="grap" posts_per_page="100" orderby="title"]

See more [[https://code.dennyzhang.com/?s=blog+posts][blog_posts]].

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
