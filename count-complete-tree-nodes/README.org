* Leetcode: Count Complete Tree Nodes                             :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #binarytree, #binarysearch, #inspiring
:END:
---------------------------------------------------------------------
Count Complete Tree Nodes
---------------------------------------------------------------------
Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from [[url-external:https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees][Wikipedia]]:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Blog link: http://brain.dennyzhang.com/count-complete-tree-nodes

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/count-complete-tree-nodes][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/count-complete-tree-nodes/description][leetcode.com]]

Useful link: [[url-external:https://github.com/kamyu104/LeetCode/blob/master/Python/count-complete-tree-nodes.py][here]]

Leave me comments, if you know how to solve.

#+BEGIN_SRC python
## Basic Ideas: Use binarysearch to check the last level
##              Find the depth(d) from the left-most node
##
##    Sample Data: 
##             1        
##           /   \
##          2     3
##         /
##        4
##
## Complexity: Time O(h*log(n)) = O(log(n)*log(n)) Space O(h)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root is None:
            return 0
        if root.left is None and root.right is None:
            return 1

        # first node is level 1
        d = 1
        node = root
        while node.left:
            node = node.left
            d += 1

        # binary search: find the last True
        # huffman coding
        left, right = 0, 2**(d-1)
        while left < right:
            mid = left + (right-left)/2
            if self.nthNodeExists(root, mid, d):
                left = mid + 1
            else:
                right = mid

        # why? return the last exists node
        return left - 1

    def nthNodeExists(self, root, n, d):
        # check whether nth node exists in the tree
        # from huffman coding get whether to turn left or turn right
        count = d-1
        l = [None] * (count)
        i = count - 1
        while n != 0:
            if n % 2 == 1:
                l[i] = '1'
            else:
                l[i] = '0'
            i -= 1
            n = n << 1
        l = l[::-1]
        node = root
        for i in xrange(count):
            if l[i] == '0':
                node = node.left
            else:
                node = node.right
        return node is not None
#+END_SRC
