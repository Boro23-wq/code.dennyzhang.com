* Leetcode: Longest Mountain in Array                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     array, mountain
:END:
---------------------------------------------------------------------
Longest Mountain in Array
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/peak-index-in-a-mountain-array][Peak Index in a Mountain Array]]
- Tag: [[https://code.dennyzhang.com/tag/array][#array]], [[https://code.dennyzhang.com/tag/mountain][#mountain]]
---------------------------------------------------------------------
Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

#+BEGIN_EXAMPLE
B.length >= 3
There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
(Note that B could be any subarray of A, including the entire array A.)
#+END_EXAMPLE

Given an array A of integers, return the length of the longest mountain. 

Return 0 if there is no mountain.
 
Example 1:
#+BEGIN_EXAMPLE
Input: [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [2,2,2]
Output: 0
Explanation: There is no mountain.
#+END_EXAMPLE

Note:

1. 0 <= A.length <= 10000
- 0 <= A[i] <= 10000

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/longest-mountain-in-array][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/longest-mountain-in-array/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/longest-mountain-in-array
// Basic Ideas:
// Find the top of the mountains. Then keep looking both sides
// Complexity: Time O(n), Space O(n)
func longestMountain(A []int) int {
    res := 0
    for i:=1; i<len(A)-1; i++ {
        if A[i-1]<A[i] && A[i]>A[i+1] {
            j, k := i-1, i+1
            for j-1>=0 && A[j-1]<A[j] { j-- }
            for k+1<len(A) && A[k]>A[k+1] { k++ }
            if k-j+1 > res { res = k-j+1 }
        }
    }
    return res
}
#+END_SRC
