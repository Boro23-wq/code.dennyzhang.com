* Leetcode: Sliding Window Maximum                               :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:    monotone
:END:
---------------------------------------------------------------------
Sliding Window Maximum
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/min-stack][Min Stack]]
- [[https://code.dennyzhang.com/review-monotone][Review: Monotone Stack Or Monotone Queue Problems]], Tag: [[https://code.dennyzhang.com/tag/monotone][monotone]]
---------------------------------------------------------------------
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
#+BEGIN_EXAMPLE
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
#+END_EXAMPLE

Note: 
You may assume k is always valid, ie: 1 <= k <= input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/sliding-window-maximum][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/sliding-window-maximum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

Useful link: [[url-external:https://leetcode.com/problems/sliding-window-maximum/discuss/65885/This-is-a-typical-monotonic-queue-problem][monotonic queue problem]]
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/sliding-window-maximum
## Basic Ideas: sliding window with decreasing sequence
##
## Complexity: Time O(n), Space O(k)
class Solution:
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        import collections
        res = []
        queue = collections.deque()
        for i in range(len(nums)):
            # remove the number
            if len(queue)!=0 and queue[0] == i-k:
                queue.popleft()

            # keep the window decreasing
            while len(queue) != 0 and nums[i] >= nums[queue[-1]]:
                queue.pop()
                
            # we need to add the new number in all cases
            queue.append(i)

            # already have k numbers
            if i >= k-1: res.append(nums[queue[0]])
        return res
#+END_SRC
