* Leetcode: Verify Preorder Serialization of a Binary Tree                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #misc, #stack
:END:
---------------------------------------------------------------------
Verify Preorder Serialization of a Binary Tree
---------------------------------------------------------------------
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.
#+BEGIN_EXAMPLE
     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
#+END_EXAMPLE

For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

#+BEGIN_EXAMPLE
Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
"1,#"
Return false
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:
"9,#,#,1"
Return false
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/verify-preorder-serialization-of-a-binary-tree][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: http://brain.dennyzhang.com/verify-preorder-serialization-of-a-binary-tree

#+END_SRC
---------------------------------------------------------------------
