* Leetcode: Single Number III                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     #findnumber
:END:
---------------------------------------------------------------------
Find elements from a list of numbers
---------------------------------------------------------------------
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
1. The order of the result is not important. So in the above example, [5, 3] is also correct.
- Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/single-number-iii][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/single-number-iii/description/][Leetcode.com]]

Hint: Time O(n), Space O(1). Moore voting

Leave me comments, if you know how to solve.

Useful link: [[url-external:https://discuss.leetcode.com/topic/17564/boyer-moore-majority-vote-algorithm-and-my-elaboration][here]]

#+BEGIN_SRC python
## Basic Ideas:
##       No more than 2 elements would be qualified.
##     Sample Data:
##       1 2 3 2 3 3
## Complexity: Time O(n), Space O(1)
## Asummption:
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        length = len(nums)
        if length == 0:
            return []
        n1, n2 = None, None
        c1, c2 = 0, 0
        for num in nums:
            if num == n1:
                c1 += 1
            elif num == n2:
                c2 += 1
            elif c1 == 0:
                n1, c1 = num, 1
            elif c2 == 0:
                n2, c2 = num, 1
            else:
                c1, c2 = c1 - 1, c2 - 1
        c1, c2 = 0, 0
        for num in nums:
            if num == n1:
                c1 += 1
            elif num == n2:
                c2 += 1
        # print("n1: %d, c1: %d, n2: %d, c2: %d. length: %d" % (n1, c1, n2, c2, length))
        res = []
        if c1 > length/3:
            res.append(n1)
        if c2 > length/3:
            res.append(n2)
        return res

s = Solution()
# print s.majorityElement([1, 2])
# print s.majorityElement([1,2,1,1,1,3,3,4,3,3,3,4,4,4])
print s.majorityElement([1,1,1,2,3,4,5,6])
# print s.majorityElement([1, 2, 3, 2, 3, 3])
#+END_SRC
