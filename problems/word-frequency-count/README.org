* LintCode: Word Frequency Count                                :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     hashmap
:END:
---------------------------------------------------------------------
Word Frequency Count
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-frequency-count"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/hashmap][#hashmap]]
---------------------------------------------------------------------
Description
Input a string s and a string list excludeList to find all the most frequent words in s that do not exist in excludeList. Your results will be sorted by lexicographic order by online judge.

The words are case-insensitive and finally return lowercase words
Non-alphabetic characters in the string are considered as spaces, and spaces are word separators
The length of all words does not exceed 10^5​​  and the length a word does not exceed 100

Example
#+BEGIN_EXAMPLE
Given s="I love Amazon.", excludeList=[] , return ["i","love","amazon"].

Explanation:
"i", "love", and "amazon" are the words that appear the most.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given s="Do not trouble trouble.", excludeList=["do"], return ["trouble"].

Explanation:
"trouble" is the most frequently occurring word.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-frequency-count][code.dennyzhang.com]]

Credits To: [[https://www.lintcode.com/problem/word-frequency-count/description][lintcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: dfs

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/word-frequency-count
// Basic Ideas: hashmap
// Complexity: Time O(n*log(n)), Space O(n)
/**
 * @param s: The string s
 * @param excludeList: The excludeList
 * @return: Return the most frequent words
 */
import ("strings"
        "sort")
func getWords (s string, excludeList []string) []string {
    excludeMap := map[string]bool{}
    for _, str := range excludeList { excludeMap[str] = true }
    wordMap := map[string]int{}
    max_count := 0
    s = strings.ToLower(s) + " "
    str := ""
    for _, ch := range s {
        if ch >= 'a' && ch <= 'z' {
            str += string(ch)
        } else {
            if str != "" {
                if excludeMap[str] == false {
                    wordMap[str] += 1
                    if wordMap[str] > max_count { max_count = wordMap[str] }
                }
                str = ""
            }
        }
    }
    res := []string{}
    for str := range wordMap {
        if wordMap[str] == max_count {
            res = append(res, str)
        }
    }
    sort.Strings(res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
