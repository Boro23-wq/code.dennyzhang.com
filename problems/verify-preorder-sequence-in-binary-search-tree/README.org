* Leetcode: Verify Preorder Sequence in Binary Search Tree                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, monotone
:END:
---------------------------------------------------------------------
Verify Preorder Sequence in Binary Search Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/verify-preorder-sequence-in-binary-search-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/verify-preorder-serialization-of-a-binary-tree][Verify Preorder Serialization of a Binary Tree]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]], [[https://code.dennyzhang.com/review-monotone][#monotone]]
---------------------------------------------------------------------
Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Follow up:
Could you do it using only constant space complexity?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/verify-preorder-sequence-in-binary-search-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/verify-preorder-sequence-in-binary-search-tree
// Basic Ideas: monotonic stack
//
//   pre-order:
//      push left sub-tree to stack
//
//   M L R
//
//  Inside stack:
//
//  R
//  L
//  M
//  
//  When get right-subtree node, pop all left-subtree nodes..
// Complexity: Time O(n), Space O(n)
func verifyPreorder(preorder []int) bool {
    stack := []int{}
    root := -1<<32
    for _, v := range preorder {
        // right sub-tree is bigger than root
        if v < root {
            return false
        }
        for len(stack) > 0 && stack[len(stack)-1] < v {
            // pop
            root = stack[len(stack)-1]
            stack = stack[0:len(stack)-1]
        }
        stack = append(stack, v)
    }
    return true
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
