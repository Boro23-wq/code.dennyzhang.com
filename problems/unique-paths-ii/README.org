* Leetcode: Unique Paths II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, classic, redo
:END:
---------------------------------------------------------------------
Unique Paths II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-paths-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/unique-paths][Leetcode: Unique Paths]]
- [[https://code.dennyzhang.com/review-dynamicprogramming][Review: Dynamic Programming Problems]]
- Tag: [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
#+BEGIN_EXAMPLE
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
#+END_EXAMPLE
The total number of unique paths is 2.

Note: m and n will be at most 100.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-paths-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/unique-paths-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/unique-paths-ii
## Basic Ideas: dynamic programming
##  Very similar to https://code.dennyzhang.com/unique-paths
##
##              f(i, j) = if it's obstacle, 0
##                        else: f(i-1, j) + f(i, j-1)
##
## Complexity: Time O(m*n), Space O(m*n)
class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        row_count = len(obstacleGrid)
        if row_count == 0: return 0
        col_count = len(obstacleGrid[0])
        # use default values to simplify the code
        matrix = [[0 for x in xrange(col_count)] for y in xrange(row_count)]

        matrix[0][0] = 1 if obstacleGrid[0][0] == 0 else 0
        # first row
        i = 0
        for j in range(1, col_count):
            if obstacleGrid[i][j] == 0: matrix[i][j] = matrix[i][j-1]

        # first column
        j = 0
        for i in range(1, row_count):
            if obstacleGrid[i][j] == 0: matrix[i][j] = matrix[i-1][j]

        # others
        for i in range(1, row_count):
            for j in range(1, col_count):
                if obstacleGrid[i][j] == 0:
                    matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]

        return matrix[-1][-1]
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
