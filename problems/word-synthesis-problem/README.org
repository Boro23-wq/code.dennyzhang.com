* Leetcode: Word Synthesis Problem                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dfs, inspiring
:END:
---------------------------------------------------------------------
Word Synthesis Problem
---------------------------------------------------------------------
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/dfs][#dfs]], [[https://code.dennyzhang.com/tag/inspiring][#inspiring]]
---------------------------------------------------------------------
Description
Given a target word targets and a collection of n words words, can you select some words from words and select one letter from each word to compose the target word target ?

Only lowercase letters a-z will be included in the string
target is no longer than 20, each word in words is no more than 20, and words is no more than 20.

Example
#+BEGIN_EXAMPLE
Given target="ally",words=["buy","discard","lip","yep"],return false

Explanation:
'buy' can match 'y', 'discard' can match 'a', 'lip' can match 'l', 'yep' cannot correspond to any one letter, so there is still one 'l' in 'target' that cannot be matched. 
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given target="ray",words=["buy","discard","lip","rep"],return true

Explanation:
'buy' can match 'y', 'discard' can match 'a', 'rep' can match 'r'.
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/word-synthesis-problem][challenges-leetcode-interesting]]

Credits To: [[https://www.lintcode.com/problem/word-synthesis-problem/description][lintcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: dfs

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/word-synthesis-problem
// Basic Ideas: dfs
// Complexity: 
/**
 * @param target: the target string
 * @param words: words array
 * @return: whether the target can be matched or not
 */
var visited = map[int]bool{}
var chMap = map[rune][]int{}

func dfs(target string) bool {
    if target == "" { return true }
    ch := rune(target[0])
    for _, index := range chMap[ch] {
        if visited[index] == false {
            visited[index] = true
            if dfs(target[1:]) == true { return true }
            visited[index] = false
        }
    }
    return false
}

func matchFunction (target string, words []string) bool {
    for i, word := range words {
        for _, ch := range word {
            chMap[ch] = append(chMap[ch], i)
        }
    }
    return dfs(target)
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
