* Leetcode: Maximum Width Ramp                                   :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     monotone, binarysearch
:END:
---------------------------------------------------------------------
Maximum Width Ramp
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-width-ramp"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/review-monotone][#monotone]]
---------------------------------------------------------------------
Given an array A of integers, a ramp is a tuple (i, j) for which i < j and A[i] <= A[j].  The width of such a ramp is j - i.

Find the maximum width of a ramp in A.  If one doesn't exist, return 0.

Example 1:
#+BEGIN_EXAMPLE
Input: [6,0,8,2,1,5]
Output: 4
Explanation: 
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: 
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.
#+END_EXAMPLE
 
Note:

1. 2 <= A.length <= 50000
- 0 <= A[i] <= 50000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-width-ramp][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-width-ramp/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-width-ramp
// Basic Ideas: monotone stack + binarysearch
//
//   For each j, find i.
//     Value vs location
//
// Complexity: Time O(n*log(n)), Space O(n)
func maxWidthRamp(A []int) int {
    res := 0
    stack := []int{}
    for i, v := range A {
        if len(stack) == 0 || A[stack[len(stack)-1]] > v {
            stack = append(stack, i)
        }
        left, right := 0, len(stack)-1
        // F, F, F, T, T, T
        for left<right {
            mid := (right-left)/2+left
            if A[stack[mid]] <= v {
                right = mid
            } else {
                left = mid+1
            }
        }
        if i-stack[left] > res {
            res = i-stack[left]
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
