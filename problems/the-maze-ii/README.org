* Leetcode: The Maze II                                         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     graph, bfs, dfs, inspiring, redo
:END:
---------------------------------------------------------------------
The Maze II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/the-maze-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-graph][#graph]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/review-dfs][#dfs]]
---------------------------------------------------------------------
There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the ball's start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.

The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.

Example 1:
[[image-blog:Leetcode: The Maze II][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/the-maze-ii/1.png]]
#+BEGIN_EXAMPLE
Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (4, 4)

Output: 12

Explanation: One shortest way is : left -> down -> left -> down -> right -> down -> right.
             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.
#+END_EXAMPLE

Example 2:
[[image-blog:Leetcode: The Maze II][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/the-maze-ii/2.png]]
#+BEGIN_EXAMPLE
Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (3, 2)

Output: -1

Explanation: There is no way for the ball to stop at the destination.
#+END_EXAMPLE

Note:

1. There is only one ball and one destination in the maze.
- Both the ball and the destination exist on an empty space, and they will not be at the same position initially.
- The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.
- The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/the-maze-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/the-maze-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/the-maze-ii
// Basic Ideas: BFS
//    Positions would be elements of the Queue
//    When deque, move in 4 directions, until it hits the wall or boundary
//    Then backward for one step
// Complexity: Time O(n*m), Space O(n*m)
func shortestDistance(maze [][]int, start []int, destination []int) int {
    distances := make([][]int, len(maze))
    for i, _ := range distances {
        distances[i] = make([]int, len(maze[0]))
        for j, _ := range distances[i] {
            distances[i][j] = 1<<31-1
        }
    }
    distances[start[0]][start[1]] = 0
    queue := [][]int{start}
    level := 1
    for len(queue)>0 {
        l := [][]int{}
        for _, node := range queue {
            i, j := node[0], node[1]
            for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, 
                                           []int{0, 1}, []int{0, -1}} {
                count := 0
                // keep moving until hit the wall or boundary
                i2, j2 := i+offset[0], j+offset[1]
                for i2>=0 && i2<len(maze) && j2>=0 && 
                    j2<len(maze[0]) && maze[i2][j2] == 0 {
                    i2, j2 = i2+offset[0], j2+offset[1]
                    count++
                }
                // backward one step
                i2, j2 = i2-offset[0], j2-offset[1]
                if count + distances[i][j] < distances[i2][j2] {
                    distances[i2][j2] = count + distances[i][j]
                    l = append(l, []int{i2, j2})
                }
                if i2 == destination[0] && j2 == destination[1] {
                    break
                }
            }
        }
        queue = l
        level++
    }
    res := distances[destination[0]][destination[1]]
    if res == 1<<31-1 {
        res = -1
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
