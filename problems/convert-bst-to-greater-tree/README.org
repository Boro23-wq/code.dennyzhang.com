* Leetcode: Convert BST to Greater Tree                          :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Tree traversal: right, middle, left
---------------------------------------------------------------------
Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

#+BEGIN_EXAMPLE
Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/convert-bst-to-greater-tree][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/convert-bst-to-greater-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/convert-bst-to-greater-tree
## Basic Ideas: Tree traversal: right, middle, left
##              Visit nodes in a descending way
##           TODO: how to do it in a recusive way?
## Complexity:
## Sample Data:
##           10
##         /   \
##        5     13
##       / \    /
##      2   7  11
##
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        stack = []
        p = root
        while p:
            stack.append(p)
            p = p.right

        previous_node = None
        while len(stack) != 0:
            top_element = stack.pop()
            if previous_node:
                top_element.val += previous_node.val
            previous_node = top_element
            if top_element.left:
                p = top_element.left
                while p:
                    stack.append(p)
                    p = p.right
        return root            
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="http://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
