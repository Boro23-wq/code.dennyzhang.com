* Leetcode: Reverse Linked List                                  :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist
:END:
---------------------------------------------------------------------
Reverse Linked List
---------------------------------------------------------------------
Reverse a singly linked list.

click to show more hints.

Hint:
A linked list can be reversed either iteratively or recursively. Could you implement both?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/reverse-linked-list][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/reverse-linked-list/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    ## Blog link: https://code.dennyzhang.com/reverse-linked-list
## Basic Ideas: recursive way
    ##                 def myReverseList(self, head_processed, head_unprocessed)
    ## Complexity: Time O(n), Space O(1)
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return head
        p = head.next
        head.next = None
        return self.myReverseList(head, p)

    def myReverseList(self, head_processed, head_unprocessed):
        if head_unprocessed is None:
            return head_processed
        q = head_unprocessed.next
        # append to the head
        head_unprocessed.next = head_processed
        return self.myReverseList(head_unprocessed, q)

    ## Blog link: https://code.dennyzhang.com/reverse-linked-list
## Basic Ideas: Since the head will be changed, add a dummy node
    ##              p points to the next node to be reversed
    ##              take p and insert to dummyNode.next
    ## Complexity: Time O(n) Space O(1)
    def reverseList_v1(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # empty or a single node
        if head is None or head.next is None:
            return head
        dummyNode = ListNode(None)
        dummyNode.next = head
        p = head.next
        # Configure the tail of processed list
        head.next = None
        while p:
            q = p.next
            p.next = dummyNode.next
            dummyNode.next = p
            p = q
        return dummyNode.next
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
