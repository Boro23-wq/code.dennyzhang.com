* Leetcode: Number of Valid Subarrays                            :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     monotone
:END:
---------------------------------------------------------------------
Number of Valid Subarrays
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-valid-subarrays"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/monotone][#monotone]]
---------------------------------------------------------------------
Given an array A of integers, return the number of non-empty continuous subarrays that satisfy the following condition:

The leftmost element of the subarray is not larger than other elements in the subarray.

Example 1:
#+BEGIN_EXAMPLE
Input: [1,4,2,5,3]
Output: 11
Explanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [3,2,1]
Output: 3
Explanation: The 3 valid subarrays are: [3],[2],[1].
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: [2,2,2]
Output: 6
Explanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].
#+END_EXAMPLE
 
Note:

1. 1 <= A.length <= 50000
- 0 <= A[i] <= 100000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-valid-subarrays][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/number-of-valid-subarrays/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/number-of-valid-subarrays
// Basic Ideas: Monotone stack
//    Find the next bigger value for a given element
// Complexity: Time O(n), Space O(n)
func validSubarrays(nums []int) int {
    l := make([]int, len(nums))
    for i, _ := range l {
        l[i] = len(nums)
    }
    stack := []int{}
    for i, v := range nums {
        for len(stack) > 0 && nums[stack[len(stack)-1]] > v {
            l[stack[len(stack)-1]] = i
            stack = stack[0:len(stack)-1]
        }
        stack = append(stack, i)
    }
    
    res := 0
    for i, _ := range nums {
        res += l[i]-i
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
