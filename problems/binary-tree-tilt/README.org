* Leetcode: Binary Tree Tilt                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Tree operations
---------------------------------------------------------------------
Given a binary tree, return the tilt of the whole tree.

The tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.

The tilt of the whole tree is defined as the sum of all nodes' tilt.

#+BEGIN_EXAMPLE
Example:
Input: 
         1
       /   \
      2     3
Output: 1
Explanation: 
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-3| = 1
Tilt of binary tree : 0 + 0 + 1 = 1
#+END_EXAMPLE

Note:

The sum of node values in any subtree won't exceed the range of 32-bit integer.
All the tilt values won't exceed the range of 32-bit integer.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-tree-tilt][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/binary-tree-tilt/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/binary-tree-tilt
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findTilt(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        ## Idea: 
        ## Complexity: Time O(n), Space O(h)
        (_sum, cur_tilt) = self._findTilt(root)
        return cur_tilt

    def _findTilt(self, root):
        """
        :rtype: (sum, tilt)
        """
        if root is None:
            return (0, 0)
        if root.left is None and root.right is None:
            return (root.val, 0)
        cur_sum, cur_tilt = 0, 0
        left_sum, left_tilt = 0, 0
        right_sum, right_tilt = 0, 0
        if root.left:
            (left_sum, left_tilt) = self._findTilt(root.left)
        if root.right:
            (right_sum, right_tilt) = self._findTilt(root.right)
        cur_sum = left_sum + right_sum + root.val
        cur_tilt = left_tilt + right_tilt + abs(left_sum-right_sum)
        return (cur_sum, cur_tilt)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
