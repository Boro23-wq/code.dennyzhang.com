* Leetcode: Minimum Moves to Equal Array Elements              :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math
:END:
---------------------------------------------------------------------
Minimum Moves to Equal Array Elements
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-moves-to-equal-array-elements"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/minimum-moves-to-equal-array-elements-ii][Leetcode: Minimum Moves to Equal Array Elements II]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/math][math]]
---------------------------------------------------------------------
Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.
#+BEGIN_EXAMPLE
Example:

Input:
[1,2,3]

Output:
3

Explanation:
Only three moves are needed (remember each move increments two elements):

[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-moves-to-equal-array-elements][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-moves-to-equal-array-elements/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-moves-to-equal-array-elements
// Basic Ideas: Math
// First of all, for all input, we can always find one possible way to make all numbers equal
//   Let's say, we have A B C D. And it's in ascending order
//   Keep increase group of (A, B, C), untilsome of the element is D now.
//   So we have (D D E F). Apparently D is no smaller than E, F
//   Then keep incase (D D F). We will get (G G E E). Then we can get (H H H I).
//   Then we get (O O O O)
//
// For each move, the mininum value will still be the mininum
// For each move, the mininum value will add 1
//
// Complexity:
func minMoves(nums []int) int {
    sum, min := 0, 1<<31 - 1
    for _, num := range nums {
        sum += num
        if (num < min) { min = num }
    }
    return sum - min*len(nums)
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
