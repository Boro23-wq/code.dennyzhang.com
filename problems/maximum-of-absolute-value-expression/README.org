* Leetcode: Maximum of Absolute Value Expression                 :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     array, inspiring
:END:
---------------------------------------------------------------------
Maximum of Absolute Value Expression
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-of-absolute-value-expression"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/array][#array]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]]
---------------------------------------------------------------------
Given two arrays of integers with equal lengths, return the maximum value of:
#+BEGIN_EXAMPLE
|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|
#+END_EXAMPLE

where the maximum is taken over all 0 <= i, j < arr1.length.

Example 1:
#+BEGIN_EXAMPLE
Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20
#+END_EXAMPLE
 
Constraints:

1. 2 <= arr1.length == arr2.length <= 40000
- -10^6 <= arr1[i], arr2[i] <= 10^6

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-of-absolute-value-expression][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-of-absolute-value-expression/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-of-absolute-value-expression
// Basic Ideas:
//
//  Notice
//  1. To get max(|f(i)-f(j)|), find the smallest and biggest of f(i)
//  2. abs(A) + abs(B) = max(A+B, A-B, -A+B, -A-B)
//
//  max(|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|)
//      max(|(arr1[i]+arr2[i]+i)-(arr1[j]+arr2[j]+j|),
//          |(arr1[i]+arr2[i]-i)-(arr1[j]+arr2[j]-j)|,
//          |(arr1[i]-arr2[i]+i)-(arr1[j]-arr2[j]+j)|,
//          |(arr1[i]-arr2[i]-i)-(arr1[j]-arr2[j]-j)|)
//
//  Since we only need to choose two elements, we can sort the arrays.
//  But this turns out will not help to speed up the search
//
// Complexity: Time O(n), Space O(1)
func maxAbsValExpr(arr1 []int, arr2 []int) int {
    sl := []int{1<<31-1, 1<<31-1, 1<<31-1, 1<<31-1}
    bl := []int{-1<<31, -1<<31, -1<<31, -1<<31}
    res := -1<<31
    for i:=0; i<len(arr1); i++ {
        l := []int{arr1[i]+arr2[i]+i,
                   arr1[i]+arr2[i]-i,
                   arr1[i]-arr2[i]+i,
                   arr1[i]-arr2[i]-i}
        for j:=0; j<4; j++ {
            if l[j] < sl[j] {
                sl[j] = l[j]
            }
            if l[j] > bl[j] {
                bl[j] = l[j]
            }
            if res < (bl[j]-sl[j]) {
               res = bl[j]-sl[j]
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
