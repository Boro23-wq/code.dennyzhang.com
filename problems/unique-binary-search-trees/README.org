* Leetcode: Unique Binary Search Trees                            :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, dynamicprogramming, codetemplate, inspiring
:END:
---------------------------------------------------------------------
Unique Binary Search Trees
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-binary-search-trees"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/unique-binary-search-trees-ii][Leetcode: Unique Binary Search Trees II]]
- [[https://code.dennyzhang.com/review-dynamicprogramming][Review: Dynamic Programming Problems]]
- Tag: [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
#+BEGIN_EXAMPLE
For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-binary-search-trees][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/unique-binary-search-trees/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/unique-binary-search-trees
// Basic Ideas: dynamic programming
//       Pitfalls: try to compare the values. This direction will make things very complicated
//
//       How to get f(n) from previous values?
//           1. We will have a root, so sum(left sub-tree nodes) + sum(right sub-tree nodes) = n-1
//           2. If root is i, left sub-tree will have i-1 nodes, right sub-tree will have n-k nodes.
//                  How many different types? f(i-1)*f(n-i)
//           3. Loop k from 1 to n. Then collect the total number
//  n = 2:
//
//       1         2
//        \       /
//         2     1
//
//  n = 3:
//
//       1         3     3      2      1
//        \       /     /      / \      \
//         3     2     1      1   3      2
//        /     /       \                 \
//       2     1         2                 3
//
//  n = 4:
//
//
//
// Complexity:

func numTrees(n int) int {
    if n<=1 {return n}
    dp := make([]int, n+1)
    dp[0] = 1
    for i, _:= range dp {
        if i == 0 { continue }
        for j := 0; j<i; j++ {
            dp[i] += dp[j]*dp[i-1-j]
        }
    }
    return dp[n]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
