* Leetcode: Binary Trees With Factors                            :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, dynamicprogramming, redo
:END:
---------------------------------------------------------------------
Binary Trees With Factors
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-trees-with-factors"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]], [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
Given an array of unique integers, each integer is strictly greater than 1.

We make a binary tree using these integers and each number may be used for any number of times.

Each non-leaf node's value should be equal to the product of the values of it's children.

How many binary trees can we make?  Return the answer modulo 10 ** 9 + 7.

Example 1:
#+BEGIN_EXAMPLE
Input: A = [2, 4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: A = [2, 4, 5, 10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].
#+END_EXAMPLE

Note:

- 1 <= A.length <= 1000.
- 2 <= A[i] <= 10 ^ 9.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-trees-with-factors][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/binary-trees-with-factors/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/binary-trees-with-factors
// Basic Ideas: dynamic programming
//
//  Root node as i
//
//    dp(i) = dp(k)*dp(i-k)
//         Both k and i-k should exist in the original array
//         Then add 1 as a single node in the tree
// Complexity: Time O(n^2) Space O(n)
import ("math"
        "sort")
func numFactoredBinaryTrees(A []int) int {
    sort.Ints(A)
    mod := int(math.Pow(10, 9)+7)
    dp := map[int]int{}
    for _, v := range A {
        dp[v] = 1
    }
    for i:=0; i<len(A); i++ {
        for k:=i-1; k>=0; k-- {
            if A[i]%A[k] == 0 {
                v := A[i]/A[k]
                if _, ok := dp[v]; ok {
                    dp[A[i]] = dp[A[i]] + dp[A[k]]*dp[v]
                }
            }
        }
    }
    res := 0
    for _, v := range dp {
        res = (res+v)%mod
    }
    return res
}

#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
