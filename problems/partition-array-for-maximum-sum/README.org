* Leetcode: Partition Array for Maximum Sum                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, presum
:END:
---------------------------------------------------------------------
Partition Array for Maximum Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-for-maximum-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/presum][#presum]]
---------------------------------------------------------------------
Given an integer array A, you partition the array into (contiguous) subarrays of length at most K.  After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.

Example 1:
#+BEGIN_EXAMPLE
Input: A = [1,15,7,9,2,5,10], K = 3
Output: 84
Explanation: A becomes [15,15,15,9,10,10,10]
#+END_EXAMPLE
 
Note:

1. 1 <= K <= A.length <= 500
- 0 <= A[i] <= 10^6

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-for-maximum-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/partition-array-for-maximum-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/partition-array-for-maximum-sum
// Basic Ideas: dynamic programming
//
//   dp[i]: l[0...i]
//   dp[i] = max(dp[i-j] + max(A[i-1], A[i-2], ... A[i-j]) * j)
//       1 <= j < K
//
// Complexity: Time O(n*k), Space O(n*k)
func maxSumAfterPartitioning(A []int, K int) int {
    dp := make([]int, len(A))
    dp[0] = A[0]
    for i:=1; i<len(A); i++ {
        dp[i] = A[i] + dp[i-1]
        max := A[i]
        for j:=1; j<K && i-j>=0; j++ {
            // A[i], A[i-1], A[i-2] ...  A[i-j]
            if A[i-j] > max {
                max = A[i-j]
            }
            // Need to overwrite A[0]
            v := 0
            if i-j-1 >= 0 {
                v = dp[i-j-1]
            }
            if v+max*(j+1) > dp[i] {
                dp[i] = v+max*(j+1)
            }
        }
    }
    return dp[len(A)-1]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
