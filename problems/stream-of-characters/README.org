* Leetcode: Stream of Characters                                 :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     trie
:END:
---------------------------------------------------------------------
Stream of Characters
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/stream-of-characters"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-trie][#trie]]
---------------------------------------------------------------------
Implement the StreamChecker class as follows:

StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
 
Example:
#+BEGIN_EXAMPLE
StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // init the dictionary.
streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
#+END_EXAMPLE
 
Note:

- 1 <= words.length <= 2000
- 1 <= words[i].length <= 2000
- Words will only consist of lowercase English letters.
- Queries will only consist of lowercase English letters.
- The number of queries is at most 40000.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/stream-of-characters][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/stream-of-characters/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Trie with hashmap

#+BEGIN_SRC go
// https://code.dennyzhang.com/stream-of-characters
// Basic Ideas: Trie
// Build a trie
//
// For each search, remember previous query characters
//
// Complexity: Time O(w), Space O(w)
type StreamChecker struct {
    children map[byte]*StreamChecker
    isLeaf bool
    query []byte
}

func Constructor(words []string) StreamChecker {
    root := StreamChecker{children:map[byte]*StreamChecker{}}
    for _, word := range words {
        p := &root
        for i:=len(word)-1; i>=0; i-- {
            ch := word[i]
            if _, ok := p.children[ch]; !ok {
                q := &StreamChecker{children:map[byte]*StreamChecker{}}
                p.children[ch] = q
            }
            p = p.children[ch]
        }
        p.isLeaf = true
    }
    return root
}

func (this *StreamChecker) Query(letter byte) bool {
    this.query = append(this.query, letter)
    p := this
    for i:=len(this.query)-1; i>=0; i-- {
        ch := this.query[i]
        // no match
        if _, ok := p.children[ch]; !ok {
            return false
        }
        p = p.children[ch]
        if p.isLeaf {
            return true
        }
    }
    return false
}

/**
 * Your StreamChecker object will be instantiated and called as such:
 * obj := Constructor(words);
 * param_1 := obj.Query(letter);
 */
#+END_SRC

- Solution: Trie with fixed-size array instead of hashmap

#+BEGIN_SRC go
// https://code.dennyzhang.com/stream-of-characters
// Basic Ideas: Trie
// Build a trie
//
// For each search, remember previous query characters
//
// Complexity: Time O(w), Space O(w)
var query []byte

type StreamChecker struct {
    children []*StreamChecker
    isLeaf bool
}

func Constructor(words []string) StreamChecker {
    query = []byte{}
    root := StreamChecker{children:make([]*StreamChecker, 26)}
    for _, word := range words {
        p := &root
        for i:=len(word)-1; i>=0; i-- {
            index := int(word[i]-'a')
            if p.children[index] == nil {
                q := &StreamChecker{children:make([]*StreamChecker, 26)}
                p.children[index] = q
            }
            p = p.children[index]
        }
        p.isLeaf = true
    }
    return root
}

func (this *StreamChecker) Query(letter byte) bool {
    query = append(query, letter)
    p := this
    for i:=len(query)-1; i>=0; i-- {
        index := int(query[i]-'a')
        // no match
        if p.children[index] == nil {
            return false
        }
        p = p.children[index]
        if p.isLeaf {
            return true
        }
    }
    return false
}

/**
 * Your StreamChecker object will be instantiated and called as such:
 * obj := Constructor(words);
 * param_1 := obj.Query(letter);
 */
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
