* Leetcode: Combination Sum                                      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     backtracking, combination
:END:
---------------------------------------------------------------------
Combination Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/combination-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/combination-sum][Leetcode: Combination Sum]]
- [[https://code.dennyzhang.com/combination-sum-ii][Leetcode: Combination Sum II]]
- [[https://code.dennyzhang.com/combination-sum-iii][Leetcode: Combination Sum III]]
- [[https://code.dennyzhang.com/combination-sum-iv][Leetcode: Combination Sum IV]]
- [[https://code.dennyzhang.com/subset-with-target][LintCode: Subset With Target]]
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]]
- Tag: [[https://code.dennyzhang.com/review-combination][#combination]], [[https://code.dennyzhang.com/review-backtracking][#backtracking]]
---------------------------------------------------------------------
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
- All numbers (including target) will be positive integers.
- The solution set must not contain duplicate combinations.
#+BEGIN_EXAMPLE
For example, given candidate set [2, 3, 6, 7] and target 7,
A solution set is:
[
  [7],
  [2, 2, 3]
]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/combination-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/combination-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/combination-sum
// Basic Idea: backtracking
//
// Complexity: Time ? Space ?
func dfs(combination []int, target int, candidates []int, pos int, res *[][]int) {
    if (target == 0) {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
        return
    }
    if pos == len(candidates) {
        return
    }
    v := candidates[pos]
    for i:=0; i*v<=target; i++ {
        l := make([]int, i)
        for j:=0; j<i; j++ {
            l[j] = v
        }
        combination = append(combination, l...)
        dfs(combination, target-i*v, candidates, pos+1, res)
        combination = combination[0:len(combination)-i]
    }
}

func combinationSum(candidates []int, target int) [][]int {
    res := [][]int{}
    dfs([]int{}, target, candidates, 0, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
