* Leetcode: Construct Binary Tree from String                    :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, stack, redo
:END:
---------------------------------------------------------------------
Construct Binary Tree from String
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/construct-binary-tree-from-string"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-stack][#stack]]
---------------------------------------------------------------------
You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.

Example:
#+BEGIN_EXAMPLE
Input: "4(2(3)(1))(6(5))"
Output: return the tree root node representing the following tree:

       4
     /   \
    2     6
   / \   / 
  3   1 5   
#+END_EXAMPLE

Note:
1. There will only be '(', ')', '-' and '0' ~ '9' in the input string.
- An empty tree is represented by "" instead of "()".

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/construct-binary-tree-from-string][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/construct-binary-tree-from-string/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/construct-binary-tree-from-string
// Basic Ideas: stack + post-order
//
//  L-R-M
//    (X X X)
//    (X X)
//    (X)
// When push back, it would be a TreeNode pointer
//
// Complexity: Time O(n), Space O(n)
//
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
import "strconv"
type MyNode struct {
    node *TreeNode
    isLeft bool
}

func str2tree(s string) *TreeNode {
    if len(s) == 0 {
        return nil
    }
    stack := []*MyNode{}
    for i:=0; i<len(s); i++ {
        ch := s[i]
        if ch != ')' {
            myNode := &MyNode{node:nil, isLeft:true}
            if ch != '(' {
                bytes := []byte{ch}
                for i+1<len(s) && s[i+1] != ')' && s[i+1] != '(' {
                    bytes = append(bytes, s[i+1])
                    i++
                }
                v, _ := strconv.Atoi(string(bytes))
                myNode = &MyNode{node:&TreeNode{Val:v}, isLeft:false}
            }
            stack = append(stack, myNode)
        } else {
            l := []*MyNode{}
            for ! stack[len(stack)-1].isLeft {
                l = append([]*MyNode{stack[len(stack)-1]}, l...)
                stack = stack[0:len(stack)-1]
            }
            // pop )
            stack = stack[0:len(stack)-1]
            if len(l) >= 2 {
                l[0].node.Left = l[1].node
            }
            if len(l) == 3 {
                l[0].node.Right = l[2].node
            }
            stack = append(stack, l[0])
        }
    }
    // get result
    l := stack
    if len(l) >= 2 {
        l[0].node.Left = l[1].node
    }
    if len(l) == 3 {
        l[0].node.Right = l[2].node
    }
    return l[0].node
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
