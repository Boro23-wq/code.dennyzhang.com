* Leetcode: Kth Largest Element in a Stream                      :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     heap
:END:
---------------------------------------------------------------------
Kth Largest Element in a Stream
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/kth-largest-element-in-a-stream"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/kth-largest-element-in-an-array][LeetCode: Kth Largest Element in an Array]]
- [[https://code.dennyzhang.com/tag/heap][Tag: #heap]]
---------------------------------------------------------------------
Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.

Example:
#+BEGIN_EXAMPLE
int k = 3;
int[] arr = [4,5,8,2];
KthLargest kthLargest = new KthLargest(3, arr);
kthLargest.add(3);   // returns 4
kthLargest.add(5);   // returns 5
kthLargest.add(10);  // returns 5
kthLargest.add(9);   // returns 8
kthLargest.add(4);   // returns 8
#+END_EXAMPLE

Note: 
- You may assume that nums' length >= k-1 and k >= 1.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/kth-largest-element-in-a-stream][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/kth-largest-element-in-a-stream/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: heap

#+BEGIN_SRC python
## https://code.dennyzhang.com/kth-largest-element-in-a-stream
## Basic Ideas: min heap
## Complexity: Time O(log(k)), Space O(k)
import heapq
class KthLargest:

    def __init__(self, k, nums):
        """
        :type k: int
        :type nums: List[int]
        """
        self.q = []
        self.k = k
        for num in nums:
            heapq.heappush(self.q, num)
            if len(self.q) > k: heapq.heappop(self.q)

    def add(self, val):
        """
        :type val: int
        :rtype: int
        """
        heapq.heappush(self.q, val)
        if len(self.q) > self.k: heapq.heappop(self.q)
        return self.q[0]

# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
