* Leetcode: Valid Palindrome II                                 :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     palindrome
:END:
---------------------------------------------------------------------
Valid Palindrome II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/valid-palindrome-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-palindrome][#palindrome]]
---------------------------------------------------------------------
Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.
#+BEGIN_EXAMPLE
Example 1:
Input: "aba"
Output: True
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.
#+END_EXAMPLE

Note:
The string will only contain lowercase characters a-z. The maximum length of the string is 50000.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/valid-palindrome-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/valid-palindrome-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## https://code.dennyzhang.com/valid-palindrome-ii
## Basic Ideas: If mismatched, we can only delete either the left or the right
##
## Complexity: Time O(n), Space O(1)
class Solution(object):
    def validPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if self.isPalindrome(s): return True
        l, r = 0, len(s)-1
        while l<r:
            if s[l]!=s[r]:
                # keep right
                if self.isPalindrome(s[l+1:r+1]): return True
                # keep left
                if self.isPalindrome(s[l:r]): return True
                return False
            l,r = l+1, r-1
        return True

    def isPalindrome(self, s):
        length = len(s)
        if length == 0: return True
        l, r = 0, length-1
        while l<r:
            if s[l]!=s[r]: return False
            l, r = l+1, r-1
        return True
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
