* Leetcode: Maximum Size Subarray Sum Equals k                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     presum, maxsubarraysum
:END:
---------------------------------------------------------------------
Maximum Size Subarray Sum Equals k
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-size-subarray-sum-equals-k"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- [[https://code.dennyzhang.com/get-equal-substrings-within-budget][LeetCode: Get Equal Substrings Within Budget]]
- Tag: [[https://code.dennyzhang.com/followup-presum][#presum]], [[https://code.dennyzhang.com/followup-maxsubarraysum][#maxsubarraysum]]
---------------------------------------------------------------------
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
#+BEGIN_EXAMPLE
Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
#+END_EXAMPLE

Follow Up:
- Can you do it in O(n) time?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-size-subarray-sum-equals-k][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-size-subarray-sum-equals-k
// Basic Ideas: presum + hashmap + onepass
//   m(i) -> the first index which can get the presum of i
// Complexity: Time O(n), Space O(n)
func maxSubArrayLen(nums []int, k int) int {
    preSum := make([]int, len(nums)+1)
    sum := 0
    m := map[int]int{0:-1}
    res := 0
    for i, num := range nums {
        sum += num
        preSum[i] = sum
        _, ok := m[sum]
        if !ok {
            m[sum] = i
        }
        j, ok := m[sum-k]
        if ok && i-j > res {
            res = i-j
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
