* Leetcode: Beautiful Arrangement                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     backtracking
:END:
---------------------------------------------------------------------
Beautiful Arrangement
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/beautiful-arrangement"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-backtracking][#backtracking]]
---------------------------------------------------------------------
Suppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 <= i <= N) in this array:

The number at the ith position is divisible by i.
i is divisible by the number at the ith position.
 
Now given N, how many beautiful arrangements can you construct?

Example 1:
#+BEGIN_EXAMPLE
Input: 2
Output: 2
Explanation: 

The first beautiful arrangement is [1, 2]:

Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).

Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).

The second beautiful arrangement is [2, 1]:

Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).

Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.
#+END_EXAMPLE
 
Note:

1. N is a positive integer and will not exceed 15.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/beautiful-arrangement][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/beautiful-arrangement/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/beautiful-arrangement
// Basic Ideas: backtracking
// Complexity: Time O(k), Space O(n)
func dfs(pos int, visited []bool, res *int) {
    if pos == len(visited) {
        *res++
        return
    }
    // find the next possible value
    for i:=1; i<len(visited); i++ {
        if visited[i] {
            continue
        }
        if i%pos == 0 || pos%i == 0 {
            visited[i] = true
            dfs(pos+1, visited, res)
            visited[i] = false
        }
    }
}

func countArrangement(N int) int {
    res := 0
    visited := make([]bool, N+1)
    dfs(1, visited, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
