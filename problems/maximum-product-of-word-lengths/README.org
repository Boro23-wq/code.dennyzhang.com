* Leetcode: Maximum Product of Word Lengths                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     bitmanipulation
:END:
---------------------------------------------------------------------
Maximum Product of Word Lengths
---------------------------------------------------------------------
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.
#+BEGIN_EXAMPLE
Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-product-of-word-lengths][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-product-of-word-lengths/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/maximum-product-of-word-lengths
## Basic Ideas: Convert each word into 26 bits binary.
##              b[0] -> a, b[1] -> b, b[2] -> c ... b[25] -> z
##              If b1 & b2 == 0, no common letters between word1 and word2
##
## Complexity: Time O(n*n), Space O(n)
class Solution(object):
    def maxProduct(self, words):
        """
        :type words: List[str]
        :rtype: int
        """
        length = len(words)
        binary_list = [0] * length
        mask_dict = {}
        num = 1
        for ascii in range(ord('a'), ord('z') + 1):
            mask_dict[chr(ascii)] = num
            num = num << 1

        # Convert each word to binary
        for i in xrange(length):
            binary = 0
            for ch in words[i]:
                binary = binary | mask_dict[ch]
            binary_list[i] = binary

        max_product = 0
        for i in xrange(length-1):
            for j in range(i+1, length):
                if binary_list[i] & binary_list[j] == 0:
                    product = len(words[i]) * len(words[j])
                    max_product = max(max_product, product)
        return max_product

# s = Solution()
# print s.maxProduct(["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]) # 16
# print s.maxProduct(["a", "ab", "abc", "d", "cd", "bcd", "abcd"]) # 4
# print s.maxProduct(["a", "aa", "aaa", "aaaa"]) # 0
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
