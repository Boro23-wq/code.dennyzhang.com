* Leetcode: Search Insert Position                               :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, codetemplate
:END:
---------------------------------------------------------------------
Search Insert Position
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-email-addresses"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/time-based-key-value-store][Leetcode: Time Based Key-Value Store]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]]
---------------------------------------------------------------------
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

#+BEGIN_EXAMPLE
Example 1:

Input: [1,3,5,6], 5
Output: 2
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

Input: [1,3,5,6], 2
Output: 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:

Input: [1,3,5,6], 7
Output: 4
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 4:

Input: [1,3,5,6], 0
Output: 0
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/search-insert-position][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/search-insert-position/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/search-insert-position
// Basic Ideas: binary search
//
// Complexity: Time O(n*log(n)), Space O(1)
func searchInsert(nums []int, target int) int {
    left, right := 0, len(nums)-1
    for left<=right {
        mid := (right-left)/2+left
        if nums[mid] == target {
            return mid
        }
        if nums[mid] < target {
            left = mid+1
        } else {
            right = mid-1
        }
    }
    return left
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
