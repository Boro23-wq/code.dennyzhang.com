* Leetcode: Search Insert Position                               :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, codetemplate, redo
:END:
---------------------------------------------------------------------
Search Insert Position
---------------------------------------------------------------------
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

#+BEGIN_EXAMPLE
Example 1:

Input: [1,3,5,6], 5
Output: 2
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

Input: [1,3,5,6], 2
Output: 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:

Input: [1,3,5,6], 7
Output: 4
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 4:

Input: [1,3,5,6], 0
Output: 0
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/search-insert-position][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/search-insert-position/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/search-insert-position
// Basic Ideas: binary search
// Find the first element which is no smaller than the target
// Complexity: Time O(log(n)), Space O(1)
func searchInsert(nums []int, target int) int {
    var m int
    l, r := 0, len(nums)-1
    for l<=r {
        m = l + (r-l)/2
        if nums[m] >= target {
            r = m -1
        } else {
            l = m + 1
        }
    }
    return l
}
#+END_SRC
