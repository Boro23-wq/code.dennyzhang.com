* Leetcode: Sum of Subarray Minimums                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     subarray, inspiring, classic
:END:
---------------------------------------------------------------------
Sum of Subarray Minimums
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-of-subarray-minimums"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/online-stock-span][Leetcode: Online Stock Span]]
- [[https://code.dennyzhang.com/split-array-into-consecutive-subsequences][Split Array into Consecutive Subsequences]]
- [[https://code.dennyzhang.com/3sum-with-multiplicity][3Sum With Multiplicity]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/subarray][#subarray]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-monotone][#monotone]]
---------------------------------------------------------------------
Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.

Since the answer may be large, return the answer modulo 10^9 + 7.

Example 1:
#+BEGIN_EXAMPLE
Input: [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.
#+END_EXAMPLE

Note:

1. 1 <= A.length <= 30000
- 1 <= A[i] <= 30000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-of-subarray-minimums][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sum-of-subarray-minimums/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/sum-of-subarray-minimums
// Basic Ideas: monotone stack
//
// Evaluate every subarray ends with A[i]
// Get the min quickly.
// Notice: we don't care about big values
//
//   3 1 2 4
//       2
//   l[i]: how many consecutive previous days whose value is bigger than this one
// Complexity: Time O(n), Space O(n)
type MyNode struct {
    value int
    count int
}

func sumSubarrayMins(A []int) int {
    stack := []MyNode{}
    res := 0
    prev := 0
    mod := int(math.Pow(10, 9)) + 7
    for _, v := range A {
        count := 1
        // elements in stack keep getting bigger
        for len(stack)>0 && stack[len(stack)-1].value >= v {
            count += stack[len(stack)-1].count
            prev -= stack[len(stack)-1].count * stack[len(stack)-1].value
            stack = stack[0:len(stack)-1]
        }
        res = (res + v*count + prev) % mod
        stack = append(stack, MyNode{v, count})
        prev = (prev + v*count) % mod
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
