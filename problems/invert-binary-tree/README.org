* Leetcode: Invert Binary Tree                                   :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Invert Binary Tree
---------------------------------------------------------------------
#+BEGIN_EXAMPLE
Invert a binary tree.
     4
   /   \
  2     7
 / \   / \
1   3 6   9
#+END_EXAMPLE

to
#+BEGIN_EXAMPLE
     4
   /   \
  7     2
 / \   / \
9   6 3   1
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/invert-binary-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/invert-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/invert-binary-tree
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def invertTree(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        ## Idea: BFS
        ## Complexity:
        if root is None:
            return root
        queue = []
        queue.append(root)
        while len(queue) != 0:
            element = queue.pop()
            p = element.left
            element.left = element.right
            element.right = p
            if element.left:
                queue.append(element.left)
            if element.right:
                queue.append(element.right)
        return root

    def invertTree_v1(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if root is None:
            return None
        if (root.left is None) and (root.right is None):
            return root

        if (root.left is None) and root.right:
            root.left = self.invertTree(root.right)
            root.right = None
            return root

        if (root.right is None) and root.left:
            root.right = self.invertTree(root.left)
            root.left = None
            return root

        p = self.invertTree(root.left)
        q = self.invertTree(root.right)
        root.left = q
        root.right = p
        return root
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
