* Leetcode: Next Greater Element I                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     monotone
:END:
---------------------------------------------------------------------
Next Greater Element I
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/next-greater-element-i"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/daily-temperatures][LeetCode: Daily Temperatures]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-monotone][#monotone]]
---------------------------------------------------------------------
You are given two arrays (without duplicates) nums1 and nums2 where nums1's elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.
#+BEGIN_EXAMPLE
Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
    For number 1 in the first array, the next greater number for it in the second array is 3.
    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4].
Output: [3,-1]
Explanation:
    For number 2 in the first array, the next greater number for it in the second array is 3.
    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
#+END_EXAMPLE

Note:
1. All elements in nums1 and nums2 are unique.
- The length of both nums1 and nums2 would not exceed 1000.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/next-greater-element-i][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/next-greater-element-i/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC go
// https://code.dennyzhang.com/next-greater-element-i
// Basic Ideas: monotone stack without array of indices
//  1 3 4 2
//
// Complexity: Time O(n), Space O(n)
func nextGreaterElement(nums1 []int, nums2 []int) []int {
    stack := make([]int, len(nums2))
    m := map[int]int{}
    for i, v := range nums2 {
        for len(stack)>0 && nums2[stack[len(stack)-1]] < v {
            m[nums2[stack[len(stack)-1]]] = v
            stack = stack[0:len(stack)-1]
        }
        stack = append(stack, i)
    }

    for len(stack)>0 {
        m[nums2[stack[len(stack)-1]]] = -1
        stack = stack[0:len(stack)-1]
    }

    res := make([]int, len(nums1))
    for i, v := range nums1 {
        res[i] = m[v]
    }
    return res
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/next-greater-element-i
// Basic Ideas: monotone stack with array of indices
//  1 3 4 2
//
// Complexity: Time O(n), Space O(n)
func nextGreaterElement(nums1 []int, nums2 []int) []int {
    stack := make([]int, len(nums2))
    l := make([]int, len(nums2))
    for i, _ := range l {
        l[i] = -1
    }
    for i, v := range nums2 {
        for len(stack)>0 && nums2[stack[len(stack)-1]] < v {
            l[stack[len(stack)-1]] = i
            stack = stack[0:len(stack)-1]
        }
        stack = append(stack, i)
    }
    m := map[int]int{}
    for i, v := range l {
        if v == -1 {
            m[nums2[i]] = -1
        } else {
            m[nums2[i]] = nums2[v]
        }
    }
    res := make([]int, len(nums1))
    for i, v := range nums1 {
        res[i] = m[v]
    }
    return res
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/next-greater-element-i
## Basic Ideas: Descending stack
##
## Complexity: Time O(n), Space O(n)
class Solution(object):
    def nextGreaterElement(self, findNums, nums):
        """
        :type findNums: List[int]
        :type nums: List[int]
        :rtype: List[int]
        """
        length = len(nums)
        index_list = [-1]*length
        stack = []
        for i in xrange(length):
            # If nums[i] is bigger than the top of stack, 
            #  it's the next bigger number of the stack top
            while len(stack) != 0 and nums[i]>nums[stack[-1]]:
                k = stack.pop()
                index_list[k] = i
            stack.append(i)

        # get the result
        res = []
        m = {} # the length of nums2 won't exceed 1000
        for i in xrange(length):
            m[nums[i]] = i
        for num in findNums:
            index = m[num]
            next_big_index = index_list[index]
            if next_big_index != -1:
                res.append(nums[next_big_index])
            else:
                res.append(-1)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
