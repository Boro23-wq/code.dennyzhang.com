* Leetcode: Letter Combinations of a Phone Number                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, redo, codetemplate
:END:
---------------------------------------------------------------------
Letter Combinations of a Phone Number
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]], [[https://code.dennyzhang.com/tag/combination][Tag: #combination]]
---------------------------------------------------------------------
Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.
#+BEGIN_EXAMPLE
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
#+END_EXAMPLE
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-combinations-of-a-phone-number][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        ## Blog link: https://code.dennyzhang.com/letter-combinations-of-a-phone-number
## Basic Ideas:
        ## Complexity:
        ## Assumptions: For "0" and "1", map to empty string
        ## Sample Data:
        ch_dict = {"1":"", "2":"abc", "3":"def", 
                   "4":"ghi", "5":"jkl", "6":"mno",
                   "7":"pqrs", "8":"tuv", "9":"wxyz", "0":""}
        res = []
        for digit in digits:
            # print("digit:%s. res: %s" % (digit, res))
            ch_list = ch_dict[digit]
            if len(res) == 0:
                for ch in ch_list:
                    res.append(ch)
            else:
                item_list = []
                for ch in ch_list:
                    for item in res:   
                        item = "%s%s" % (item, ch)
                        item_list.append(item)
                res = item_list
        return res

# s = Solution()
# print s.letterCombinations("23")
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
