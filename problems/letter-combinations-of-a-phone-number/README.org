* Leetcode: Letter Combinations of a Phone Number                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, backtracking, combination
:END:
---------------------------------------------------------------------
Letter Combinations of a Phone Number
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-combinations-of-a-phone-number"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/brace-expansion][Leetcode: Brace Expansion]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-backtracking][#backtracking]], [[https://code.dennyzhang.com/review-combination][#combination]]
---------------------------------------------------------------------
Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

[[image-blog:Leetcode: Letter Combinations of a Phone Number][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/letter-combinations-of-a-phone-number/phone.png]]

#+BEGIN_EXAMPLE
Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
#+END_EXAMPLE

Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-combinations-of-a-phone-number][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/letter-combinations-of-a-phone-number
// Basic Ideas: backtracking
//
// Complexity: Time O(pow(3, N)*pow(4, M)), Space O(pow(3, N)*pow(4, M))
func dfs(combination string, digits string, pos int, m map[byte]string, res *[]string) {
    if pos == len(digits) {
        *res = append(*res, combination)
        return
    }
    for _, ch := range m[digits[pos]] {
        dfs(combination+string(ch), digits, pos+1, m, res)
    }
}

func letterCombinations(digits string) []string {
    res := []string{}
    if len(digits) == 0 { return res }
    m := map[byte]string{'2':"abc", '3':"def", '4':"ghi",
                         '5':"jkl", '6':"mno", '7':"pqrs",
                         '8':"tuv", '9':"wxyz"}
    dfs("", digits, 0, m, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
