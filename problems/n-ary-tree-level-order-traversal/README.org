* Leetcode: N-ary Tree Level Order Traversal                     :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     treetraversal, bfs
:END:
---------------------------------------------------------------------
N-ary Tree Level Order Traversal
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/review-treetraversal][Review: Tree Traversal Problems]]
- Tag: [[https://code.dennyzhang.com/tag/treetraversal][#treetraversal]], [[https://code.dennyzhang.com/tag/bfs][#bfs]]
---------------------------------------------------------------------
Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example, given a 3-ary tree:

[[image-blog:Leetcode: N-ary Tree Postorder Traversal][https://raw.githubusercontent.com/dennyzhang/challenges-leetcode-interesting/master/images/NaryTreeExample.png]]

We should return its level order traversal:

#+BEGIN_EXAMPLE
[
     [1],
     [3,2,4],
     [5,6]
]
#+END_EXAMPLE

Note:

1. The depth of the tree is at most 1000.
- The total number of nodes is at most 5000.

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/n-ary-tree-level-order-traversal][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/n-ary-tree-level-order-traversal/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/n-ary-tree-level-order-traversal
## Basic Ideas: BFS
## Complexity
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        if root is None: return []
        queue = collections.deque()
        queue.append(root)
        res = []
        while len(queue) != 0:
            l = []
            for i in xrange(len(queue)):
                node = queue.popleft()
                l.append(node.val)
                for child in node.children:
                    queue.append(child)
            res.append(l)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
