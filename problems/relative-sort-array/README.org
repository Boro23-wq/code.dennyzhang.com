* Leetcode: Relative Sort Array                                  :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     sortbyfunction
:END:
---------------------------------------------------------------------
Relative Sort Array
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/relative-sort-array"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/sortbyfunction][#sortbyfunction]]
---------------------------------------------------------------------
Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.  Elements that don't appear in arr2 should be placed at the end of arr1 in ascending order.

Example 1:
#+BEGIN_EXAMPLE
Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]
#+END_EXAMPLE
 
Constraints:

- arr1.length, arr2.length <= 1000
- 0 <= arr1[i], arr2[i] <= 1000
- Each arr2[i] is distinct.
- Each arr2[i] is in arr1.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/relative-sort-array][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/relative-sort-array/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/relative-sort-array
// Basic Ideas: sort by function
// Complexity: Time O(n*log(n)), Space O(1)
import "sort"
func relativeSortArray(arr1 []int, arr2 []int) []int {
    m := map[int]int{}
    for i, v := range arr2 { m[v] = i }
    sort.Slice(arr1, func(i, j int) bool {
        index1, ok1 := m[arr1[i]]
        index2, ok2 := m[arr1[j]]
        if ok1 && ok2 {
            return index1<index2
        } else {
            if ok1 {
                return true
            } else {
                if ok2 {
                    return false
                } else {
                    return arr1[i]<arr1[j]
                }
            }
        }
    })
    return arr1
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
