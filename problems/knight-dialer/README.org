* Leetcode: Knight Dialer                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, outofboundarypath, bfs
:END:
---------------------------------------------------------------------
Knight Dialer
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/knight-dialer"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/outofboundarypath][#outofboundarypath]]
---------------------------------------------------------------------
A chess knight can move as indicated in the chess diagram below:

[[image-blog:Leetcode: All Nodes Distance K in Binary Tree][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/knight.png]]

[[image-blog:Leetcode: All Nodes Distance K in Binary Tree][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/knight-keypad.png]]

This time, we place our chess knight on any numbered key of a phone pad (indicated above), and the knight makes N-1 hops.  Each hop must be from one key to another numbered key.

Each time it lands on a key (including the initial placement of the knight), it presses the number of that key, pressing N digits total.

How many distinct numbers can you dial in this manner?

Since the answer may be large, output the answer modulo 10^9 + 7.

Example 1:
#+BEGIN_EXAMPLE
Input: 1
Output: 10
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: 2
Output: 20
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: 3
Output: 46
#+END_EXAMPLE
 
Note:

- 1 <= N <= 5000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/knight-dialer][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/knight-dialer/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/knight-dialer
// Basic Ideas: dynamic programming
//
// next steps:
//   0:[4,6], 1:[6,8], 2:[7,9],3:[4,8], 4:[3,9,0],5:[],
// 6:[1,7,0],7:[2,6],8:[1,3],9:[2,4]]
// Complexity: Time O(N) Space O(1)
import "math"
func knightDialer(N int) int {
    mod := int(math.Pow(10, 9))+7
    jumps := [][]int{[]int{4, 6}, []int{6, 8}, []int{7, 9}, 
                     []int{4, 8}, []int{3,9,0}, []int{},
                     []int{1, 7, 0}, []int{2, 6},
                     []int{1, 3}, []int{2, 4}}
    res := 0
    l := make([]int, 10)
    for i, _ := range l{
        l[i] = 1
    }

    for N>1 {
        l2 := make([]int, 10)
        for i, _ := range l {
            // From i to jumps[i]
            for _, j := range jumps[i] {
                l2[j] = (l2[j]+l[i])%mod
            }
        }
        copy(l, l2)
        N--
    }
    for _, v := range l {
        res = (res+v)%mod
    }
    return res
}
#+END_SRC

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/knight-dialer
// Basic Ideas: dynamic programming
//
// [-2, 1], [-1, 2], [1, 2], [2, 1], 
// [-2, -1], [-1, -2], [1, -2], [2, -1]
// Complexity: Time O(N) Space O(1)
import "math"
func knightDialer(N int) int {
    mod := int(math.Pow(10, 9))+7
    l := make([][]int, 4)
    for i, _ := range l {
        l[i] = []int{1, 1, 1}
    }

    l[3][0], l[3][2] = 0, 0
    for N>1 {
        l2 := make([][]int, 4)
		for i, _ := range l2 {
			l2[i] = make([]int, 3)
		}
        for i, row := range l {
            for j, _ := range row {
                if i==3 && (j==0 || j==2) { continue }
                for _, offset := range [][]int{[]int{-2, 1}, []int{-1, 2}, 
                                               []int{1, 2}, []int{2, 1}, 
                                               []int{-2, -1}, []int{-1, -2}, 
                                               []int{1, -2}, []int{2, -1}} {
                    i2, j2 := i+offset[0], j+offset[1]
                    if i2>=0 && i2<4 && j2>=0 && j2<3 {
                        if i2==3 && (j2==0 || j2==2) { continue }
                        l2[i2][j2] = (l2[i2][j2]+l[i][j])%mod
                    }
                }
            }
        }
        l = l2
        N--
    }

    res := 0
    for _, row := range l {
        for _, v := range row {
            res = (v+res)%mod
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
