* Leetcode: Reach a Number                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math, greedy, redo
:END:
---------------------------------------------------------------------
Reach a Number
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/reach-a-number"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/reaching-points][Reaching Points]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/math][math]], [[https://code.dennyzhang.com/tag/greedy][greedy]]
---------------------------------------------------------------------
You are standing at position 0 on an infinite number line. There is a goal at position target.

On each move, you can either go left or right. During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.

Example 1:
#+BEGIN_EXAMPLE
Input: target = 3
Output: 2
Explanation:
On the first move we step from 0 to 1.
On the second step we step from 1 to 3.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: target = 2
Output: 3
Explanation:
On the first move we step from 0 to 1.
On the second move we step  from 1 to -1.
On the third move we step from -1 to 2.
#+END_EXAMPLE

Note:
- target will be a non-zero integer in the range [-10^9, 10^9].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/reach-a-number][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/reach-a-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: math

#+BEGIN_SRC go
// https://code.dennyzhang.com/reach-a-number
// Basic Ideas: greedy
//
// Notice: BFS algorithm would be too slow
//
// Greedy: If keep moving to the right, it will grow the fast
//   When the difference is even, we only need to switch one previous value
//   When the difference is odd, add one or two elements to make it event.
//        Then switch one previous value
//
// Complexity: Time O(sqrt(n)), Space O(1)
func reachNumber(target int) int {
    if target < 0 {
        target = -target
    }
    i := 0
    sum := 0
    for sum < target {
        i++
        sum += i
    }
    for (sum-target) %2 != 0 {
        i++
        sum += i
    }
    return i
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
