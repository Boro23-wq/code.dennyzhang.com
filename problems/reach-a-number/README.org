* Leetcode: Reach a Number                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math
:END:
---------------------------------------------------------------------
Reach a Number
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/reaching-points][Reaching Points]]
- [[https://code.dennyzhang.com/review-math][Review: Math Problems]]
- Tag: [[https://code.dennyzhang.com/tag/math][math]]
---------------------------------------------------------------------
You are standing at position 0 on an infinite number line. There is a goal at position target.

On each move, you can either go left or right. During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.

Example 1:
#+BEGIN_EXAMPLE
Input: target = 3
Output: 2
Explanation:
On the first move we step from 0 to 1.
On the second step we step from 1 to 3.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: target = 2
Output: 3
Explanation:
On the first move we step from 0 to 1.
On the second move we step  from 1 to -1.
On the third move we step from -1 to 2.
#+END_EXAMPLE

Note:
- target will be a non-zero integer in the range [-10^9, 10^9].

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/reach-a-number][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/reach-a-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/reach-a-number
## Basic Ideas: BFS
##      1 - 2 + 3 - 4 + 5 - 6 ... : get -n
##      -1 + 2 - 3 + 4 - 5 + 6 ... : get n
##
##      So the minimum step will be no more than 2n.
##      If abs(value) is bigger than 2*n, we don't need to examine it.
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def reachNumber(self, target):
        """
        :type target: int
        :rtype: int
        """
        if target == 0: return 0
        import collections
        queue = collections.deque()
        step = 0
        queue.append(0)
        while len(queue) != 0 and step<=abs(2*target):
            step += 1
            for k in range(len(queue)):
                value = queue.popleft()
                value2 = value+step
                if value2 == target: return step
                queue.append(value2)

                value2 = value-step
                if value2 == target: return step
                queue.append(value2)
#+END_SRC
