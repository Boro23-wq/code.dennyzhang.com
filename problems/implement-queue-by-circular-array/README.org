* LintCode: Implement Queue by Circular Array                    :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     oodesign, circulararray
:END:
---------------------------------------------------------------------
Implement Queue by Circular Array
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/implement-queue-by-circular-array"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/max-stack][Max Stack]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-oodesign][#oodesign]], [[https://code.dennyzhang.com/tag/circulararray][#circulararray]]
---------------------------------------------------------------------
Implement queue by circulant array. You need to support the following methods:
1. CircularQueue(n): initialize a circular array with size n to store elements
2. boolean isFull(): return true if the array is full
3. boolean isEmpty(): return true if there is no element in the array 
4. void enqueue(element): add an element to the queue
5. int dequeue(): pop an element from the queue

 Notice
it's guaranteed in the test cases we won't call enqueue if it's full and we also won't call dequeue if it's empty. So it's ok to raise exception in scenarios described above.

Example
#+BEGIN_EXAMPLE
CircularQueue(5)
isFull()   => false
isEmpty() => true
enqueue(1)
dequeue()  => 1
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/implement-queue-by-circular-array][code.dennyzhang.com]]

Credits To: [[http://www.lintcode.com/en/problem/implement-queue-by-circular-array/][lintcode]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/implement-queue-by-circular-array
## Basic Ideas:
##  We use (n+1) cells instead of n cells.
##  Thus we can differentiate empty case and full case
##  self.tail always point to next available cell
class CircularQueue:
    def __init__(self, n):
        # do intialization if necessary
        self.array = [None]*(n+1)
        self.head, self.tail, self.n = 0, 0, n+1
    """
    @return:  return true if the array is full
    """
    def isFull(self):
        return (self.tail + 1) % self.n == self.head

    """
    @return: return true if there is no element in the array
    """
    def isEmpty(self):
        return self.tail == self.head

    """
    @param element: the element given to be added
    @return: nothing
    """
    def enqueue(self, element):
        self.array[self.tail] = element
        self.tail = (self.tail+1) % self.n

    """
    @return: pop an element from the queue
    """
    def dequeue(self):
        res = self.array[self.head]
        self.head = (self.head+1) % self.n
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
