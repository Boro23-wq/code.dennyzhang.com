* Leetcode: Coin Change                                          :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     knapsack, classic, bfs, coin
:END:
---------------------------------------------------------------------
Coin Change
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/coin-change"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/perfect-squares][Perfect Squares]]
- [[https://code.dennyzhang.com/coin-change-2][Coin Change 2]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-knapsack][#knapsack]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/tag/coin][#coin]]
---------------------------------------------------------------------
You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:
#+BEGIN_EXAMPLE
coins = [1, 2, 5], amount = 11
return 3 (11 = 5 + 5 + 1)
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
coins = [2], amount = 3
return -1.
#+END_EXAMPLE

Note:
You may assume that you have an infinite number of each kind of coin.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/coin-change][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/coin-change/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/coin-change
class Solution(object):
    ## Basic Ideas: Dynamic Programming
    ##
    ##    dp(i) = min(dp(i), dp[i-coin[j]]+1)
    ## Complexity: Time O(n) Space O(n)
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount == 0: return 0
        import sys
        coins.sort()
        dp = [0] + [sys.maxsize]*(amount)

        for i in range(1, amount+1):
            for coin in coins:
                if coin > i: break
                if dp[i-coin] != sys.maxsize:
                    dp[i] = min(dp[i], dp[i-coin]+1)

        return dp[amount] if dp[amount] != sys.maxsize else -1 

    ## Basic Ideas: BFS
    ##
    ## Complexity: Time O(n) Space O(n)
    def coinChange_v1(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount == 0: return 0
        coins.sort()
        d = {}
        queue = collections.deque()
        queue.append(0)
        level = 0
        while len(queue) != 0:
            level += 1
            for k in range(len(queue)):
                num = queue.popleft()
                for coin in coins:
                    v = coin + num
                    if v > amount: break
                    if v == amount: return level
                    # avoid duplicate
                    if v not in d:
                        d[v] = level
                        queue.append(v)
        return -1
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
