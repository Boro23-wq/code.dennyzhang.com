* Leetcode: Perfect Squares                                      :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     sqrt
:END:
---------------------------------------------------------------------
Perfect Squares
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/perfect-squares"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/sqrt][sqrt]]
---------------------------------------------------------------------
Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/perfect-squares][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/perfect-squares/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/perfect-squares
## Basic Ideas: BFS. Find the mininum steps
##              Get a list of square numbers as the candidate to explore
##
## Complexity: Time O(n*n), Space O(n)
class Solution:
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        square_list = []
        i = 1
        while i*i <= n:
            if i*i == n: return 1
            square_list.append(i*i)
            i += 1

        level = 0
        queue = set([n])

        while len(queue) != 0:
            level += 1
            # use set, since we will have duplicate numbers to check
            s = set([])
            for num in queue:
                for square in square_list:
                    new_val = num - square
                    if new_val == 0: return level
                    # The follow values won't fix
                    if new_val < 0: break
                    # next candidate
                    s.add(new_val)
            queue = s

        # we shouldn't go to this line
        return None

# s = Solution()
# print(s.numSquares(12)) # 3
# print(s.numSquares(7168)) # 4
# print(s.numSquares(1103))
# print(s.numSquares(5756))
# print(s.numSquares(6255))
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
