* Leetcode: Time Based Key-Value Store                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, binarysearch
:END:
---------------------------------------------------------------------
Time Based Key-Value Store
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/time-based-key-value-store"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/binarysearch][#binarysearch]]
---------------------------------------------------------------------
Create a timebased key-value store class TimeMap, that supports two operations.

1. set(string key, string value, int timestamp)
- Stores the key and value, along with the given timestamp.

2. get(string key, int timestamp)

- Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev <= timestamp.
- If there are multiple such values, it returns the one with the largest timestamp_prev.
- If there are no values, it returns the empty string ("").

Example 1:
#+BEGIN_EXAMPLE
Input: inputs = ["TimeMap","set","get","get","set","get","get"], inputs = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
Output: [null,null,"bar","bar",null,"bar2","bar2"]
Explanation:   
TimeMap kv;   
kv.set("foo", "bar", 1); // store the key "foo" and value "bar" along with timestamp = 1   
kv.get("foo", 1);  // output "bar"   
kv.get("foo", 3); // output "bar" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie "bar"   
kv.set("foo", "bar2", 4);   
kv.get("foo", 4); // output "bar2"   
kv.get("foo", 5); //output "bar2"   
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs = [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
Output: [null,null,null,"","high","high","low","low"]
#+END_EXAMPLE
 
Note:

1. All key/value strings are lowercase.
- All key/value strings have length in the range [1, 100]
- The timestamps for all TimeMap.set operations are strictly increasing.
- 1 <= timestamp <= 10^7
- TimeMap.set and TimeMap.get functions will be called a total of 120000 times (combined) per test case.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/time-based-key-value-store][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/time-based-key-value-store/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/time-based-key-value-store
// Basic Ideas: Binary search
//
// Complexity: Time O(log(n)), Space O(n)
type MyNode struct {
    value string
    timestamp int
}

type TimeMap struct {
    m map[string][]MyNode
}

/** Initialize your data structure here. */
func Constructor() TimeMap {
    return TimeMap{make(map[string][]MyNode)}
}


func (this *TimeMap) Set(key string, value string, timestamp int)  {
    // timestamps are strictly increasing
    this.m[key] = append(this.m[key], MyNode{value, timestamp})
}


func (this *TimeMap) Get(key string, timestamp int) string {
    // assume key is valid
    l, _ := this.m[key]
    // corner case
    if l[0].timestamp > timestamp {
        return ""
    }
    // set high to len(l), instead of len(l)-1
    low, high := 0, len(l)
    // binary search
    for low < high {
        mid := (high-low)/2 + low
        if l[mid].timestamp == timestamp {
            return l[mid].value
        }
        if l[mid].timestamp < timestamp {
            low = mid+1
        } else {
            high = mid
        }
    }
    return l[low-1].value
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Set(key,value,timestamp);
 * param_2 := obj.Get(key,timestamp);
 */
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
