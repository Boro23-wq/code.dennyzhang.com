* Leetcode: Positions of Large Groups                            :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, padplaceholder, classic
:END:
---------------------------------------------------------------------
Positions of Large Groups
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/positions-of-large-groups"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-string][#string]], [[https://code.dennyzhang.com/tag/padplaceholder][#padplaceholder]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
In a string S of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like S = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z" and "yy".

Call a group large if it has 3 or more characters.  We would like the starting and ending positions of every large group.

The final answer should be in lexicographic order.
 
Example 1:
#+BEGIN_EXAMPLE
Input: "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the single large group with starting  3 and ending positions 6.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "abc"
Output: []
Explanation: We have "a","b" and "c" but no large group.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]
#+END_EXAMPLE

Note:  1 <= S.length <= 1000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/positions-of-large-groups][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/positions-of-large-groups/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

- Solution: Special treatment for last group
#+BEGIN_SRC go
// https://code.dennyzhang.com/positions-of-large-groups
// Basic Ideas: two pointers
//   groups: [start, end]
// Complexity: Time O(n), Space O(n)
func largeGroupPositions(S string) [][]int {
    res := [][]int{}
    start := 0
    for end := 0; end<len(S); end++ {
        // find a new group
        if S[end] != S[start] {
            if end-start>=3 {
                res = append(res, []int{start, end-1})
            }
            start = end
        }
        // last group
        if S[end] == S[start] && end == len(S)-1 {
            if end-start>=2 {
                res = append(res, []int{start, end})
            }
        }
    }
    return res
}
#+END_SRC

- Solution: padding for last group
#+BEGIN_SRC go
// https://code.dennyzhang.com/positions-of-large-groups
// Basic Ideas: two pointers
//   groups: [start, end]
// Complexity: Time O(n), Space O(n)
func largeGroupPositions(S string) [][]int {
    res := [][]int{}
    start := 0
    // Note: ";" won't happen in S. 
    for end, ch := range S+";" {
        if ch != rune(S[start]) {
            if end-start >=3 {
                res = append(res, []int{start, end-1})
            }
            start = end
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
