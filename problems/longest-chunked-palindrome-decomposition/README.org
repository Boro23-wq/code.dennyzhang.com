* Leetcode: Longest Chunked Palindrome Decomposition            :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     palindrome, twopointer, rollinghash
:END:
---------------------------------------------------------------------
Longest Chunked Palindrome Decomposition
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-chunked-palindrome-decomposition"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-palindrome][#palindrome]], [[https://code.dennyzhang.com/review-twopointer][#twopointer]], [[https://code.dennyzhang.com/followup-rollinghash][#rollinghash]]
---------------------------------------------------------------------
Return the largest possible k such that there exists a_1, a_2, ..., a_k such that:

- Each a_i is a non-empty string;
- Their concatenation a_1 + a_2 + ... + a_k is equal to text;
- For all 1 <= i <= k,  a_i = a_{k+1 - i}.
 
Example 1:
#+BEGIN_EXAMPLE
Input: text = "ghiabcdefhelloadamhelloabcdefghi"
Output: 7
Explanation: We can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: text = "merchant"
Output: 1
Explanation: We can split the string on "(merchant)".
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: text = "antaprezatepzapreanta"
Output: 11
Explanation: We can split the string on "(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)".
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: text = "aaa"
Output: 3
Explanation: We can split the string on "(a)(a)(a)".
#+END_EXAMPLE
 
Constraints:

- text consists only of lowercase English characters.
- 1 <= text.length <= 1000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-chunked-palindrome-decomposition][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/longest-chunked-palindrome-decomposition/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Rabin Karp Algorithm - rollinghash

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-chunked-palindrome-decomposition
// Basic Ideas: Rabin Karp Algorithm - rollinghash
//
// Complexity: Time O(n*n), Space O(1)
import "math"
func longestDecomposition(text string) int {
    mod := int(math.Pow(10, 9)+5)
    res := 0
    pow := 1
    left, right := 0, 0
    // two direction moves in the same speed
    for i:=0; i<len(text); i++ {
        j := len(text)-1-i
        left = (left*26 + int(text[i]-'a')) % mod
        right = (int(text[j]-'a')*pow + right) % mod
        pow = (pow*26)%mod
        // after i, j meets, we count it one more time
        if left == right {
            res += 1
            left, right = 0, 0
            pow = 1
        }
    }
    return res
}
#+END_SRC

- Solution: twopointer + move to the ends

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-chunked-palindrome-decomposition
// Basic Ideas: twopointer
//
// Complexity: Time O(n*n), Space O(1)
func longestDecomposition(text string) int {
    res := 0
    left, right := "", ""
    // two direction moves in the same speed
    for i:=0; i<len(text); i++ {
        j := len(text)-1-i
        left = left + string(text[i])
        right = string(text[j]) + right
        // after i, j meets, we count it one more time
        if left == right {
            res += 1
            left, right = "", ""
        }
    }
    return res
}
#+END_SRC

- Solution: twopointer + move to half

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-chunked-palindrome-decomposition
// Basic Ideas: twopointer
//
// Complexity: Time O(n*n), Space O(1)
func longestDecomposition(text string) int {
    res := 0
    left, right := "", ""
    // check the half
    for i:=0; i<len(text)/2; i++ {
        j := len(text)-1-i
        left = left + string(text[i])
        right = string(text[j]) + right
        if left == right {
            res += 2
            left, right = "", ""
        }
    }
    
    if len(text)%2 == 1 && left == "" {
        // middle element
        res++
    } else {
        // not matched
        if left != "" {
         res++
       } 
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
