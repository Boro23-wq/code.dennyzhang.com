* Leetcode: Exclusive Time of Functions                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     stack
:END:
---------------------------------------------------------------------
Exclusive Time of Functions
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/exclusive-time-of-functions"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-stack][#stack]]
---------------------------------------------------------------------
Given the running logs of n functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions.

Each function has a unique id, start from 0 to n-1. A function may be called recursively or by another function.

A log is a string has this format : function_id:start_or_end:timestamp. For example, "0:start:0" means function 0 starts from the very beginning of time 0. "0:end:0" means function 0 ends to the very end of time 0.

Exclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function's exclusive time. You should return the exclusive time of each function sorted by their function id.
[[image-blog:Leetcode: Exclusive Time of Functions][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/exclusive-time-of-functions/function.png]]
#+BEGIN_EXAMPLE
Example 1:
Input:
n = 2
logs = 
["0:start:0",
 "1:start:2",
 "1:end:5",
 "0:end:6"]
Output:[3, 4]
Explanation:
Function 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. 
Now function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.
Function 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. 
So function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.
#+END_EXAMPLE

Note:
1. Input logs will be sorted by timestamp, NOT log id.
- Your output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.
- Two functions won't start or end at the same time.
- Functions could be called recursively, and will always end.
- 1 <= n <= 100

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/exclusive-time-of-functions][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/exclusive-time-of-functions/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: assume logs are in order
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/exclusive-time-of-functions
// Basic Ideas: stack + hashmap
//
// Maintain a stack for running tasks.
// For "end" log entry, pop the task. And resume the timer
//
// Complexity: Time O(n), Space O(n)
import ("strings"
        "strconv")
func exclusiveTime(n int, logs []string) []int {
    res := make([]int, n)
    timer := -1
    // loop log entries
    stack := []int{}
    for _, log := range logs {
        l := strings.Split(log, ":")
        fid, _ := strconv.Atoi(l[0])
        action := l[1]
        time, _ := strconv.Atoi(l[2])
        if action == "start" {
            // caculate previous funcion
            if len(stack) > 0 {
                res[stack[len(stack)-1]] += time-timer
            }
            stack = append(stack, fid)
            timer = time
        } else {
            // stop current function
            stack = stack[0:len(stack)-1]
            // current second counts to current function. So add 1
            res[fid] += time-timer+1
            // The next function can only starts next second
            timer = time + 1
        }
    }
    return res
}
#+END_SRC

- Solution: assume logs are not in order
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/exclusive-time-of-functions
// Basic Ideas: stack + hashmap
//
// Sort the logs by starting timestamp. 
//   If same timestamp and same function, "starts" comes before "end"
//   If same timestamp and different functions, "end" comes before "start"
//
// Maintain a stack for running tasks.
// For "end" log entry, pop the task. And resume the timer
//
// Complexity: Time O(n*log(n)), Space O(n)
import ("sort"
        "strings"
        "strconv")
func exclusiveTime(n int, logs []string) []int {
    sort.Slice(logs, func(i, j int) bool {
        l1 := strings.Split(logs[i], ":")
        l2 := strings.Split(logs[j], ":")
        t1, _ := strconv.Atoi(l1[2])
        t2, _ := strconv.Atoi(l2[2])
        if t1 != t2 {
            return t1 < t2
        } else {
            if l1[0] == l2[0] {
                // same function: start, then end
                return l1[1] > l2[1]
            } else {
                // different functions: end, then start
                return l1[1] < l2[1]
            }
        }
    })
    res := make([]int, n)
    timer := -1
    // loop log entries
    stack := []int{}
    for _, log := range logs {
        l := strings.Split(log, ":")
        fid, _ := strconv.Atoi(l[0])
        action := l[1]
        time, _ := strconv.Atoi(l[2])
        if action == "start" {
            // caculate previous funcion
            if len(stack) > 0 {
                res[stack[len(stack)-1]] += time-timer
            }
            stack = append(stack, fid)
            timer = time
        } else {
            // stop current function
            stack = stack[0:len(stack)-1]
            // current second counts to current function. So add 1
            res[fid] += time-timer+1
            // The next function can only starts next second
            timer = time + 1
        }
    }
    return res
}
#+END_SRC
---------------------------------------------------------------------

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
