* Leetcode: Contains Duplicate III                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     findduplicates, manydetails
:END:
---------------------------------------------------------------------
Contains Duplicate III
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/contains-duplicate-iii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-manydetails][#manydetails]], [[https://code.dennyzhang.com/followup-findduplicates][#findduplicates]]
---------------------------------------------------------------------
Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/contains-duplicate-iii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/contains-duplicate-iii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/contains-duplicate-iii
## Basic Ideas: sliding window
##              Maintain a window with k+1 elements. A set for unsorted unique collection
## Complexity: Time O(n), Space O(k)
class Solution(object):
    def containsNearbyAlmostDuplicate(self, nums, k, t):
        """
        :type nums: List[int]
        :type k: int
        :type t: int
        :rtype: bool
        """
        length = len(nums)
        if length <= 0: return False
        if k == 0: return False
        s = set([])
        for i in xrange(length):
            if i > k:
                s.remove(nums[i-k-1])
            for v in s:
                if abs(nums[i]-v) <= t:
                    return True
            s.add(nums[i])
        return False

# s = Solution()
# print s.containsNearbyAlmostDuplicate([-1, -1], 1, 0) # True
# print s.containsNearbyAlmostDuplicate([-1, -1], 1, 1) # True
# print s.containsNearbyAlmostDuplicate([99, 99], 1, 1) # True
# print s.containsNearbyAlmostDuplicate([1, 2, 1], 0, 1) # False
# print s.containsNearbyAlmostDuplicate([0, 2147483647], 1, 2147483647) # True
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
