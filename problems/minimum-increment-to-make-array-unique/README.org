* Leetcode: Minimum Increment to Make Array Unique              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     greedy, hashmap, 
:END:
---------------------------------------------------------------------
Minimum Increment to Make Array Unique
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-increment-to-make-array-unique"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/review-hashmap][#hashmap]], [[https://code.dennyzhang.com/tag/limitedrange][#limitedrange]]
---------------------------------------------------------------------
Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.

Return the least number of moves to make every value in A unique.

Example 1:
#+BEGIN_EXAMPLE
Input: [1,2,2]
Output: 1
Explanation:  After 1 move, the array could be [1, 2, 3].
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [3,2,1,2,1,7]
Output: 6
Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.
#+END_EXAMPLE
 
Note:

1. 0 <= A.length <= 40000
- 0 <= A[i] < 40000
 
Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-increment-to-make-array-unique][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-increment-to-make-array-unique/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Maintain a seed for each element

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-increment-to-make-array-unique
// Basic Ideas: hashmap + greedy
//
// Once sorted, the final result of each item can be determined.
//
// Complexity: Time O(n*log(n)), Space O(n)
func minIncrementForUnique(A []int) int {
    if len(A) == 0 {
        return 0
    }
    sort.Ints(A)
    res, need := 0, A[0]
    for i, _ := range A {
        // need to reset the seed
        if A[i] >= need {
            need = A[i]+1
        } else {
            // reuse the seed
            res += need-A[i]
            need++
        }
    }
    return res
}
#+END_SRC

- Solution: Keep rolling over the debts

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-increment-to-make-array-unique
// Basic Ideas: hashmap + greedy
//
// Increase items one by one
//
// Complexity: Time O(n), Space O(n)
func minIncrementForUnique(A []int) int {
    m := map[int]int{}
    for _, v := range A {
        m[v]++
    }
    res := 0
    max := 40000
    for v:=0; v<max; v++ {
        if m[v] <= 1 {
            continue
        }
        moves := m[v]-1
        res += moves
        m[v+1] += moves
    }
    // If it hits the biggest
    if m[max] > 1 {
        v := m[max]-1
        res += (v*(v+1))/2
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
