* Leetcode: Reconstruct Itinerary                                :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dfs
:END:
---------------------------------------------------------------------
Reconstruct Itinerary
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/reconstruct-itinerary"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/dfs][#dfs]]
---------------------------------------------------------------------
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

1. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
- All airports are represented by three capital letters (IATA code).
- You may assume all tickets form at least one valid itinerary.

Example 1:
#+BEGIN_EXAMPLE
Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/reconstruct-itinerary][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/reconstruct-itinerary/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/reconstruct-itinerary
// Basic Ideas: dfs
//  Notice:
//    To avoid loop, edge can't be used twice
//    There might be duplicate tickets
//
// Complexity: Time ? Space ?
import "sort"
func dfs(node string, m map[string][]string, visited map[string][]bool, res *[]string, count int) bool {
    if len(*res) == count { return true }
    for i, node2 := range m[node] {
        if !visited[node][i] {
            visited[node][i] = true
            *res = append(*res, node2)
            if dfs(node2, m, visited, res, count) {
                return true
            }
            *res = (*res)[0:len(*res)-1]
            visited[node][i] = false
        }
    }
    return false
}

func findItinerary(tickets [][]string) []string {
    m := map[string][]string{}
    visited := map[string][]bool{}
    for _, ticket := range tickets{
        from, to := ticket[0], ticket[1]
        m[from] = append(m[from], to)
    }
    for key, _ := range m {
        sort.Slice(m[key], func(i, j int) bool {
            return m[key][i]<m[key][j]
        })
        visited[key] = make([]bool, len(m[key]))
    }
    res := []string{"JFK"}
    dfs("JFK", m, visited, &res, len(tickets)+1)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
