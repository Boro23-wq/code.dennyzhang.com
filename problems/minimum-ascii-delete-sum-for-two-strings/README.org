* Leetcode: Minimum ASCII Delete Sum for Two Strings             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, editdistance
:END:
---------------------------------------------------------------------
Minimum ASCII Delete Sum for Two Strings
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-ascii-delete-sum-for-two-strings"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-editdistance][Series: Edit Distance Of Two Strings & Follow-up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/editdistance][#editdistance]]
---------------------------------------------------------------------
Given two strings s1, s2, find the lowest ASCII sum of deleted characters to make two strings equal.

Example 1:
#+BEGIN_EXAMPLE
Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: s1 = "delete", s2 = "leet"
Output: 403
Explanation: Deleting "dee" from "delete" to turn the string into "let",
adds 100[d]+101[e]+101[e] to the sum.  Deleting "e" from "leet" adds 101[e] to the sum.
At the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.
If instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.
#+END_EXAMPLE

Note:

1. 0 < s1.length, s2.length <= 1000.
- All elements of each string will have an ASCII value in [97, 122].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-ascii-delete-sum-for-two-strings][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-ascii-delete-sum-for-two-strings
// Basic Ideas: dynamic programming + edit distance
//   optimal substructure:   s1[i...], s2[j...]
//        if s1[i] == s2[j], f(s1[i+1...], s2[j+1...])
//        if s1[i] != s2[j], min(ascii(s1[i]) + f(s1[i+1...], s2[j...]),
//                               ascii(s2[j]) + f(s1[i...], s2[j+1...]),
//   termination condition:
//      f("", s2[j...]), f(s1[i...], "")
// Complexity: Time O(n*m), Space O(n*m)
func minimumDeleteSum(s1 string, s2 string) int {
    dp := make([][]int, len(s1)+1)
    for i, _ := range dp {
        dp[i] = make([]int, len(s2)+1)
    }
    // f(s1[i...], "")
    for i:=len(s1)-1; i>=0; i-- {
        dp[i][len(s2)] = dp[i+1][len(s2)] + int(s1[i])
    }
    // f("", s2[j...])
    for j:=len(s2)-1; j>=0; j-- {
        dp[len(s1)][j] = dp[len(s1)][j+1] + int(s2[j])
    }
    // Compare s1[i...] s2[j...], while s1 moves to left
    // Inside loop, j moves from right to left
    for i:= len(s1)-1; i>=0; i-- {
        for j:= len(s2)-1; j>=0; j-- {
            if s1[i] == s2[j] {
                dp[i][j] = dp[i+1][j+1]
            } else {
                // s1[i+1...], s2[j...]
                v1 := int(s1[i]) + dp[i+1][j]
                // s1[i...], s2[j+1...]
                v2 := int(s2[j]) + dp[i][j+1]
                dp[i][j] = v1
                if dp[i][j] > v2 {
                    dp[i][j] = v2
                }
            }
        }
    }
    return dp[0][0]
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-ascii-delete-sum-for-two-strings
// Basic Ideas: dynamic programming + edit distance
//   optimal substructure:   s1[0...i], s2[0...j]
//        if s1[i] == s2[j], f(s1[0...i-1], s2[0...j-1])
//        if s1[i] != s2[j], min(ascii(s1[i]) + f(s1[0...i-1], s2[0...j]),
//                               ascii(s2[j]) + f(s1[0...i], s2[0...j-1]),
//   termination condition: 
//     f(s1[0...i], ""), f("", s2[0...j])
// Complexity: Time O(n*m), Space O(n*m)
func minimumDeleteSum(s1 string, s2 string) int {
    dp := make([][]int, len(s1)+1)
    for i, _ := range dp {
        dp[i] = make([]int, len(s2)+1)
    }
    // Compare "" with s1[0...i]
    for i:=1; i<len(s1)+1; i++ {
        dp[i][0] += dp[i-1][0] + int(s1[i-1])
    }
    // Compare "" with s2[0...j]
    for j:=1; j<len(s2)+1; j++ {
        dp[0][j] += dp[0][j-1] + int(s2[j-1])
    }
    for i:=1; i<len(s1)+1; i++ {
        for j:=1; j<len(s2)+1; j++ {
            // Compare s1[0...i] with S2[0...j]
            if s1[i-1] == s2[j-1] {
                dp[i][j] = dp[i-1][j-1]
            } else {
                // s1[0...i-1], s2[0...j]
                v1 := int(s1[i-1]) + dp[i-1][j]
                // s1[0...i], s2 [0...j-1]
                v2 := int(s2[j-1]) + dp[i][j-1]
                dp[i][j] = v1
                if dp[i][j]>v2 {
                    dp[i][j] = v2
                }
            }
        }
    }
    return dp[len(s1)][len(s2)]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
