* Leetcode: Count Univalue Subtrees                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     postorder
:END:
---------------------------------------------------------------------
Count Univalue Subtrees
---------------------------------------------------------------------
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/treetraversal][#treetraversal]]
---------------------------------------------------------------------
Given a binary tree, count the number of uni-value subtrees.

A Uni-value subtree means all nodes of the subtree have the same value.

Example :
#+BEGIN_EXAMPLE
Input:  root = [5,1,5,5,5,null,5]

              5
             / \
            1   5
           / \   \
          5   5   5

Output: 4
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/count-univalue-subtrees][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/count-univalue-subtrees/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: post-order with null and leaf as corner cases

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/count-univalue-subtrees
// Basic Ideas: post-order
// Complexity: Time O(n), Space O(1)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
var count int
func postOrder(root *TreeNode) bool {
    if root == nil { return false }
    if root.Left == nil && root.Right == nil { 
        count++
        return true
    }
    s1, s2 := true, true
    if (root.Left != nil) { 
        s1 = postOrder(root.Left)
        if root.Left.Val != root.Val { s1 = false }
    }
    if (root.Right != nil) { 
        s2 = postOrder(root.Right) 
        if root.Right.Val != root.Val { s2 = false }
    }
    if s1 == true && s2 == true {
        count ++
        return true
    } else {
        return false
    }
}

func countUnivalSubtrees(root *TreeNode) int {
    count = 0
    postOrder(root)
    return count
}
#+END_SRC

---------------------------------------------------------------------
- Solution: post-order with only null as corner cases

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/count-univalue-subtrees
// Basic Ideas: post-order
// Complexity: Time O(n), Space O(1)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
var count int
func postOrder(root *TreeNode) bool {
    if root == nil { return true }
    s1, s2 := postOrder(root.Left), postOrder(root.Right)
    if s1 == true && s2 == true {
        if (root.Left != nil && root.Left.Val != root.Val) { return false }
        if (root.Right != nil && root.Right.Val != root.Val) { return false }
        count++
        return true
    }
    return false
}

func countUnivalSubtrees(root *TreeNode) int {
    count = 0
    postOrder(root)
    return count
}
#+END_SRC
