* Leetcode: Sequence Reconstruction                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     topologicalsort, bfs, manydetails
:END:
---------------------------------------------------------------------
Sequence Reconstruction
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sequence-reconstruction"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-topologicalsort][#topologicalsort]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/tag/manydetails][#manydetails]]
---------------------------------------------------------------------
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 <= n <= 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

Example 1:
#+BEGIN_EXAMPLE
Input:
org: [1,2,3], seqs: [[1,2],[1,3]]

Output:
false

Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input:
org: [1,2,3], seqs: [[1,2]]

Output:
false

Explanation:
The reconstructed sequence can only be [1,2].
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input:
org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

Output:
true

Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input:
org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

Output:
true
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sequence-reconstruction][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sequence-reconstruction/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/sequence-reconstruction
// Basic Ideas: topological sort + bfs
//
//  Every time, there should be only one node with 0 incoming edges
//  There should be no circle. All nodes should be reachable
//
//  Notice: there would be duplicate edges
//  Notice: The default value of 0 for indegrees list might be misleading
//
// Complexity: Time O(n+e), Space O(n+e)
func sequenceReconstruction(org []int, seqs [][]int) bool {
    if len(org) == 0 {
        return len(seqs) == 0
    }
    indegrees := make([]int, len(org))
    for i, _ := range indegrees {
        indegrees[i] = -1
    }
    edges := map[int]map[int]bool{}
    // build edges
    for _, seq := range seqs {
        prev := -1
        for i:=0; i<len(seq); i++ {
            cur := seq[i]-1
            if cur >= len(org) || cur < 0 {
                return false
            }
            // mark the node as seen
            if indegrees[cur] == -1 {
                indegrees[cur] = 0
            }
            if prev != -1 {
                // mark the edge 
                if _, ok := edges[prev]; !ok {
                    edges[prev] = map[int]bool{}
                }
                if _, ok := edges[prev][cur]; !ok {
                    edges[prev][cur] = true
                    indegrees[cur]++
                }
            }
            prev = cur
        }
    }
    queue := []int{}
    for i, v := range indegrees {
        if v == 0 {
            queue = append(queue, i)
        }
    }
    index := 0
    for len(queue) == 1 {
        // examine the result when we pop
        node1 := queue[0]
        if org[index] != node1+1 {
            return false
        }
        index++
        indegrees[node1] = -1
        // get the nexts
        l := []int{}
        for node2, _ := range edges[node1] {
            indegrees[node2]--
            if indegrees[node2] == 0 {
                l = append(l, node2)            
            }
        }
        queue = l
    }
    return index == len(org)
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
