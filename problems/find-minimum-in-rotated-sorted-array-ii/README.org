* Leetcode: Find Minimum in Rotated Sorted Array II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     inspiring, binarysearch, rotatelist
:END:
---------------------------------------------------------------------
Find Minimum in Rotated Sorted Array II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-minimum-in-rotated-sorted-array-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/find-minimum-in-rotated-sorted-array][LeetCode: Find Minimum in Rotated Sorted Array]]
- [[https://code.dennyzhang.com/search-in-rotated-sorted-array][LeetCode: Search in Rotated Sorted Array]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/tag/rotatelist][#rotatelist]]
---------------------------------------------------------------------
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-minimum-in-rotated-sorted-array-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## https://code.dennyzhang.com/find-minimum-in-rotated-sorted-array-ii
// Basic Ideas: binary search
//  If nums[mid] > nums[right], it's in the right half, (excluding mid)
//  If nums[mid] < nums[right], it's in the left half
//  If nums[mid] = nums[right], drop nums[right]
// Complexity: Time O(log(n)), Space O(1)
func findMin(nums []int) int {
    left, right := 0, len(nums)-1
    // must exists
    for left<right {
        mid := (right-left)/2+left
        if nums[mid] > nums[right] {
            left = mid+1
        } else {
            if nums[mid] < nums[right] {
                // drop the left half
                right = mid
            } else {
                right--
            }
        }
    }
    return nums[left]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
