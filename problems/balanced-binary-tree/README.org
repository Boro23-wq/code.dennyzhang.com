* Leetcode: Balanced Binary Tree                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, heightoftree
:END:
---------------------------------------------------------------------
Given a binary tree, determine if it is height-balanced
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/balanced-binary-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/count-complete-tree-nodes][Count Complete Tree Nodes]]
- Tag: [[https://code.dennyzhang.com/tag/binarytree][#binarytree]], [[https://code.dennyzhang.com/tag/heightoftree][#heightoftree]]
---------------------------------------------------------------------

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/balanced-binary-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/balanced-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/balanced-binary-tree
// Basic Ideas: recursive
//
// Complexity: Time O(n), Space O(h)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func dfs(root *TreeNode) (int, bool) {
    if root == nil { return 0, true  }
    h1, ok1 := dfs(root.Left)
    if ! ok1 {
        return 0, false
    }
    h2, ok2 := dfs(root.Right)
    if ! ok2 {
        return 0, false
    }
    if h1 < h2 {
        h1, h2 = h2, h1
    }
    if h1-h2>1 {
        return 0, false
    }
    return h1+1, true
}

func isBalanced(root *TreeNode) bool {
    _, ok := dfs(root)
    return ok
}
#+END_SRC

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/balanced-binary-tree
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        (status, _level) = self._isBalanced(root)
        return status

    def _isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: (bool, level)
        """
        if root is None:
            return (True, 0)
        if root.left is None and root.right is None:
            return (True, 1)

        (l_status, l_level) = self._isBalanced(root.left)
        if l_status is False:
            return (False, -1)
        (r_status, r_level) = self._isBalanced(root.right)
        if r_status is False:
            return (False, -1)

        if (abs(l_level - r_level)>1):
            return (False, -1)
        return (True, max(l_level, r_level) + 1)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
