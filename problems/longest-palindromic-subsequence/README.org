* Leetcode: Longest Palindromic Subsequence                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, palindrome, editdistance
:END:
---------------------------------------------------------------------
Longest Palindromic Subsequence
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-palindromic-subsequence"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/valid-palindrome-iii][Leetcode: Valid Palindrome III]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/review-palindrome][#palindrome]], [[https://code.dennyzhang.com/tag/editdistance][#editdistance]]
---------------------------------------------------------------------
Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
#+BEGIN_EXAMPLE
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-palindromic-subsequence][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/longest-palindromic-subsequence/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-palindromic-subsequence
// Basic Ideas: dynamic programming
//   optimal substructure:
//        Problem: the value of s[j...i]
//        if s[i] == s[j-1], f(s[j...i-1])+2
//        if s[i] != s[j-1], max(f(s[j...i-1]), f(s[j+1...i]))
//   Terminiation condition:
//        For s[j...i], when i==j, return 1
//
// Complexity: Time O(n^2), Space O(n^2)
func longestPalindromeSubseq(s string) int {
    dp := make([][]int, len(s))
    for i, _ := range dp {
        l := make([]int, len(s))
        for j, _ := range l {
            l[j] = 1
        }
        dp[i] = l
    }
    // dp[i][j]: s[j], s[j+1], s[j+2], ... s[i]
    for i:=1; i<len(s); i++ {
        for j:=i-1; j>=0; j-- {
            if s[i] == s[j] {
                // s[j], s[j+1...i-1], s[i]
                v := 2
                if j+1 <= i-1 {
                    v += dp[i-1][j+1]
                }
                dp[i][j] = v
            } else {
                // s[j+1...i]
                dp[i][j] = dp[i][j+1]
                if dp[i][j] < dp[i-1][j] {
                    // s[j...i-1]
                    dp[i][j] = dp[i-1][j]
                }
            }
        }
    }
    return dp[len(s)-1][0]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
