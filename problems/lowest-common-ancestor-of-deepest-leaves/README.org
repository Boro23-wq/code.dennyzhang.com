* Leetcode: Lowest Common Ancestor of Deepest Leaves             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, dfs, heightoftree
:END:
---------------------------------------------------------------------
Lowest Common Ancestor of Deepest Leaves
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-deepest-leaves"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/binarytree][#binarytree]], [[https://code.dennyzhang.com/review-dfs][#dfs]], [[https://code.dennyzhang.com/tag/heightoftree][#heightoftree]]
---------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than n/3 times. The algorithm should run in linear time and in O(1) space.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/lowest-common-ancestor-of-deepest-leaves][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/lowest-common-ancestor-of-deepest-leaves
// Basic Ideas: dfs
// Get height of left subtree and right subtree
//
// Complexity: Time O(n), Space O(1)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func dfs(root *TreeNode) (res *TreeNode, height int) {
    if root == nil {
        return nil, 0
    }
    node1, h1 := dfs(root.Left)
    node2, h2 := dfs(root.Right)
    if h1 == h2 {
        return root, h1+1
    } else {
        if h1 > h2 {
            return node1, h1+1
        } else {
            return node2, h2+1
        }
    }
}

func lcaDeepestLeaves(root *TreeNode) *TreeNode {
    res, _ := dfs(root)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
