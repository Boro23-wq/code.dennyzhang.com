* Leetcode: Longest Repeating Substring                          :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, hashmap, rollinghash
:END:
---------------------------------------------------------------------
Longest Repeating Substring
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-repeating-substring"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/review-hashmap][#hashmap]], [[https://code.dennyzhang.com/followup-lrs][#lrs]], [[https://code.dennyzhang.com/tag/rollinghash][#rollinghash]]
---------------------------------------------------------------------
Given a string S, find out the length of the longest repeating substring(s). Return 0 if no repeating substring exists.

Example 1:
#+BEGIN_EXAMPLE
Input: "abcd"
Output: 0
Explanation: There is no repeating substring.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "abbaba"
Output: 2
Explanation: The longest repeating substrings are "ab" and "ba", each of which occurs twice.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: "aabcaabdaab"
Output: 3
Explanation: The longest repeating substring is "aab", which occurs 3 times.
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: "aaaaa"
Output: 4
Explanation: The longest repeating substring is "aaaa", which occurs twice.
#+END_EXAMPLE
 
Note:

1. The string S consists of only lowercase English letters from 'a' - 'z'.
- 1 <= S.length <= 1500

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-repeating-substring][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/longest-repeating-substring/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Binary search by a substring length

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-repeating-substring
// Basic Ideas: binary search + hashmap
//   T T T T F F
// Complexity: Time O(n*log(n)), Space O(n*n)
func hasDuplicate(S string, width int) bool {
    res := false
    m := map[string]bool{}
    // i... i+width-1 
    for i:=0; i+width-1<len(S); i++ {
        str := S[i:i+width]
        if _, ok := m[str]; ok {
            res = true
            break
        } else {
            m[str] = true
        }
    }
    return res
}

func longestRepeatingSubstring(S string) int {
    left, right := 1, len(S)
    // T, T, T, F, F
    // Find the first false and keep updating the result
    for left < right {
        mid := (right-left)/2 + left
        if hasDuplicate(S, mid) {
            left = mid+1
        } else {
            right = mid
        }
    }
    return left-1
}
#+END_SRC

- Solution: Binary search by a substring length

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-repeating-substring
// Basic Ideas: binary search + hashmap
//   T T T T F F
// Complexity: Time O(n*log(n)), Space O(n*n)
func hasDuplicate(S string, width int) bool {
    res := false
    m := map[string]bool{}
    // i... i+width-1 
    for i:=0; i+width-1<len(S); i++ {
        str := S[i:i+width]
        if _, ok := m[str]; ok {
            res = true
            break
        } else {
            m[str] = true
        }
    }
    return res
}

func longestRepeatingSubstring(S string) int {
    res := 0
    left, right := 1, len(S)
    // T, T, T, F, F
    // Find the first false and keep updating the result
    for left < right {
        mid := (right-left)/2 + left
        if hasDuplicate(S, mid) {
            // right half
            if mid > res {
                res = mid
            }
            left = mid+1
        } else {
            right = mid
        }
    }
    return res
}

#+END_SRC

- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/longest-repeating-substring
// Basic Ideas: binary search + hashmap
//   T T T T F F
// Complexity: Time O(n*n*log(n)), Space O(n^2)
func longestRepeatingSubstring(S string) int {
    res := 0
    left, right := 1, len(S)-1
    for left < right {
        middle := (right-left)/2 + left
        m := map[string]bool{}
        has_duplicate := false
        for i:=0; i+middle<len(S); i++ {
            str := S[i:i+middle+1]
            if m[str] {
                has_duplicate = true
                if middle+1 > res { res = middle+1 }
                break
            }
            m[str] = true
        }
        if has_duplicate == false {
            right = middle
        } else {
            left = middle+1
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
