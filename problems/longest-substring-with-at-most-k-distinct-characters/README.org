* Leetcode: Longest Substring with At Most K Distinct Characters :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string
:END:
---------------------------------------------------------------------
Longest Substring with At Most K Distinct Characters
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/longest-substring-with-at-most-two-distinct-characters][Longest Substring with At Most Two Distinct Characters]]
- [[https://code.dennyzhang.com/tag/string][Tag: #string]]
---------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than n/3 times. The algorithm should run in linear time and in O(1) space.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-substring-with-at-most-k-distinct-characters][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/longest-substring-with-at-most-k-distinct-characters
## Basic Ideas:
##
## Complexity: Time O(n*k), Space O(k)
class Solution:
    def lengthOfLongestSubstringKDistinct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        import collections
        import sys
        length = len(s)
        if length <= k: return length
        if k == 0: return 0
        d = collections.defaultdict(lambda: 0)
        index, res = length, -sys.maxsize-1
        for i in range(length):
            ch = s[i]
            if ch in d:
                d[ch] += 1
            else:
                if len(d) == k:
                    index = i
                    break
                else:
                    d[ch] += 1
        res = max(res, self.getCount(d))
        
        j = 0
        for i in range(index, length):
            d[s[i]] += 1
            while len(d) == k+1:
                ch = s[j]
                d[ch] -= 1
                j += 1
                if d[ch] == 0: del d[ch]
            res = max(res, self.getCount(d))
        return res

    def getCount(self, d):
        res = 0
        for ch in d: res += d[ch]
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
