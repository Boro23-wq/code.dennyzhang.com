* Leetcode: Pacific Atlantic Water Flow                        :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     graph, bfs, dfs
:END:
---------------------------------------------------------------------
Pacific Atlantic Water Flow
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/pacific-atlantic-water-flow"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-graph][#graph]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/review-dfs][#dfs]]
---------------------------------------------------------------------
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Note:
1. The order of returned grid coordinates does not matter.
- Both m and n are less than 150.

Example:
#+BEGIN_EXAMPLE
Given the following 5x5 matrix:

  Pacific ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * Atlantic

Return:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/pacific-atlantic-water-flow][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/pacific-atlantic-water-flow/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/pacific-atlantic-water-flow
// Basic Ideas: BFS
//
//   Pacific is two edges, not one point!
//
//   When one cell is target, it shall have a path to pacific, 
//       and another one to altantic.
//   The path should be non-increasing order
//
//   Instead of loop each cell, which is the source, we try the opposite
//   Start searching from the source, which is pacific and atlantic
//
//   Each both searches visit the same cell, the cell is the target.
//
// Complexity: Time O(m*n) Space O(m*n)
func bfs(queue [][]int, visited [][]bool, matrix [][]int) {
	for len(queue) > 0 {
		nexts := [][]int{}
		for _, node := range queue {
            i, j := node[0], node[1]
			for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, 
				[]int{0, 1}, []int{0, -1}} {
					i2, j2 := i+offset[0], j+offset[1]
					if i2<0 || i2>=len(matrix) || j2<0 || j2>=len(matrix[0]) {
						continue
					}
					if visited[i2][j2] || matrix[i2][j2]<matrix[i][j] {
						continue
					}
					visited[i2][j2] = true
					nexts = append(nexts, []int{i2, j2})
			}
		}
		queue = nexts
	}
}

func pacificAtlantic(matrix [][]int) [][]int {
	if len(matrix) == 0 || len(matrix[0]) == 0 {
		return [][]int{}
	}
	pvisited := make([][]bool, len(matrix))
    avisited := make([][]bool, len(matrix))
    for i, _ := range pvisited {
        pvisited[i] = make([]bool, len(matrix[0]))
        avisited[i] = make([]bool, len(matrix[0]))
    }
	pqueue := [][]int{}
	aqueue := [][]int{}
    // initialize queue
	for i:=0; i<len(matrix); i++ {
		pvisited[i][0] = true
		pqueue = append(pqueue, []int{i, 0})
		avisited[i][len(matrix[0])-1] = true
		aqueue = append(aqueue, []int{i, len(matrix[0])-1})
	}
	for j:=0; j<len(matrix[0]); j++ {
		pvisited[0][j] = true
		pqueue = append(pqueue, []int{0, j})
		avisited[len(matrix)-1][j] = true
		aqueue = append(aqueue, []int{len(matrix)-1, j})
	}
	bfs(pqueue, pvisited, matrix)
	bfs(aqueue, avisited, matrix)

	res := [][]int{}
	for i, row := range matrix {
		for j, _ := range row {
			if pvisited[i][j] && avisited[i][j] {
				res = append(res, []int{i, j})
			}
		}
	}
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
