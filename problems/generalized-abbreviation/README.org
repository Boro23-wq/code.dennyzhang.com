* Leetcode: Generalized Abbreviation                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, bfs
:END:
---------------------------------------------------------------------
Generalized Abbreviation
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/generalized-abbreviation"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/letter-case-permutation][Letter Case Permutation]]
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]], [[https://code.dennyzhang.com/tag/combination][Tag: #combination]]
---------------------------------------------------------------------
Write a function to generate the generalized abbreviations of a word.

Example:
Given word = "word", return the following list (order does not matter):
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/generalized-abbreviation][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/generalized-abbreviation/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/generalized-abbreviation
## Basic Ideas: BFS
##
## Complexity: Time O(n*pow(2,n)), Space O(pow(2, n))
class Solution:
    def generateAbbreviations(self, word):
        """
        :type word: str
        :rtype: List[str]
        """
        import collections
        queue = collections.deque()
        queue.append([""])
        for ch in word:
            for k in range(len(queue)):
                element = queue.popleft()
                if element[-1] == "":
                    queue.append([ch])
                    queue.append(["1"])
                elif element[-1].isdigit():
                    queue.append(element + [ch])
                    queue.append(element[:-1] + [str(int(element[-1])+1)])
                else:
                    queue.append(element + [ch])
                    queue.append(element + ["1"])
        res = []
        for element in queue: res.append(''.join(element))
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
