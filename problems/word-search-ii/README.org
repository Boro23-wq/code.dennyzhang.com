* Leetcode: Word Search II                                       :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     trie, dfs
:END:
---------------------------------------------------------------------
Word Search II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-search-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-trie][#trie]], [[https://code.dennyzhang.com/review-dfs][#dfs]]
---------------------------------------------------------------------
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
#+BEGIN_EXAMPLE
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
#+END_EXAMPLE

Note:
You may assume that all inputs are consist of lowercase letters a-z.

#+BEGIN_EXAMPLE
You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?

If the current candidate does not exist in all words' prefix, you
could stop backtracking immediately. What kind of data structure could
answer such query efficiently? Does a hash table work? Why or why not?
How about a Trie? If you would like to learn how to implement a basic
trie, please work on this problem: Implement Trie (Prefix Tree) first.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-search-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/word-search-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: trie with extra datastructure + no hashmap to avoid duplicates + use [26] instead of hashmap in trie
#+BEGIN_SRC go
// https://code.dennyzhang.com/word-search-ii
// Basic Ideas: trie
//
// Notice: avoid duplicate entries
// Assumption: the order doesn't matter
//
// Complexity: Time O(n*m*w), Space O(w)
type Trie struct {
    children [26]*Trie
    isLeaf bool
    index int
}

func dfs(i int, j int, board [][]byte, p *Trie, seen []bool) {
    // return if invalid position or visited
    if i<0 || i>=len(board) || j<0 || j>=len(board[0]) || board[i][j] == '#' {
        return
    }
    
    ch := board[i][j]
    q := p.children[ch-'a']
    // abort, if not found in trie
    if q == nil {
        return
    }

    // get a candidate, and not a duplicate one
    if q.isLeaf && !seen[q.index] {
        seen[q.index] = true
    }
    // dfs
    for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, []int{0, 1}, []int{0, -1}} {
        board[i][j] = '#'
        dfs(i+offset[0], j+offset[1], board, q, seen)
        // backtracking
        board[i][j] = ch
    }
}

func findWords(board [][]byte, words []string) []string {
    if len(board) == 0 || len(board[0]) == 0 || len(words) == 0 {
        return []string{}
    }

    root := &Trie{}
    // build trie
    for index, word := range words {
        p := root
        for i, _ := range word {
            j := word[i]-'a'
            if p.children[j] == nil {
                p.children[j] = &Trie{}
            }
            p = p.children[j]
        }
        p.isLeaf = true
        p.index = index
    }
    seen := make([]bool, len(words))
    for i, row := range board {
        for j, _ := range row {
            dfs(i, j, board, root, seen)
        }
    }
    res := []string{}
    for i, b := range seen {
        if b {
            res = append(res, words[i])
        }
    }
    return res
}
#+END_SRC

- Solution: trie + without hashmap of state
#+BEGIN_SRC go
// https://code.dennyzhang.com/word-search-ii
// Basic Ideas: trie
//
// Notice: avoid duplicate entries
// Assumption: the order doesn't matter
//
// Complexity: Time O(n*m*w), Space O(w)
type Trie struct {
    children map[byte]*Trie
    isLeaf bool
}

func dfs(i int, j int, combination []byte, board [][]byte, p *Trie, m map[string]bool) {
    // return if invalid position or visited
    if i<0 || i>=len(board) || j<0 || j>=len(board[0]) || board[i][j] == '#' {
        return
    }
    
    ch := board[i][j]
    q := p.children[ch]
    // abort, if not found in trie
    if q == nil {
        return
    }

    // get a candidate
    if q.isLeaf {
        m[string(append(combination, ch))] = true
    }
    // dfs
    for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, []int{0, 1}, []int{0, -1}} {
        combination = append(combination, ch)
        board[i][j] = '#'
        dfs(i+offset[0], j+offset[1], combination, board, q, m)
        // backtracking
        board[i][j] = ch
        combination = combination[0:len(combination)-1]
    }
}

func findWords(board [][]byte, words []string) []string {
    if len(board) == 0 || len(board[0]) == 0 || len(words) == 0 {
        return []string{}
    }

    root := &Trie{children:map[byte]*Trie{}}
    // build trie
    for _, word := range words {
        p := root
        for i, _ := range word {
            ch := word[i]
            if _, ok := p.children[ch]; !ok {
                p.children[ch] = &Trie{children:map[byte]*Trie{}}
            }
            p = p.children[ch]
        }
        p.isLeaf = true
    }
    m := map[string]bool{}
    for i, row := range board {
        for j, _ := range row {
            dfs(i, j, []byte{}, board, root, m)
        }
    }
    res := []string{}
    for k, _ := range m {
        res = append(res, k)
    }
    return res
}
#+END_SRC

- Solution: trie + hashmap as state of each cell
#+BEGIN_SRC go
// https://code.dennyzhang.com/word-search-ii
// Basic Ideas: trie
//
// Notice: avoid duplicate entries
// Assumption: the order doesn't matter
//
// Complexity: Time O(n*m*w), Space O(w)
type Trie struct {
    children map[byte]*Trie
    isLeaf bool
}

func dfs(i int, j int, combination []byte, board [][]byte, visited [][]bool, p *Trie, m map[string]bool) {
    // return if invalid position or visited
    if i<0 || i>=len(board) || j<0 || j>=len(board[0]) || visited[i][j] {
        return
    }
    
    ch := board[i][j]
    q := p.children[ch]
    // abort, if not found in trie
    if q == nil {
        return
    }

    // get a candidate
    if q.isLeaf {
        m[string(append(combination, ch))] = true
    }

    // dfs
    for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, []int{0, 1}, []int{0, -1}} {
        visited[i][j] = true
        combination = append(combination, ch)
        dfs(i+offset[0], j+offset[1], combination, board, visited, q, m)
        // backtracking
        combination = combination[0:len(combination)-1]
        visited[i][j] = false
    }
}

func findWords(board [][]byte, words []string) []string {
    if len(board) == 0 || len(board[0]) == 0 || len(words) == 0 {
        return []string{}
    }

    root := &Trie{children:map[byte]*Trie{}}
    // build trie
    for _, word := range words {
        p := root
        for i, _ := range word {
            ch := word[i]
            if _, ok := p.children[ch]; !ok {
                p.children[ch] = &Trie{children:map[byte]*Trie{}}
            }
            p = p.children[ch]
        }
        p.isLeaf = true
    }
    m := map[string]bool{}
    for i, row := range board {
        for j, _ := range row {
            visited := make([][]bool, len(board))
            for k, _ := range visited {
                visited[k] = make([]bool, len(board[0]))
            }
            dfs(i, j, []byte{}, board, visited, root, m)
        }
    }
    res := []string{}
    for k, _ := range m {
        res = append(res, k)
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
