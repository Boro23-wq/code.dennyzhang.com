* Leetcode: Burst Balloons                                      :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, intervaldp
:END:
---------------------------------------------------------------------
Burst Balloons
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/burst-balloons"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/followup-intervaldp][#intervaldp]]
---------------------------------------------------------------------
Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:

- You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.
- 0 <= n <= 500, 0 <= nums[i] <= 100

Example:
#+BEGIN_EXAMPLE
Input: [3,1,5,8]
Output: 167 
Explanation: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/burst-balloons][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/burst-balloons/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/burst-balloons
// Basic Ideas: DP over Interval
//
//   dp(i, j) = max(dp(i, k)+dp(k+1,j)+burst k)
//           Treat k as the last one to burst
//
// Complexity: Time O(n^3), Space O(n^2)
func max(x, y int) int {
    if x>y {
        return x
    } else {
        return y
    }
}

func maxCoins(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    nums2 := make([]int, len(nums)+2)
    nums2[0] = 1
    nums2[len(nums2)-1] = 1
    for i:=1; i<len(nums2)-1; i++ {
        nums2[i] = nums[i-1]
    }
    dp := make([][]int, len(nums))
    for i, _ := range dp {
        dp[i] = make([]int, len(nums))
        // base condition. Length: 1
        dp[i][i] = nums2[i]*nums2[i+1]*nums2[i+2]
    }
    for i:=len(nums)-1; i>=0; i-- {
        for j:=i+1; j<len(nums); j++ {
            dp[i][j] = 0
            for k:=i; k<=j; k++ {
                v1, v2 := 0, 0
                if k-1>=i {
                    v1 = dp[i][k-1]
                }
                if j>=k+1 {
                    v2 = dp[k+1][j]
                }
                dp[i][j] = max(dp[i][j], v1+v2+nums2[k+1]*nums2[i]*nums2[j+2])
            }
        }
    }
    return dp[0][len(nums)-1]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
