* Leetcode: Maximum Subarray Sum with One Deletion              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     maxsubarraysum, roundtrippass
:END:
---------------------------------------------------------------------
Maximum Subarray Sum with One Deletion
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-subarray-sum-with-one-deletion"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/followup-maxsubarraysum][#maxsubarraysum]], [[https://code.dennyzhang.com/tag/roundtrippass][#roundtrippass]]
---------------------------------------------------------------------
Given an integer array of size n, find all elements that appear more than n/3 times. The algorithm should run in linear time and in O(1) space.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-subarray-sum-with-one-deletion][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-subarray-sum-with-one-deletion
// Basic Ideas: two pass: left + right
//  
//  prev_max + S[i] + post_max
//
//  Kadane algorithm to find maximum subarray sum
//               s[i]
//    max_so_far+s[i]
//
// Complexity: Time O(n), Space O(n)
func maximumSum(arr []int) int {
    l := make([]int, len(arr))
    l[0] = arr[0]
    res := l[0]
    // Current loop already covers delete the leftmost or rightmost
    for i:=1; i<len(arr); i++ {
        if l[i-1] < 0 {
            l[i] = arr[i]
        } else {
            l[i] = arr[i]+l[i-1]
        }
        if l[i] > res {
            res = l[i]
        }
    }
    max_ending := arr[len(arr)-1]
    // from right to left
    for i:=len(arr)-2; i>=1; i-- {
        // arr[...i-1], arr[i], arr[i+1]
        // delete arr[i]
        if max_ending + l[i-1] > res {
            res = max_ending + l[i-1]
        }
        // set max_ending
        if arr[i]+max_ending > arr[i] {
            max_ending = arr[i]+max_ending
        } else {
            max_ending = arr[i]
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
