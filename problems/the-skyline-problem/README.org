* Leetcode: The Skyline Problem                                 :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     heap, linesweep
:END:
---------------------------------------------------------------------
The Skyline Problem
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/the-skyline-problem"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-heap][#heap]], [[https://code.dennyzhang.com/followup-linesweep][#linesweep]]
---------------------------------------------------------------------
A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).

[[image-blog:Leetcode: The Skyline Problem][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/the-skyline-problem/skyline1.jpg]]

[[image-blog:Leetcode: The Skyline Problem][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/the-skyline-problem/skyline2.jpg]]

Buildings Skyline Contour
The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 <= Li, Ri <= INT_MAX, 0 < Hi <= INT_MAX, and Ri - Li > 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .

The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.

For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].

Notes:

- The number of buildings in any input list is guaranteed to be in the range [0, 10000].
- The input list is already sorted in ascending order by the left x position Li.
- The output list must be sorted by the x position.
- There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...[2 3], [4 5], [12 7], ...]

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/the-skyline-problem][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/the-skyline-problem/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC python
## https://code.dennyzhang.com/the-skyline-problem
## Basic Ideas: line sweep
##
##  (s, e):
##    s: start a region
##    e: end a region
##
##  Each point would change the height of the building
##
##  When region starts, it may increase the height. 
##        Then we have a new point
##
##  When region ends, it may decrease the height.
##        If it decreases, we have a new point.
##        But how we know whether it will decrease?
##
## Complexity: Time O(n*n), Space O(n)
import heapq
class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        points = []
        for i, b in enumerate(buildings):
            points.append([b[0], -b[2]]) # start
            points.append([b[1], b[2]]) # end
        points.sort()

        l = []
        # change value to negative to acheive max heap
        heapq.heapify(l)

        # add a dummy height to avoid hitting the ground
        heapq.heappush(l, 0)
        maxH = 0
        res = []
        for p in points:
            if p[1] < 0:
                # push the close point
                heapq.heappush(l, p[1])
            else:
                # close current range
                for i, v in enumerate(l):
                    if v == -p[1]:
                        del l[i]
                        heapq.heapify(l)
                        break
            # peek
            if len(l) > 0 and maxH != l[0]:
                maxH = l[0]
                res.append([p[0], -maxH])
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
