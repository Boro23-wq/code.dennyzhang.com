* Leetcode: Out of Boundary Paths                                :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, countdistinctmoves, bfs
:END:
---------------------------------------------------------------------
Out of Boundary Paths
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/out-of-boundary-paths"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/followup-countdistinctmoves][#countdistinctmoves]]
---------------------------------------------------------------------
There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.
 
Example 1:
#+BEGIN_EXAMPLE
Input: m = 2, n = 2, N = 2, i = 0, j = 0
Output: 6
Explanation:
#+END_EXAMPLE
[[image-blog:Out of Boundary Paths][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/out-of-boundary-paths/1.png]]

Example 2:
#+BEGIN_EXAMPLE
Input: m = 1, n = 3, N = 3, i = 0, j = 1
Output: 12
Explanation:
#+END_EXAMPLE
[[image-blog:Out of Boundary Paths][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/out-of-boundary-paths/2.png]]

Note:

1. Once you move the ball out of boundary, you cannot move it back.
- The length and height of the grid is in range [1,50].
- N is in range [0,50].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/out-of-boundary-paths][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/out-of-boundary-paths/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:
#+BEGIN_SRC go
// https://code.dennyzhang.com/out-of-boundary-paths
// Basic Ideas: dynamic programming
//
//  Notice: what if starting point is out of the grid?
//
//     optimal substructure: pos[i][j] N 
//            <- pos[i-1][j] N-1, pos[i+1][j] N-1, ....
//      
// Complexity: Time O(m*n*N), Space O(m*n*N)
import "math"
func findPaths(m int, n int, N int, i int, j int) int {
    if N == 0 {
        if i>=0 && i<m && j>=0 && j<n {
            return 0
        } else {
            return 1
        }
    }
    mod := int(math.Pow(10, 9)+7)
    l := make([][]int, m)
    for i, _ := range l {
        l[i] = make([]int, n)
    }

    l[i][j] = 1
    res := 0
    // Termination condition: N==1
    for N>0 {
        l2 := make([][]int, m)
        for index_i, _ := range l2 {
            l2[index_i] = make([]int, n)
        }
        for r, row := range l {
            for c, _ := range row {
                for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, 
                                               []int{0, 1}, []int{0, -1}} {
                    i2, j2 := r+offset[0], c+offset[1]
                    if !(i2>=0 && i2<m && j2>=0 && j2<n) {
                        res = (res+l[r][c])%mod
                    } else {
                        l2[i2][j2] = (l2[i2][j2] + l[r][c])%mod
                    }
                }
            }
        }
        copy(l, l2)
        N--
    }
    return res
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/out-of-boundary-paths
// Basic Ideas: dynamic programming
//
//  Notice: what if starting point is out of the grid?
//
//     optimal substructure: pos[i][j] N 
//            <- pos[i-1][j] N-1, pos[i+1][j] N-1, ....
//      
// Complexity: Time O(m*n*N), Space O(m*n*N)
import "math"
func findPaths(m int, n int, N int, i int, j int) int {
    if N == 0 {
        if i>=0 && i<m && j>=0 && j<n {
            return 0
        } else {
            return 1
        }
    }
    mod := int(math.Pow(10, 9)+7)
    l := make([][]int, m)
    for i, _ := range l {
        l[i] = make([]int, n)
    }

    // Termination condition: N==1
    for N>0 {
        l2 := make([][]int, m)
        for index_i, _ := range l2 {
            l2[index_i] = make([]int, n)
        }
        for index_i, row := range l {
            for index_j, _ := range row {
                for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, 
                                               []int{0, 1}, []int{0, -1}} {
                    i2, j2 := index_i+offset[0], index_j+offset[1]
                    if !(i2>=0 && i2<m && j2>=0 && j2<n) {
                        l2[index_i][index_j] = (l2[index_i][index_j] + 1)%mod
                    } else {
                        l2[index_i][index_j] = (l2[index_i][index_j] + l[i2][j2])%mod
                    }
                }
            }
        }
        copy(l, l2)
        N--
    }
    return l[i][j]
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/out-of-boundary-paths
// Basic Ideas: dynamic programming
//
//  Notice: what if starting point is out of the grid?
//
//     optimal substructure: pos[i][j] N 
//            <- pos[i-1][j] N-1, pos[i+1][j] N-1, ....
//      
// Complexity: Time O(m*n*N), Space O(m*n*N)
import "math"
func findPaths(m int, n int, N int, i int, j int) int {
    if N == 0 {
        if i>=0 && i<m && j>=0 && j<n {
            return 0
        } else {
            return 1
        }
    }
    mod := int(math.Pow(10, 9)+7)
    l := make([][]int, m)
    // Termination condition: N==1
    for i, _ := range l {
        l[i] = make([]int, n)
        for j, _ := range l[i] {
            if i == 0 || i == m-1 || j == 0 || j == n-1 {
                for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0},
                                               []int{0, 1}, []int{0, -1}} {
					i2, j2 := i+offset[0], j+offset[1]
					if !(i2>=0 && i2<m && j2>=0 && j2<n) {
						l[i][j]++	   
					}
				}
            }
        }
    }
	res := l[i][j]
    for k:=2; k<=N; k++ {
		l2 := make([][]int, m)
		for i, _ := range l2 {
			l2[i] = make([]int, n)
		}
        for i, _ := range l {
            for j, _ := range l[i] {
                for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, 
                                               []int{0, 1}, []int{0, -1}} {
                    i2, j2 := i+offset[0], j+offset[1]
                    if i2>=0 && i2<m && j2>=0 && j2<n {
                        l2[i][j] = (l2[i][j] + l[i2][j2])%mod
                    }
                }
            }
        }
        copy(l, l2)
        res = (res + l[i][j])%mod
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
