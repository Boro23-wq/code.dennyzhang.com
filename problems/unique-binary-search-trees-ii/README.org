* Leetcode: Unique Binary Search Trees II                         :BLOG:Hard:
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+STARTUP: showeverything
:PROPERTIES:
:type:     dynamicprogramming
:END:
---------------------------------------------------------------------
Unique Binary Search Trees II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-binary-search-trees-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/unique-binary-search-trees][Leetcode: Unique Binary Search Trees]]
- [[https://code.dennyzhang.com/all-possible-full-binary-trees][Leetcode: All Possible Full Binary Trees]]
- [[https://code.dennyzhang.com/review-dynamicprogramming][Review: Dynamic Programming Problems]]
- Tag: [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

#+BEGIN_EXAMPLE
For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/unique-binary-search-trees-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/unique-binary-search-trees-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/unique-binary-search-trees-ii
// Basic Ideas: dynamic programming
// f(i):
//         j+1
//       /  \
//      /    \
//   f(j)    f(i-j-1)
// For the right subtree, add j+1 to the value of each node
//
// Complexity: Time O(2^n), Space O(2^n)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func deepCopyWithAdd(root *TreeNode, v int) *TreeNode {
    if root == nil { return nil }
    res := &TreeNode{root.Val+v, nil, nil}
    res.Left, res.Right = deepCopyWithAdd(root.Left, v), deepCopyWithAdd(root.Right, v)
    return res
}

func generateTrees(n int) []*TreeNode {
    if n<=0 { return []*TreeNode{}}
    l := [][]*TreeNode{}
    l = append(l, []*TreeNode{nil})
    l = append(l, []*TreeNode{&TreeNode{1, nil, nil}})
    for i:=2; i<=n; i++ {
        l2 := []*TreeNode{}
        for j:=0; j<i; j++ {
            for _, left := range l[j] {
                for _, right := range l[i-j-1] {
                    parent := &TreeNode{j+1, deepCopyWithAdd(left, 0), deepCopyWithAdd(right, j+1)}
                    l2 = append(l2, parent)
                }
            }
        }
        l = append(l, l2)
    }
    return l[n]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
