* Leetcode: Subsets II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, codetemplate, backtracking
:END:
---------------------------------------------------------------------
Subsets II
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/subsets][Subsets]]
- [[https://code.dennyzhang.com/letter-case-permutation][Letter Case Permutation]]
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]], [[https://code.dennyzhang.com/tag/combination][Tag: #combination]]
---------------------------------------------------------------------
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
#+BEGIN_EXAMPLE
For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
#+END_EXAMPLE

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/subsets-ii][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/subsets-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/subsets-ii
## Basic Ideas:
##
## Complexity:
class Solution:
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        length = len(nums)
        if length == 0: return [[]]
        res = []
        for element in self.subsetsWithDup(nums[1:]):
            if element not in res: res.append(element)
            
            element2 = sorted([nums[0]] + element)
            if element2 not in res: res.append(element2)
        return res
#+END_SRC
