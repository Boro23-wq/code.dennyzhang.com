* Leetcode: Subsets II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, codetemplate, backtracking, subset
:END:
---------------------------------------------------------------------
Subsets II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/subsets-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/letter-tile-possibilities][Leetcode: Letter Tile Possibilities]]
- [[https://code.dennyzhang.com/letter-case-permutation][Leetcode: Letter Case Permutation]]
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]]
- Tag: [[https://code.dennyzhang.com/tag/subset][#subset]], [[https://code.dennyzhang.com/tag/backtracking][#backtracking]], [[https://code.dennyzhang.com/tag/dfs][#dfs]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
#+BEGIN_EXAMPLE
For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/subsets-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/subsets-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/subsets-ii
// Basic Ideas: dfs + backtracking
//
//  No need to use hashmap
//
// Complexity: Time O(pow(2, n)), Space O(pow(2, n))
import "sort"
func dfs(combination []int, nums []int, pos int, res *[][]int) {
    combination2 := make([]int, len(combination))
    copy(combination2, combination)
    *res = append(*res, combination2)

    for i:=pos; i<len(nums); i++ {
        if i>pos && nums[i] == nums[i-1] { continue }
        combination = append(combination, nums[i])
        dfs(combination, nums, i+1, res)
        combination = combination[0:len(combination)-1]
    }
}

func subsetsWithDup(nums []int) [][]int {
    res := [][]int{}
    sort.Ints(nums)
    dfs([]int{}, nums, 0, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
