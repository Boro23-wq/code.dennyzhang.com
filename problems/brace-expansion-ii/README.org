* Leetcode: Brace Expansion II                                  :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     recursive
:END:
---------------------------------------------------------------------
Brace Expansion II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/brace-expansion-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-recursive][#recursive]]
---------------------------------------------------------------------
Under a grammar given below, strings can represent a set of lowercase words.  Let's use R(expr) to denote the set of words the expression represents.

Grammar can best be understood through simple examples:

- Single letters represent a singleton set containing that word.
#+BEGIN_EXAMPLE
R("a") = {"a"}
R("w") = {"w"}
#+END_EXAMPLE

- When we take a comma delimited list of 2 or more expressions, we take the union of possibilities.
#+BEGIN_EXAMPLE
R("{a,b,c}") = {"a","b","c"}
R("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains each word at most once)
#+END_EXAMPLE

- When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
#+BEGIN_EXAMPLE
R("{a,b}{c,d}") = {"ac","ad","bc","bd"}
R("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}
#+END_EXAMPLE

Formally, the 3 rules for our grammar:

- For every lowercase letter x, we have R(x) = {x}
- For expressions e_1, e_2,... , e_k with k >= 2, we have R({e_1,e_2,...}) = R(e_1) U R(e_2) U...
- For expressions e_1 and e_2, we have R(e_1 + e_2) = {a + b for (a, b) in R(e_1) x R(e_2)}, where + denotes concatenation, and x denotes the cartesian product.

Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.

Example 1:
#+BEGIN_EXAMPLE
Input: "{a,b}{c,{d,e}}"
Output: ["ac","ad","ae","bc","bd","be"]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "{{a,z},a{b,c},{ab,z}}"
Output: ["a","ab","ac","z"]
Explanation: Each distinct word is written only once in the final answer.
#+END_EXAMPLE
 
Constraints:

1. 1 <= expression.length <= 50
- expression[i] consists of '{', '}', ','or lowercase English letters.
- The given expression represents a set of words based on the grammar given in the description.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/brace-expansion-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/brace-expansion-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

*General Thinkings:*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

*Key Observations:*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

*Walk Through Testdata*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

#+BEGIN_SRC go
// https://code.dennyzhang.com/brace-expansion-ii

#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
