* Leetcode: Find K Closest Elements                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, twopointer, heap
:END:
---------------------------------------------------------------------
Find K Closest Elements
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-k-closest-elements"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/review-twopointer][#twopointer]]
---------------------------------------------------------------------
Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.

Example 1:
#+BEGIN_EXAMPLE
Input: [1,2,3,4,5], k=4, x=3
Output: [1,2,3,4]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [1,2,3,4,5], k=4, x=-1
Output: [1,2,3,4]
#+END_EXAMPLE

Note:
1. The value k is positive and will always be smaller than the length of the sorted array.
- Length of the given array is positive and will not exceed 104
- Absolute value of elements in the array and x will not exceed 104

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-k-closest-elements][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-k-closest-elements/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: heap

#+BEGIN_SRC go
// https://code.dennyzhang.com/find-k-closest-elements
// Basic Idea: heap
//
// top K elements closet to x in heap
//
// Complexity: Time O(n*log(k)), Space O(k)
// max heap
import ("container/heap"
        "sort")

type MyNode struct {
    dis int
    v int
}

type MyHeap []MyNode

func (h MyHeap) Len() int {
    return len(h)
}

func (h MyHeap) Less(i, j int) bool {
    if h[i].dis==h[j].dis {
        return h[i].v>h[j].v
    } else {
        return h[i].dis>h[j].dis
    }
}

func (h MyHeap) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

func (h *MyHeap) Push(x interface{}) {
    *h = append(*h, x.(MyNode))
}

func (h *MyHeap) Pop() interface{} {
    res := (*h)[len(*h)-1]
    *h = (*h)[0:len(*h)-1]
    return res
}

func findClosestElements(arr []int, k int, x int) []int {
    h := &MyHeap{}
    heap.Init(h)
    for _, v := range arr {
        dis := x-v
        if dis<0 {
            dis = -dis
        }
        heap.Push(h, MyNode{dis:dis, v:v})
        if h.Len() > k {
            heap.Pop(h)
        }
    }
    res := make([]int, k)
    for i:=0; i<k; i++ {
        res[i] = heap.Pop(h).(MyNode).v
    }
    // Need to sort it
    sort.Ints(res)
    return res
}
#+END_SRC

- Solution: binary search + two pointer

#+BEGIN_SRC go
// https://code.dennyzhang.com/find-k-closest-elements
// Basic Idea: binary search + two pointer
//
// Leetcode: Search Insert Position. To get the center location
// Then two pointer to get K elements
//
// Complexity: Time O(log(n)+k), Space O(1)
func abs(x int) int {
    if x<0 {
        return -x
    } else {
        return x
    }
}

func findClosestElements(arr []int, k int, x int) []int {
    if k == 0 { 
        return []int{}
    }
    left, right := 0, len(arr)-1
    index := -1
    for left<=right {
        mid := (right-left)/2 + left
        if arr[mid] == x {
            index = mid
            break
        }
        if arr[mid] < x {
            // search right half
            left = mid+1
        } else {
            right = mid-1
        }
    }
    // When exist: right+1 == left
    if index == -1 {
        // not found
        index = left
    }
    // Corner case: all value bigger than x
    if index == len(arr) {
        return arr[len(arr)-1-k:len(arr)-1]
    }
    // search insert location doesn't have the smallest absoluate value
    if index-1 >= 0  && abs(x-arr[index-1])<abs(x-arr[index]) {
        index--
    }
    // two pointers: i move to left, j move to right
    i, j, cnt := index-1, index+1, 1
    for cnt!=k && (i>=0 || j<len(arr)) {
        if i==-1 {
            j++
            cnt++
            continue
        }
        if j==len(arr) {
            i--
            cnt++
            continue
        }
        if abs(arr[i]-x)<=abs(arr[j]-x) {
            i--
        } else {
            j++
        }
        cnt++
    }
    // move i back
    i++
    return arr[i:i+k]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
