* Leetcode: Search a 2D Matrix II                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, sortedmatrix
:END:
---------------------------------------------------------------------
Search a 2D Matrix
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/search-a-2d-matrix-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/kth-smallest-element-in-a-sorted-matrix][Kth Smallest Element in a Sorted Matrix]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/review-sortedmatrix][#sortedmatrix]]
---------------------------------------------------------------------
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:
#+BEGIN_EXAMPLE
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
#+END_EXAMPLE
Given target = 5, return true.

Given target = 20, return false.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/search-a-2d-matrix-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/search-a-2d-matrix-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/search-a-2d-matrix-ii
## Basic Ideas: We search from the left bottom position
##    If the value is smaller than the target, move right
##    If bigger, move up
##
## Complexity: Time O(n+m), Space O(1)
class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        row_count = len(matrix)
        # []
        if row_count == 0: return False
        col_count = len(matrix[0])
        # [[]]
        if col_count == 0: return False
        if matrix[0][0] > target or matrix[-1][-1] < target: return False
        i, j = row_count-1, 0
        while i>=0 and j<=col_count-1:
            if matrix[i][j] == target: return True
            if matrix[i][j] < target: j += 1
            else: i -= 1
        return False
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
