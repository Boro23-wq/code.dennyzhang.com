* LintCode: Longest AB Substring                                :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     hashmap
:END:
---------------------------------------------------------------------
Longest AB Substring
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-ab-substring"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/same-number][Lintcode: Same Number]]
- Tag: [[https://code.dennyzhang.com/tag/hashmap][#hashmap]]
---------------------------------------------------------------------
Description
Given a string s of only 'A' and 'B', find the longest substring that satisfies the number of 'A' and 'B' are the same. Please output the length of this substring.

n is the length of s, 2<=n<=1000000.

Example
#+BEGIN_EXAMPLE
Given s = "ABAAABBBA", return 8.

Explanation:
Substring s[0,7] and s[1,8] meet the conditions, their length is 8.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given s = "AAAAAA", return 0.

Explanation:
No substring satisfies the condition except empty substring.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-ab-substring][code.dennyzhang.com]]

Credits To: [[https://www.lintcode.com/problem/longest-ab-substring/description][lintcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/longest-ab-substring
// Basic Ideas:
// A: +1, B -1
//   S: A B A A B B A
//   l: 1 0 1 2 1 0 1
// For l[i], find the farest index of the possible matches
// To speed up the lookup, use hashmap
// Complexity: Time O(n), Space O(n)
func getAns (S string) int {
    m := map[int]int{}
    l := make([]int, len(S))
    v := 0
    for i, ch := range S {
        if ch == 'A' {
            v++
        } else {
            v--
        }
        l[i] = v
        if i>m[v] { m[v] = i }
    }
    res := 0
    for i := 0; i<len(S)-1; i++ {
        target := l[i]
        if S[i] == 'A' {
            target--
        } else {
            target++
        }
        if m[target] > i {
            if m[target]-i+1 > res { res = m[target]-i+1 }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
