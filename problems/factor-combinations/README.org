* Leetcode: Factor Combinations                                  :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     recursive, backtracking
:END:
---------------------------------------------------------------------
Factor Combinations
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/factor-combinations"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-backtracking][#backtracking]], [[https://code.dennyzhang.com/review-recursive][#recursive]]
---------------------------------------------------------------------
Numbers can be regarded as product of its factors. For example,
#+BEGIN_EXAMPLE
8 = 2 x 2 x 2;
  = 2 x 4.
#+END_EXAMPLE

Write a function that takes an integer n and return all possible combinations of its factors.

Note:

1. You may assume that n is always positive.
- Factors should be greater than 1 and less than n.

Example 1:
#+BEGIN_EXAMPLE
Input: 1
Output: []
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: 37
Output:[]
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: 32
Output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/factor-combinations][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/factor-combinations/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/factor-combinations
// Basic Ideas: backtracking
//
//   Key points: How to avoid duplicates
//
// Complexity: Time ? Space ?
import "math"
func dfs(combination []int, start int, n int, res *[][]int) {
    if (n == 1) && len(combination) > 1 {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
        return
    }

    for i:=start; i<=int(math.Sqrt(float64(n))); i++ {
        if (n%i==0) {
            combination = append(combination, i)
            dfs(combination, i, n/i, res)
            combination = combination[0:len(combination)-1]
        }
    }
    // examine myself
    if len(combination) != 0 {
        combination = append(combination, n)
        dfs(combination, n, 1, res)
        combination = combination[0:len(combination)-1]
    }
}

func getFactors(n int) [][]int {
    res := [][]int{}
    dfs([]int{}, 2, n, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
