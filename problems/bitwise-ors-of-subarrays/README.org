* Leetcode: Bitwise ORs of Subarrays                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     bitmanipulation, evaluatecomplexity, dynamicprogramming
:END:
---------------------------------------------------------------------
Bitwise ORs of Subarrays
---------------------------------------------------------------------
#+BEGIN_EXPORT HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/bitwise-ors-of-subarrays"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/bitmanipulation][#bitmanipulation]], [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/evaluatecomplexity][#evaluatecomplexity]]
---------------------------------------------------------------------
We have an array A of non-negative integers.

For every (contiguous) subarray B = [A[i], A[i+1], ..., A[j]] (with i <= j), we take the bitwise OR of all the elements in B, obtaining a result A[i] | A[i+1] | ... | A[j].

Return the number of possible results.  (Results that occur more than once are only counted once in the final answer.)

Example 1:
#+BEGIN_EXAMPLE
Input: [0]
Output: 1
Explanation: 
There is only one possible result: 0.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [1,1,2]
Output: 3
Explanation: 
The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: [1,2,4]
Output: 6
Explanation: 
The possible results are 1, 2, 3, 4, 6, and 7.
#+END_EXAMPLE
 
Note:

1. 1 <= A.length <= 50000
- 0 <= A[i] <= 10^9

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/bitwise-ors-of-subarrays][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/bitwise-ors-of-subarrays/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/bitwise-ors-of-subarrays
// Basic Ideas: dynamic programming
// Complexity: Time O(n*log(w)), Space O(n*log(w))
//             w = the maximum size of elements in A.
func subarrayBitwiseORs(A []int) int {
    s_total := map[int]bool{}
    s := map[int]bool{}
    for _, p := range A {
        s2 := map[int]bool{}
		s2[p] = true
        for q := range s {
            r := q|p
            s2[r] = true
        }
        for q:= range s2 { s_total[q] = true }
        s = s2
    }
    return len(s_total)
}
#+END_SRC

#+BEGIN_EXPORT HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
