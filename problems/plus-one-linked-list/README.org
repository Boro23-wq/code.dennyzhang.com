* Leetcode: Plus One Linked List                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist
:END:
---------------------------------------------------------------------
Plus One Linked List
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/reverse-linked-list][Reverse Linked List]]
- [[https://code.dennyzhang.com/review-linkedlist][Review: Linked List Problems]], [[https://code.dennyzhang.com/tag/linkedlist][Tag: #linkedlist]]
- Tag: [[https://code.dennyzhang.com/tag/linkedlist][#linkedlist]]
---------------------------------------------------------------------
Given a non-negative integer represented as non-empty a singly linked list of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.

Example:
#+BEGIN_EXAMPLE
Input:
1->2->3

Output:
1->2->4
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/plus-one-linked-list][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/plus-one-linked-list/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/plus-one-linked-list
## Basic Ideas: Reverse the link. Add 1 with possible carry. Then reverse it back
##
## Complexity:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def plusOne(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        newHead = self.reverseLinkedList(head)

        p, has_carry = newHead, True
        while has_carry:
            p.val += 1
            if p.val >= 10:
                p.val = p.val % 10
                has_carry = True
            else:
                has_carry = False
            # add one more node, if required
            if has_carry and p.next is None:
                p.next = ListNode(0)
            p = p.next

        return self.reverseLinkedList(newHead)

    def reverseLinkedList(self, head):
        if head is None: return None
        if head.next is None: return head
        dummyNode = ListNode(None)
        dummyNode.next = head
        p = head.next
        head.next = None
        while p:
            q = p.next
            p.next = dummyNode.next
            dummyNode.next = p
            p = q
        return dummyNode.next
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="http://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
