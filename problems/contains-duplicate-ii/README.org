* Leetcode: Contains Duplicate II                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     slidingwindow, codetemplate, findduplicates, hashmap
:END:
---------------------------------------------------------------------
Contains Duplicate II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/contains-duplicate-iii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-slidingwindow][#slidingwindow]], [[https://code.dennyzhang.com/followup-findduplicates][#findduplicates]], [[https://code.dennyzhang.com/followup-hashmap][#hashmap]]
---------------------------------------------------------------------
Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/contains-duplicate-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/contains-duplicate-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: hashmap + sliding window to optimize space
#+BEGIN_SRC go
// https://code.dennyzhang.com/contains-duplicate-ii
// Basic Ideas: hashmap
//
//  For each the same value, find the difference in positions
//
// Complexity: Time O(n), Space O(n)
func containsNearbyDuplicate(nums []int, k int) bool {
    m := map[int]int{}
    for i, v := range nums {
        // hashmap only store values in the sliding window of k
        if _, ok := m[v]; ok {
            return true
        }
        m[v] = i

        // cleanup items out of sliding window
        if i-k>=0 {
            delete(m, nums[i-k])    
        }
    }
    return false
}
#+END_SRC

- Solution: hashmap
#+BEGIN_SRC go
// https://code.dennyzhang.com/contains-duplicate-ii
// Basic Ideas: hashmap
//
//  For each the same value, find the difference in positions
//
// Complexity: Time O(n), Space O(n)
func containsNearbyDuplicate(nums []int, k int) bool {
    m := map[int]int{}
    for i, v := range nums {
        if _, ok := m[v]; !ok {
            m[v] = i
        } else {
            if i-m[v] <= k {
                return true
            }
        }
        m[v] = i
    }
    return false
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
