* Leetcode: Valid Tic-Tac-Toe State                              :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     game, array
:END:
---------------------------------------------------------------------
Valid Tic-Tac-Toe State
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/design-log-storage-system"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-game][#game]], [[https://code.dennyzhang.com/review-array][#array]]
---------------------------------------------------------------------
A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array, and consists of characters " ", "X", and "O".  The " " character represents an empty square.

Here are the rules of Tic-Tac-Toe:

- Players take turns placing characters into empty squares (" ").
- The first player always places "X" characters, while the second player always places "O" characters.
- "X" and "O" characters are always placed into empty squares, never filled ones.
- The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
- The game also ends if all squares are non-empty.
- No more moves can be played if the game is over.

#+BEGIN_EXAMPLE
Example 1:
Input: board = ["O  ", "   ", "   "]
Output: false
Explanation: The first player always plays "X".
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: board = ["XOX", " X ", "   "]
Output: false
Explanation: Players take turns making moves.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 3:
Input: board = ["XXX", "   ", "OOO"]
Output: false
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 4:
Input: board = ["XOX", "O O", "XOX"]
Output: true
#+END_EXAMPLE

Note:

- board is a length-3 array of strings, where each string board[i] has length 3.
- Each board[i][j] is a character in the set {" ", "X", "O"}.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/valid-tic-tac-toe-state][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/valid-tic-tac-toe-state/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/valid-tic-tac-toe-state
// Basic Ideas: simulationn
//  Check whether the state is valid
//
// Complexity: Time ? Space ?
func validPoint(i int, j int, board []string, ch byte) bool {
    return i>=0 && i<3 && j>=0 && j<3 && board[i][j] == ch
}

func win(board []string, ch byte) bool {
    for i, row := range board {
        for j, _ := range row {
            if row[j] == ch {
                if validPoint(i, j-1, board, ch) && validPoint(i, j+1, board, ch) {
                    return true
                }
                if validPoint(i-1, j, board, ch) && validPoint(i+1, j, board, ch) {
                    return true
                }
                if validPoint(i-1, j-1, board, ch) && validPoint(i+1, j+1, board, ch) {
                    return true
                }
                if validPoint(i+1, j-1, board, ch) && validPoint(i-1, j+1, board, ch) {
                    return true
                }
            }
        }
    }
    return false
}

func validTicTacToe(board []string) bool {
    p1, p2 := 0, 0
    for _, row := range board {
        for _, v := range row {
            if v == 'X' {
                p1++
            }
            if v == 'O' {
                p2++
            }
        }
    }
    // not valid
    if p1 != p2 && p1 != p2+1 {
        return false
    }
    // if X wins, p1 == p2+1
    if win(board, 'X') && p1 != p2+1 {
        return false
    }
    // if O wins, p1 == p2
    if win(board, 'O') && p1 != p2 {
        return false
    }
    return true
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
