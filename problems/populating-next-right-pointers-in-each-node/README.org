* Leetcode: Populating Next Right Pointers in Each Node         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, inspiring, manydetails, dfs
:END:
---------------------------------------------------------------------
Populating Next Right Pointers in Each Node
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/populating-next-right-pointers-in-each-node"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-manydetails][#manydetails]]
---------------------------------------------------------------------
Given a binary tree
#+BEGIN_EXAMPLE
    struct TreeLinkNode {
      TreeLinkNode *left;
      TreeLinkNode *right;
      TreeLinkNode *next;
    }
#+END_EXAMPLE

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

Note:
- You may only use constant extra space.
- You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).

#+BEGIN_EXAMPLE
For example,
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/populating-next-right-pointers-in-each-node][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/populating-next-right-pointers-in-each-node
## Basic Ideas: Process nodes: from top to down, left to right
##              How to process:
##                 p.left.next = p.right
##                 p.right = p.next.left
##              How to move to next node?
##                 p.next
##                 first_node_next_layer: first node of next layer
## Complexity:

# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

class Solution:
    def connect(self, root):
        # @param root, a tree link node
        # @return nothing
        if root is None:
            return None
        p = root
        first = p.left
        while p:
            # process p
            if p.left:
                p.left.next = p.right
            if p.right and p.next:
                p.right.next = p.next.left
            # move to next node
            if p.next:
                p = p.next
            else:
                p = first
                if p:
                    first = p.left
                else:
                    first = None
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
