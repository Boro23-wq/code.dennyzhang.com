* Leetcode: N-ary Tree Postorder Traversal                       :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     treetraversal, inspiring, redo
:END:
---------------------------------------------------------------------
N-ary Tree Postorder Traversal
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/review-treetraversal][Review: Tree Traversal Problems]]
- Tag: [[https://code.dennyzhang.com/tag/treetraversal][#treetraversal]], [[https://code.dennyzhang.com/tag/inspiring][#inspiring]]
---------------------------------------------------------------------
Given an n-ary tree, return the postorder traversal of its nodes' values.

For example, given a 3-ary tree:

[[image-blog:Leetcode: N-ary Tree Postorder Traversal][https://raw.githubusercontent.com/dennyzhang/challenges-leetcode-interesting/master/images/NaryTreeExample.png]]

Return its postorder traversal as: [5,6,3,2,4,1].
 
Note: Recursive solution is trivial, could you do it iteratively?

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/n-ary-tree-postorder-traversal][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/n-ary-tree-postorder-traversal/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: recursive

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/n-ary-tree-postorder-traversal
## Basic Ideas:
## Complexity: Time O(n), Space O(n)
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def postorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root == None: return []
        res = []
        for node in root.children:
            res += self.postorder(node)
        res.append(root.val)
        return res
#+END_SRC
