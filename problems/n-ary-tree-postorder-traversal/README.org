* Leetcode: N-ary Tree Postorder Traversal                       :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     treetraversal, inspiring, redo
:END:
---------------------------------------------------------------------
N-ary Tree Postorder Traversal
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/n-ary-tree-postorder-traversal"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-treetraversal][#treetraversal]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]]
---------------------------------------------------------------------
Given an n-ary tree, return the postorder traversal of its nodes' values.

For example, given a 3-ary tree:

[[image-blog:Leetcode: N-ary Tree Postorder Traversal][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/NaryTreeExample.png]]

Return its postorder traversal as: [5,6,3,2,4,1].
 
Note: Recursive solution is trivial, could you do it iteratively?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/n-ary-tree-postorder-traversal][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/n-ary-tree-postorder-traversal/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: recursive

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/n-ary-tree-postorder-traversal
## Basic Ideas:
## Complexity: Time O(n), Space O(n)
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def postorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root == None: return []
        res = []
        for node in root.children:
            res += self.postorder(node)
        res.append(root.val)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
