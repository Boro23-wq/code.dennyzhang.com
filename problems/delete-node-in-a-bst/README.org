* Leetcode: Delete Node in a BST                                :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, manydetails, redo
:END:
---------------------------------------------------------------------
Delete Node in a BST
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/review-manydetails][Review: Problems With Many Details]]
- Tag: [[https://code.dennyzhang.com/tag/manydetails][#manydetails]]
---------------------------------------------------------------------
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

1. Search for a node to remove.
- If the node is found, delete the node.

Note: Time complexity should be O(height of tree).

#+BEGIN_EXAMPLE
Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/delete-node-in-a-bst][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/delete-node-in-a-bst/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/delete-node-in-a-bst
## Basic Ideas: Find the target
##              If the target is a leaf, we need the parent node
##              If the target only have one child
##              If the target has both children
##
## Complexity: Time O(h), Space O(1)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def deleteNode(self, root, key):
        """
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """
        if root is None:
            return None

        # delete root
        if root.val == key:
            # root is a leaf
            if root.left is None and root.right is None:
                return None
            else:
                self.deleteRootNode(root, None)
                return root

        # delete node inside the tree
        prev, node = root, root
        while node:
            if node.val == key:
                break
            prev = node
            if node.val > key:
                node = node.left
            else:
                node = node.right

        # node is the target to be deleted
        if node:
            self.deleteRootNode(node, prev)
        return root

    def deleteRootNode(self, root, prev):
        if root is None:
            return
        # leaf
        if root.left is None and root.right is None:
            if root == prev.left:
                prev.left = None
            else:
                prev.right = None
            return
        if root.left:
            # find the largest item in the left right
            p, node = root, root.left
            while node.right:
                p = node
                node = node.right
            # swap value
            root.val = node.val
            return self.deleteRootNode(node, p)
        if root.right:
            p, node = root, root.right
            while node.left:
                p = node
                node = node.left
            root.val = node.val
            return self.deleteRootNode(node, p)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
