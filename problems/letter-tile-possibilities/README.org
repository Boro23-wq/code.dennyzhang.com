* Leetcode: Letter Tile Possibilities                            :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     subset, backtracking, dfs, classic, combination
:END:
---------------------------------------------------------------------
Letter Tile Possibilities
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-tile-possibilities"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/subsets-ii][LeetCode: Subsets II]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/subset][#subset]], [[https://code.dennyzhang.com/review-backtracking][#backtracking]], [[https://code.dennyzhang.com/review-dfs][#dfs]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
You have a set of tiles, where each tile has one letter tiles[i] printed on it.  Return the number of possible non-empty sequences of letters you can make.

Example 1:
#+BEGIN_EXAMPLE
Input: "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "AAABBC"
Output: 188
#+END_EXAMPLE
 
Note:

1. 1 <= tiles.length <= 7
- tiles consists of uppercase English letters.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-tile-possibilities][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/letter-tile-possibilities/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/letter-tile-possibilities
// Basic Ideas: Permutation with duplicate elements
//
// Complexity: Time ?, Space ?
import "sort"
func dfs(chars []int, l []int, items []byte, pos int) int {
    res := 0
    // Combination with current setup
    count, val := 0, 1
    for _, v := range chars {
        if v != 0 {
            count += v
            val *= l[v]
        }
    }
    if count != 0 {
        res += l[count]/val
    }
    for i:=pos; i<len(items); i++ {
        if (i>pos) && (items[i-1] == items[i]) { continue }
        j := items[i]-'A'
        chars[j]++
        res += dfs(chars, l, items, i+1)
        chars[j]--        
    }
    return res
}

func numTilePossibilities(tiles string) int {
    l := []int{1, 1, 2, 6, 24, 120, 720, 5040}
    items := []byte(tiles)
    sort.Slice(items, func(i, j int) bool {
        return items[i] < items[j]
    })
    chars := make([]int, 26)
    return dfs(chars, l, items, 0)
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
