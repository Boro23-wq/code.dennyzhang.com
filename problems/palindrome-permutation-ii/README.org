* Leetcode: Palindrome Permutation II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, codetemplate, backtracking
:END:
---------------------------------------------------------------------
Palindrome Permutation II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/palindrome-permutation-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/letter-case-permutation][Letter Case Permutation]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-combination][#combination]]
---------------------------------------------------------------------
Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.

For example:
#+BEGIN_EXAMPLE
Given s = "aabb", return ["abba", "baab"].

Given s = "abc", return [].
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/palindrome-permutation-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/palindrome-permutation-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## https://code.dennyzhang.com/palindrome-permutation-ii
// Basic Ideas: permutation without duplicates
//
// Complexity: Time ? Space ?
func dfs(combination string, length int, m map[rune]int, central string, res *[]string) {
    if len(combination) == length {
        str := combination + central
        for i:=len(combination)-1; i>=0; i-- {
            str += string(combination[i])
        }
        *res = append(*res, str)
        return
    }

    for i:=0; i<256; i++ {
        ch := rune(i)
        if m[ch] > 0 {
            m[ch]--
            dfs(combination+string(ch), length, m, central, res)
            m[ch]++
        }
    }
}

func generatePalindromes(s string) []string {
    m := map[rune]int{}
    for _, ch := range s { m[ch]++ }
    central := ""
    length := 0
    for key, val := range m {
        if val%2 != 0 { 
            if central != "" {
                return []string{}
            }
            central = string(key)
        }
        m[key] = val/2
        length += m[key]
    }
    res := []string{}
    dfs("", length, m, central, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
