* Leetcode: Groups of Special-Equivalent Strings                 :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, buddystring, interview
:END:
---------------------------------------------------------------------
Groups of Special-Equivalent Strings
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/groups-of-special-equivalent-strings"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/buddy-strings][Leetcode: Buddy Strings]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-string][#string]], [[https://code.dennyzhang.com/tag/buddystring][#buddystring]], [[https://code.dennyzhang.com/tag/interview][#interview]]
---------------------------------------------------------------------
You are given an array A of strings.

Two strings S and T are special-equivalent if after any number of moves, S == T.

A move consists of choosing two indices i and j with i % 2 == j % 2, and swapping S[i] with S[j].

Now, a group of special-equivalent strings from A is a non-empty subset S of A such that any string not in S is not special-equivalent with any string in S.

Return the number of groups of special-equivalent strings from A.

Example 1:
#+BEGIN_EXAMPLE
Input: ["a","b","c","a","c","c"]
Output: 3
Explanation: 3 groups ["a","a"], ["b"], ["c","c","c"]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: ["aa","bb","ab","ba"]
Output: 4
Explanation: 4 groups ["aa"], ["bb"], ["ab"], ["ba"]
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: ["abc","acb","bac","bca","cab","cba"]
Output: 3
Explanation: 3 groups ["abc","cba"], ["acb","bca"], ["bac","cab"]
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: ["abcd","cdab","adcb","cbad"]
Output: 1
Explanation: 1 group ["abcd","cdab","adcb","cbad"]
#+END_EXAMPLE
 
Note:

1. 1 <= A.length <= 1000
- 1 <= A[i].length <= 20
- All A[i] have the same length.
- All A[i] consist of only lowercase letters.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/groups-of-special-equivalent-strings][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/groups-of-special-equivalent-strings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: odd/even group with sort

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/groups-of-special-equivalent-strings
// Basic Ideas: odd/even groups
// Complexity: Time O(n), Space O(n)
import (
    "sort"
    "strings"
)
func numSpecialEquivGroups(A []string) int {
    m := map[string]bool{}
    for _, s := range A {
        l1, l2 := []string{}, []string{}
        for i, ch := range s {
            if i % 2 == 0 {
                l1 = append(l1, string(ch))
            } else {
                l2 = append(l2, string(ch))
            }
        }
        sort.Strings(l1)
        sort.Strings(l2)
        key := strings.Join(l1, "")+":"+strings.Join(l2, "")
        m[key] = true
    }
    return len(m)
}
#+END_SRC

- Solution: odd/even group without sort

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/groups-of-special-equivalent-strings
// Basic Ideas: odd/even groups without sort
// array of 52 positions. 
// First part for odd ones, the other for even ones.
// Complexity: Time O(n), Space O(n)
func numSpecialEquivGroups(A []string) int {
    m := map[[52]int]bool{}
    for _, s := range A {
        key := [52]int{}
        for j, ch := range s {
            if j % 2 == 0 {
                key[byte(ch)-'a']++
            } else {
                key[byte(ch)-'a'+26]++
            }
        }
        m[key] = true
    }
    return len(m)
}
#+END_SRC

- Solution: with 26 positions, instead of 52

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/groups-of-special-equivalent-strings
// Basic Ideas: odd/even groups without sort
// array of 26 positions. 
// First part for odd ones, the other for even ones.
// Complexity: Time O(n), Space O(n)
func numSpecialEquivGroups(A []string) int {
    m := map[[26]int]bool{}
    for _, s := range A {
        key := [26]int{}
        for i, ch := range s {
            if i % 2 == 0 {
                key[byte(ch)-'a'] += 1
            } else {
                key[byte(ch)-'a'] += 100
            }
        }
        m[key] = true
    }
    return len(m)
}
#+END_SRC


#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
