* Leetcode: Shortest Word Distance II                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     hashmap, oodesign, classic, worddistance
:END:
---------------------------------------------------------------------
Shortest Word Distance II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/shortest-word-distance-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-worddistance][Series: Word Distance & Follow-up]]
- [[https://code.dennyzhang.com/shortest-word-distance][Shortest Word Distance]]
- [[https://code.dennyzhang.com/shortest-word-distance-iii][Shortest Word Distance III]]
- Tag: [[https://code.dennyzhang.com/tag/oodesign][#oodesign]], [[https://code.dennyzhang.com/tag/hashmap][#hashmap]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/worddistance][#worddistance]]
---------------------------------------------------------------------
This is a follow up of [[https://code.dennyzhang.com/shortest-word-distance][Shortest Word Distance]]. The only difference is now you are given the list of words and your method will be called repeatedly many times with different parameters. How would you optimize it?

Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 and word2 and return the shortest distance between these two words in the list.

For example,
#+BEGIN_EXAMPLE
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Given word1 = "coding", word2 = "practice", return 3.
Given word1 = "makes", word2 = "coding", return 1.
#+END_EXAMPLE

Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/shortest-word-distance-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/shortest-word-distance-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: hashmap
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/shortest-word-distance-ii
// Basic Ideas: hashmap
//   The problem is literally about: Find the mininum difference of two lists
//
// Complexity: Time O(n), Space O(n)
type WordDistance struct {
    index_map map[string][]int
}

func Constructor(words []string) WordDistance {
    m := map[string][]int{}
    for i, word := range words {
        m[word] = append(m[word], i)
    }
    return WordDistance{m}
}

func (this *WordDistance) Shortest(word1 string, word2 string) int {
    list1, list2 := this.index_map[word1], this.index_map[word2]
    res := 1<<31 - 1
    i, j := 0, 0
    for i<len(list1) && j<len(list2) {
        diff := list1[i]-list2[j]
        if diff<0 { diff = -diff }
        if diff<res { res = diff }
        if list1[i]>list2[j] { 
            j++
        } else { 
            i++
        }
    }
    return res
}

/**
 * Your WordDistance object will be instantiated and called as such:
 * obj := Constructor(words);
 * param_1 := obj.Shortest(word1,word2);
 */
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
