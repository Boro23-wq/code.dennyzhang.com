* Leetcode: Sum of Square Numbers                               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, math, sqrt, twosum, evaluatecomplexity
:END:
---------------------------------------------------------------------
Sum of Square Numbers
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/3sum-ii][LintCode: 3Sum II]]
- [[https://code.dennyzhang.com/review-twopointer][Review: TwoPointers Problems]]
- [[https://code.dennyzhang.com/review-math][Review: Math Problems]]
- [[https://code.dennyzhang.com/review-sqrt][Review: sqrt Problems]]
- Tag: [[https://code.dennyzhang.com/tag/math][#math]], [[https://code.dennyzhang.com/tag/twopointer][#twopointer]], [[https://code.dennyzhang.com/tag/sqrt][#sqrt]], [[https://code.dennyzhang.com/tag/evaluatecomplexity][#evaluatecomplexity]], [[https://code.dennyzhang.com/tag/twosum][#twosum]]
---------------------------------------------------------------------
Given a non-negative integer c, your task is to decide whether there're two integers a and b such that a*a + b*b = c.
#+BEGIN_EXAMPLE
Example 1:
Input: 5
Output: True
Explanation: 1 * 1 + 2 * 2 = 5
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: 3
Output: False
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-of-square-numbers][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sum-of-square-numbers/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/sum-of-square-numbers
## Basic Ideas: max(a, b) <= int(sqrt(c))
##              Then we convert it into a two-sum problem
##
##  Assumption: a, b can be 0
## Complexity: Time O(sqrt(n)), Space O(1)
class Solution(object):
    def judgeSquareSum(self, c):
        """
        :type c: int
        :rtype: bool
        """
        if c < 0:
            return False
        import math
        a, b = 0, int(math.sqrt(c))
        # a may equals b
        while a <= b:
            v = a*a + b*b
            if v == c:
                return True
            elif v > c:
                b -= 1
            else:
                a += 1
        return False
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
