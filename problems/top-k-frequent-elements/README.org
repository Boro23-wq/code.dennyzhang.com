* Leetcode: Top K Frequent Elements                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     heap, topk
:END:
---------------------------------------------------------------------
Top K Frequent Elements
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/top-k-frequent-elements"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/find-k-pairs-with-smallest-sums][LeetCode: Find K Pairs with Smallest Sums]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-heap][#heap]], [[https://code.dennyzhang.com/followup-topk][topk]]
---------------------------------------------------------------------
Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 <= k <= number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/top-k-frequent-elements][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/top-k-frequent-elements/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/top-k-frequent-elements
// Basic Ideas: heap
//
// Complexity: Time O(n*log(k)), Space O(n)
import "container/heap"

type MyNode struct {
    val int
    cnt int
}

// min heap
type IntHeap []MyNode
func (h IntHeap) Len() int           { return len(h) }
func (h IntHeap) Less(i, j int) bool { return h[i].cnt < h[j].cnt }
func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Push(x interface{}) {
	// Push and Pop use pointer receivers because they modify the slice's length,
	// not just its contents.
	*h = append(*h, x.(MyNode))
}

func (h *IntHeap) Pop() interface{} {
	res := (*h)[len(*h)-1]
	*h = (*h)[0:len(*h)-1]
	return res
}

func topKFrequent(nums []int, k int) []int {
    m := map[int]int{}
    for _, num := range nums{ m[num]++ }
    h := &IntHeap{}
    heap.Init(h)
    for key, val := range m {
        heap.Push(h, MyNode{val:key, cnt:val})
        if h.Len() > k { heap.Pop(h) }
    }
    res := make([]int, k)
    i:=k-1
    for h.Len() != 0 {
        item := heap.Pop(h).(MyNode)
        res[i] = item.val
        i--
    }
    return res
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/top-k-frequent-elements
## Basic Ideas: priority queue: heapq
##
## Complexity:
import collections, heapq
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        q = []
        heapq._heapify_max(q)
        m = collections.defaultdict(lambda: 0)
        for num in nums: m[num] += 1
        # python heapq doesn't support max heap by default
        for num in m: heapq.heappush(q, (-m[num], num))

        res = []
        for i in xrange(k):
            (count, num) = heapq.heappop(q)
            res.append(num)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
