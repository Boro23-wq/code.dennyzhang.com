* Leetcode: Target Sum                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     knapsack, dynamicprogramming
:END:
---------------------------------------------------------------------
Target Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/target-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-twosum][Series: TwoSum Problems & Follow-Up]]
- [[https://code.dennyzhang.com/expression-add-operators][Expression Add Operators]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-knapsack][#knapsack]], [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
#+BEGIN_EXAMPLE
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
#+END_EXAMPLE

Note:
- The length of the given array is positive and will not exceed 20.
- The sum of elements in the given array will not exceed 1000.
- Your output answer is guaranteed to be fitted in a 32-bit integer.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/target-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/target-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: knapsack
#+BEGIN_SRC python
## https://code.dennyzhang.com/target-sum
## Basic Ideas: knapsack
##
##   For each item, two choices
##
## Complexity: Time O(n*l), Space O(l)
class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        n = 2001
        dp = [0]*n
        dp[1000] = 1
        for v in nums:
            dp2 = [0]*n
            for i in range(n):
                ## add +
                if 0<=i+v<n: dp2[i+v] += dp[i]
                ## add -
                if 0<=i-v<n: dp2[i-v] += dp[i]
            dp = dp2
        return dp[S+1000] if 0<=S+1000<n else 0
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/target-sum
// Basic Ideas: BFS + hashmap
// Complexity: Time O(pow(2, n)), Space O(1)
//   The value would be in between -1000 and 1000
//   Thus Space is O(1)
func findTargetSumWays(nums []int, S int) int {
    m := make(map[int]int)
    m[0] = 1
    for _, num := range nums {
        m2 := make(map[int]int)
        for v := range m {
            m2[v+num] += m[v]
            m2[v-num] += m[v]
        }
        m = m2
    }
    return m[S]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
