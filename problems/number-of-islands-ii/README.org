* Leetcode: Number of Islands II                                 :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     unionfind, graph, graphchangecell, island
:END:
---------------------------------------------------------------------
Number of Islands II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-islands-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/followup-island][Series: Island & Follow-up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-graph][#graph]], [[https://code.dennyzhang.com/review-unionfind][#unionfind]], [[https://code.dennyzhang.com/review-graphchangecell][#graphchangecell]], [[https://code.dennyzhang.com/review-island][#island]]
---------------------------------------------------------------------
A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).
#+BEGIN_EXAMPLE
0 0 0
0 0 0
0 0 0
#+END_EXAMPLE

Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.
#+BEGIN_EXAMPLE
1 0 0
0 0 0   Number of islands = 1
0 0 0
#+END_EXAMPLE

Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.
#+BEGIN_EXAMPLE
1 1 0
0 0 0   Number of islands = 1
0 0 0
#+END_EXAMPLE

Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.
#+BEGIN_EXAMPLE
1 1 0
0 0 1   Number of islands = 2
0 0 0
#+END_EXAMPLE

Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.
#+BEGIN_EXAMPLE
1 1 0
0 0 1   Number of islands = 3
0 1 0
#+END_EXAMPLE
We return the result as an array: [1, 1, 2, 3]

Challenge:

Can you do it in time complexity O(k log mn), where k is the length of the positions?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-islands-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/number-of-islands-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/number-of-islands-ii
// Basic Ideas: unionfind
//
//  When add a new position, check with 4 adjacent cells
//  If no adjacent islands, increase the counter
//  Otherwise, the counter may be the same or decrease
//
// Complexity: Time O(m*n+k), Space O(m*n)
type UF struct {
    parent []int
    groupCnt int
}

func constructor(size int) UF {
    parent := make([]int, size)
    for i, _ := range parent {
        parent[i] = i
    }
    return UF{parent:parent}
}

func (uf *UF) union(x, y int) {
    n1, n2 := uf.find(x), uf.find(y)
    if n1 == n2 {
        return
    }
    if n1>n2{
        n1,n2 = n2,n1
        x,y = y,x
    }
    uf.parent[n2] = n1
    uf.groupCnt--
}

func (uf *UF) find(x int) int {
    // TODO: path compression
    for uf.parent[x] != x {
        x = uf.parent[x]
    }
    return x
}

func numIslands2(m int, n int, positions [][]int) []int {
    uf := constructor(m*n)
    grid := make([][]int, m)
    for i, _ := range grid {
        grid[i] = make([]int, n)
    }
    res := make([]int, len(positions))
    for k, p := range positions {
        i, j := p[0], p[1]
        // if current cell is already island, no change
        if grid[i][j] == 0 {
            grid[i][j] = 1
            uf.groupCnt++
            for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, []int{0, 1}, []int{0, -1}} {
                i2, j2 := i+offset[0], j+offset[1]
                if i2<0 || i2>=m || j2<0 || j2>=n {
                    continue
                }
                if grid[i2][j2] == 1 {
                    n1, n2 := i*n+j, i2*n+j2
                    uf.union(n1, n2)
                }
            }
        }
        res[k] = uf.groupCnt
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
