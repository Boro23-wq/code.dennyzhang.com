* Leetcode: Binary Subarrays With Sum                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     subarray, presum, inspiring, classic
:END:
---------------------------------------------------------------------
Binary Subarrays With Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-subarrays-with-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/subarray-product-less-than-k][Subarray Product Less Than K]]
- Tag: [[https://code.dennyzhang.com/tag/subarray][#subarray]], [[https://code.dennyzhang.com/tag/presum][#presum]], [[https://code.dennyzhang.com/tag/inspiring][#inspiring]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
In an array A of 0s and 1s, how many non-empty subarrays have sum S?

Example 1:
#+BEGIN_EXAMPLE
Input: A = [1,0,1,0,1], S = 2
Output: 4
Explanation: 
The 4 subarrays are bolded below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
#+END_EXAMPLE
 
Note:

1. A.length <= 30000
- 0 <= S <= A.length
- A[i] is either 0 or 1.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-subarrays-with-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/binary-subarrays-with-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/binary-subarrays-with-sum
// Basic Ideas: Presum + Dynamic Programming
//     Count how many subarray ends with current item
// Complexity: Time O(n), Space (n)
func numSubarraysWithSum(A []int, S int) int {
    res, preSum := 0, 0
    h := map[int]int{0: 1}
    for _, v := range A {
       preSum += v
       res += h[preSum - S]
       h[preSum]++
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
