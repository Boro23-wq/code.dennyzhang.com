* Leetcode: Range Sum of BST                                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Range Sum of BST
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/range-sum-of-bst"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]]
---------------------------------------------------------------------
Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example 1:
#+BEGIN_EXAMPLE
Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
#+END_EXAMPLE
 
Note:

1. The number of nodes in the tree is at most 10000.
- The final answer is guaranteed to be less than 2^31.


Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/range-sum-of-bst][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/range-sum-of-bst/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/range-sum-of-bst
// Basic Ideas:
// Complexity: Time O(n), Space O(1)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func rangeSumBST(root *TreeNode, L int, R int) int {
    if root == nil { return 0 }
    res := 0
    if root.Val < L {
        res = rangeSumBST(root.Right, L, R)
    } else {
        if root.Val >= L && root.Val <= R {
            res = root.Val + rangeSumBST(root.Left, L, R) + rangeSumBST(root.Right, L, R)
        } else {
            res = rangeSumBST(root.Left, L, R)
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
