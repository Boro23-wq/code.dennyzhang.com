* Leetcode: Sum Root to Leaf Numbers                  :BLOG:Basic:
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+STARTUP: showeverything
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Basic tree traverse
---------------------------------------------------------------------
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

#+BEGIN_EXAMPLE
For example,
    1
   / \
  2   3
#+END_EXAMPLE

The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/sum-root-to-leaf-numbers][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/sum-root-to-leaf-numbers/description/][leetcode.com]]

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/sum-root-to-leaf-numbers
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        ## Idea: BFS
        ## Complexity:
        res = 0
        if root is None:
            return 0
        queue = []
        queue.append((root, root.val))
        while len(queue) != 0:
            (node, value) = queue[0]
            del queue[0]
            if node.left:
                queue.append((node.left, value*10 + node.left.val))
            if node.right:
                queue.append((node.right, value*10 + node.right.val))
            # left node
            if node.left is None and node.right is None:
                res += value
        return res
#+END_SRC
