* Leetcode: Sum Root to Leaf Numbers                  :BLOG:Basic:
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+STARTUP: showeverything
:PROPERTIES:
:type:     binarytree
:END:
---------------------------------------------------------------------
Basic tree traverse
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/example"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]]
---------------------------------------------------------------------
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

#+BEGIN_EXAMPLE
For example,
    1
   / \
  2   3
#+END_EXAMPLE

The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-root-to-leaf-numbers][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sum-root-to-leaf-numbers/description/][leetcode.com]]

#+BEGIN_SRC python
## https://code.dennyzhang.com/sum-root-to-leaf-numbers
## Idea: BFS
## Complexity: Time O(n), Space O(1)
class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        res = 0
        if root is None:
            return 0
        queue = []
        queue.append((root, root.val))
        while len(queue) != 0:
            (node, value) = queue[0]
            del queue[0]
            if node.left:
                queue.append((node.left, value*10 + node.left.val))
            if node.right:
                queue.append((node.right, value*10 + node.right.val))
            # left node
            if node.left is None and node.right is None:
                res += value
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
