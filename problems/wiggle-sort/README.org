* Leetcode: Wiggle Sort                                         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     wigglesort
:END:
---------------------------------------------------------------------
Wiggle Sort
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/rearrange][LintCode: Rearrange]]
- [[https://code.dennyzhang.com/wiggle-sort-ii][Wiggle Sort II]]
- [[https://code.dennyzhang.com/tag/wigglesort][Tag: #wigglesort]]
---------------------------------------------------------------------
#+BEGIN_EXAMPLE
Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/wiggle-sort][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/wiggle-sort/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/wiggle-sort
// Basic Ideas: Compare current node with the previous node
// Complexity: Time O(n), Space O(1)
func wiggleSort(nums []int)  {
    for i := 1; i<len(nums); i++ {
        if i%2 == 1 {
            if nums[i] < nums[i-1] {
                nums[i-1], nums[i] = nums[i], nums[i-1]
            }
        } else {
            if nums[i] > nums[i-1] {
                nums[i-1], nums[i] = nums[i], nums[i-1]
            }
        }
    }
}
#+END_SRC
