* Leetcode: Partition Array Into Three Parts With Equal Sum      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     inspiring
:END:
---------------------------------------------------------------------
Partition Array Into Three Parts With Equal Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-into-three-parts-with-equal-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/review-linkedlist][Review: Linked List Problems]]
- Tag: [[https://code.dennyzhang.com/tag/linkedlist][#linkedlist]]
---------------------------------------------------------------------
Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])

Example 1:
#+BEGIN_EXAMPLE
Input: [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
#+END_EXAMPLE
 
Note:

1. 3 <= A.length <= 50000
- -10000 <= A[i] <= 10000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-into-three-parts-with-equal-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/partition-array-into-three-parts-with-equal-sum
// Basic Ideas: Check the first and the third part
// Complexity: Time O(n), Space O(1)
func canThreePartsEqualSum(A []int) bool {
    sum := 0
    for _, v := range A { sum += v }
    if sum%3 != 0 || len(A) < 3 { return false }
    target := int(sum/3)
    
    i, j := 0, len(A)-1
    curSum := A[0]

    i++
    for curSum != target && i+1<=j {
        curSum += A[i]
        i++
    }
    if curSum != target { return false }
    
    curSum = A[j]
    j--
    for curSum != target && i+1<=j {
        curSum += A[j]
        j--
    }
    if curSum != target { return false }

    return true
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
