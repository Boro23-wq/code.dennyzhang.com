* Leetcode: Missing Number                                     :BLOG:Amusing:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     countsort
:END:
---------------------------------------------------------------------
Identity the missing number
---------------------------------------------------------------------
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
#+BEGIN_EXAMPLE
Example 1

Input: [3,0,1]
Output: 2
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
#+END_EXAMPLE

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/missing-number][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/missing-number/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## https://code.dennyzhang.com/missing-number
class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ## Idea: Use xor
        ## Complexity: Time O(n), Space O(1)
        n = len(nums)
        xor_value = 0
        for i in range(0, n):
            xor_value = xor_value ^ (i+1) ^ nums[i]

        return xor_value

    def missingNumber2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ## Idea: Use xor
        ## Complexity: Time O(n), Space O(1)
        n = len(nums)
        xor_value = 0
        for i in range(0, n+1):
            xor_value = xor_value ^ i

        for i in range(0, n):
            xor_value = xor_value ^ nums[i]
        return xor_value

    def missingNumber1(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        ## Idea: caculated the desired sum. Then add up all the numbers. Do the substraction.
        ## Complexity: Time O(n), Space O(1)
        n = len(nums)
        supposed_sum = (n * (n+1))/2
        for i in range(0, n):
            supposed_sum -= nums[i]
        return supposed_sum
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
