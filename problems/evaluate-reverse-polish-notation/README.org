* Leetcode: Evaluate Reverse Polish Notation                     :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math, stack, expression
:END:
---------------------------------------------------------------------
Evaluate Reverse Polish Notation
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-reverse-polish-notation"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/review-math][Review: Math Problems]]
- Tag: [[https://code.dennyzhang.com/review-math][#math]], [[https://code.dennyzhang.com/review-stack][#stack]], [[https://code.dennyzhang.com/tag/expression][#expression]]
---------------------------------------------------------------------
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-reverse-polish-notation][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/evaluate-reverse-polish-notation/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/evaluate-reverse-polish-notation
## Basic Ideas: Use stack
## Complexity: Time O(n), Space O(n)
class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        length = len(tokens)
        if length == 0:
            return None

        stack = []
        for token in tokens:
            if token not in '+-*/':
                stack.append(int(token))
            else:
                num2 = int(stack.pop())
                num1 = int(stack.pop())
                if token == '+':
                    v = num1+num2
                if token == '-':
                    v = num1-num2
                if token == '*':
                    v = num1*num2
                if token == '/':
                    if num1*num2 < 0:
                        v = abs(num1)/abs(num2)
                        v = -v
                    else:
                        v = num1/num2
                stack.append(v)
                #print stack[-1]
        return stack.pop()

# s = Solution()
# print s.evalRPN(["10","6","9","3","+","-11","*","/","*","17","+","5","+"]) # 22
# print s.evalRPN(["2", "1", "+", "3", "*"]) # 9
# print s.evalRPN(["4", "13", "5", "/", "+"]) # 6
# print s.evalRPN(["18"]) # 18
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
