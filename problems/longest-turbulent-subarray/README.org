* Leetcode: Longest Turbulent Subarray                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming
:END:
---------------------------------------------------------------------
Longest Turbulent Subarray
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-turbulent-subarray"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.
That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

Return the length of a maximum size turbulent subarray of A.

Example 1:
#+BEGIN_EXAMPLE
Input: [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: (A[1] > A[2] < A[3] > A[4] < A[5])
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [4,8,12,16]
Output: 2
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: [100]
Output: 1
#+END_EXAMPLE
 
Note:

1. 1 <= A.length <= 40000
- 0 <= A[i] <= 10^9

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/longest-turbulent-subarray][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/longest-turbulent-subarray/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/longest-turbulent-subarray
// Basic Ideas: dynamic programming
//   9,4,2,10,7,8,8,1,9
// I 1,1,1,3,1,5,1,1,3
// D 1,2,2,1,4,1,1,2,2
// Complexity: Time O(n), Space O(1)
func maxTurbulenceSize(A []int) int {
    res := 1
    iCnt, dCnt := 1, 1
    for i:=1; i<len(A); i++ {
        if A[i] == A[i-1] {
            iCnt, dCnt = 1, 1
        } else {
            if A[i] > A[i-1] {
                iCnt, dCnt = dCnt+1, 1
                if iCnt > res { res = iCnt }
            } else {
                iCnt, dCnt = 1, iCnt+1
                if dCnt > res { res = dCnt }
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
