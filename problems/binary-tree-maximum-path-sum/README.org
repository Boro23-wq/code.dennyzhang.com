* Leetcode: Binary Tree Maximum Path Sum                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, pathsum
:END:
---------------------------------------------------------------------
Binary Tree Maximum Path Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/example"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]], [[https://code.dennyzhang.com/followup-pathsum][#pathsum]]
---------------------------------------------------------------------
Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.
#+BEGIN_EXAMPLE
For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/binary-tree-maximum-path-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/binary-tree-maximum-path-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/binary-tree-maximum-path-sum
// Basic Ideas: post-order + dynamic programming
//   helper function: dfs, return the maximum which ends with current node
// Complexity: Time O(n), Space O(1)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func dfs(root *TreeNode, res *int) int {
    if root == nil { return 0 }
    l := dfs(root.Left, res)
    r := dfs(root.Right, res)
    v := root.Val
    if l>0 { v += l }
    if r>0 { v += r }
    if v>*res { *res = v }
    vres := root.Val
    if vres < root.Val+l { vres = root.Val+l }
    if vres < root.Val+r { vres = root.Val+r }
    return vres
}

func maxPathSum(root *TreeNode) int {
    res := -1<<32
    dfs(root, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
