* Leetcode: Maximum Depth of Binary Tree                         :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, heightoftree, classic
:END:
---------------------------------------------------------------------
Maximum Depth of Binary Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/most-stones-removed-with-same-row-or-column"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-binarytree][#binarytree]], [[https://code.dennyzhang.com/tag/heightoftree][#heightoftree]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-depth-of-binary-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-depth-of-binary-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-depth-of-binary-tree
// Basic Ideas: dfs postorder
// Complexity: Time O(log(n)), Space O(log(n))
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func dfs(root *TreeNode) int {
    if root == nil { return 0 }
    lh := dfs(root.Left)
    rh := dfs(root.Right)
    res := lh
    if rh > res { res = rh }
    return res+1
}

func maxDepth(root *TreeNode) int {
    return dfs(root)
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/maximum-depth-of-binary-tree
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        ## Idea: DFS
        ## Complexity:
        depth = None
        if root is None:
            return 0
        if (root.left is None) and (root.right is None):
            return 1
        elif (root.left is None):
            return self.maxDepth(root.right)+1
        elif (root.right is None):
            return self.maxDepth(root.left)+1
        else:
            return max(self.maxDepth(root.left)+1, self.maxDepth(root.right)+1)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
