* LintCode: Order Problem                                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     knapsack, classic
:END:
---------------------------------------------------------------------
Order Problem
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/order-problem"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/ones-and-zeroes][Ones and Zeroes]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/knapsack][#knapsack]]
---------------------------------------------------------------------
Description
#+BEGIN_EXAMPLE
There is now an order with demand for n items, and the demand for the i-th item is order[i]. The factory has m production modes. Each production mode is shaped like [p[1],p[2],...p[n]], that is, produce p[1] first items, p[2] second items... You can use multiple production modes. Please tell me how many items do not meet the demand at least in the case of not exceeding the demand of any kind of items?
#+END_EXAMPLE

- 1 <= n, m <= 7
- 1 <= order[i] <= 10
- 0 <= pattern[i][j] <= 10

#+BEGIN_EXAMPLE
Example
Given order=[2,3,1], pattern=[[2,2,0],[0,1,1],[1,1,0]] , return 0.

Explanation:
Use [0,1,1] once, [1,1,0] twice, remaining [0,0,0].
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Given order=[2,3,1], pattern=[[2,2,0]] , return 2.

Explanation:
Use [2,2,0] once, remaining [0,1,1].
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/order-problem][code.dennyzhang.com]]

Credits To: [[https://www.lintcode.com/problem/order-problem/description][lintcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: BFS

[[https://code.dennyzhang.com/tag/knapsack][#knapsack]] problem, [[https://code.dennyzhang.com/ones-and-zeroes][Ones and Zeroes]]

#+BEGIN_SRC go
// https://code.dennyzhang.com/order-problem
// Basic Ideas: BFS
// Complexity:
type Item struct {
  sum int
  pattern []int
}

func getMinRemaining (order []int, pattern [][]int) int {
    total_sum := 0
    for _, v := range order { total_sum += v }
    sum_list := make([]int, len(pattern))
    
    res := total_sum
    queue := []Item{}
    for i, p := range pattern {
        could_match := true
        for j, v:= range p {
            sum_list[i] += v
            if v > order[j] { could_match = false }
        }
        if sum_list[i]!=0 && could_match {
            queue = append(queue, Item{sum_list[i], p})
            if res > total_sum - sum_list[i] { res = total_sum - sum_list[i] }
        }
    }

    for len(queue) != 0 {
        l := []Item{}
        for _, item := range queue {
            for i, p := range pattern {
                j := 0
                newPattern := []int{}
                diff := total_sum - (sum_list[i] + item.sum)
                if diff >= 0 {
                    for j<len(order) && p[j]+item.pattern[j]<=order[j] {
                        newPattern = append(newPattern, p[j]+item.pattern[j])
                        j++
                    }
                }
                if j == len(order) {
                    if diff ==0 { return 0 }
                    l = append(l, Item{sum_list[i] + item.sum, newPattern})
                    if (diff < res) { res = diff }

                }
            }
        }
        queue = []Item{}
        for _, item := range l { queue = append(queue, item) }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
