* Leetcode: All Possible Full Binary Trees                       :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarytree, dynamicprogramming, redo
:END:
---------------------------------------------------------------------
All Possible Full Binary Trees
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/all-possible-full-binary-trees"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/unique-binary-search-trees-ii][Leetcode: Unique Binary Search Trees II]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/binarytree][#binarytree]],  [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.

Each node of each tree in the answer must have node.val = 0.

You may return the final list of trees in any order.

Example 1:
#+BEGIN_EXAMPLE
Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Explanation:
#+END_EXAMPLE

[[Leetcode: All Possible Full Binary Trees][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/fivetrees.png]]
 
Note:

- 1 <= N <= 20

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/all-possible-full-binary-trees][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/all-possible-full-binary-trees/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Recursive

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/all-possible-full-binary-trees
// Basic Ideas: Recursive
// If n is even, return nil
//
// Complexity: Time O(2^n), Space O(2^n)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
var m map[int][]*TreeNode

func allPossibleFBT(N int) []*TreeNode {
    if N%2 == 0 { return []*TreeNode{} }
	if len(m) == 0 {
		m = map[int][]*TreeNode{}
	}
    v, ok := m[N]
    if ok { return v }
    
    if N == 1 {
        m[N] = []*TreeNode{&TreeNode{0, nil, nil}}
        return m[N]
    }

    res := []*TreeNode{}
    for i:= 1; i < N; i += 2 {
        l1, l2 := allPossibleFBT(i), allPossibleFBT(N-1-i)
        for _, p := range l1 {
            for _, q := range l2 {
                res = append(res, &TreeNode{0, p, q})
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
