* Leetcode: Maximal Square                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, inspiring
:END:
---------------------------------------------------------------------
Maximal Square
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximal-square"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/unique-paths][Unique Paths]]
- [[https://code.dennyzhang.com/review-dynamicprogramming][Review: Dynamic Programming Problems]]
- Tag: [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/inspiring][#inspiring]]
---------------------------------------------------------------------
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

For example, given the following matrix:
#+BEGIN_EXAMPLE
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
#+END_EXAMPLE
Return 4.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximal-square][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximal-square/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/maximal-square
// Basic Ideas: dynamic programming
// dp[i][j]: length of the rectangle
//    dp[i][j] = min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j]) + 1
//
// We can do it with one pass
// Let's assume we can change the original matrix
// Thus we don't need extra space
//
// Complexity: Time O(n*m), Space O(1)
func maximalSquare(matrix [][]byte) int {
    row_count := len(matrix)
    if row_count == 0 { return 0 }
    col_count := len(matrix[0])
    res := 0
    // initialize counter for corner case
    for i:=0; i<row_count; i++ {
        if matrix[i][0] == '1' { res = 1 }
    }
    for j:=0; j<col_count; j++ {
        if matrix[0][j] == '1' { res = 1 }
    }
    for i:=1; i<row_count; i++ {
        for j:=1; j<col_count; j++ {
            if (matrix[i][j] == '1') {
                v := int(matrix[i-1][j-1])-48
                if v>int(matrix[i-1][j])-48 { v=int(matrix[i-1][j])-48 }
                if v>int(matrix[i][j-1])-48 { v=int(matrix[i][j-1])-48 }
                v += 1
                matrix[i][j] = byte(v+48)
                if v > res { res = v }
            }
        }
    }
    return res*res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
