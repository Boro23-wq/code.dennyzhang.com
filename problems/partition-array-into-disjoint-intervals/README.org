* Leetcode: Partition Array into Disjoint Intervals              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     inspiring, splitarray
:END:
---------------------------------------------------------------------
Partition Array into Disjoint Intervals
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-into-disjoint-intervals"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/inspiring][#inspiring]], [[https://code.dennyzhang.com/tag/splitarray][#splitarray]]
---------------------------------------------------------------------
Given an array A, partition it into two (contiguous) subarrays left and right so that:

Every element in left is less than or equal to every element in right.
left and right are non-empty.
left has the smallest possible size.
Return the length of left after such a partitioning.  It is guaranteed that such a partitioning exists.

Example 1:
#+BEGIN_EXAMPLE
Input: [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
#+END_EXAMPLE
 
Note:

1. 2 <= A.length <= 30000
- 0 <= A[i] <= 10^6
- It is guaranteed there is at least one way to partition A as described.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/partition-array-into-disjoint-intervals][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/partition-array-into-disjoint-intervals/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/partition-array-into-disjoint-intervals
// Basic Ideas:
// max: maximum for the target left window
// global_max: maximum from the first element to the current one
//    If A[i] < max, we update max with global_max
// Complexity: Time O(n), Space O(1)
func partitionDisjoint(A []int) int {
    max, global_max, res := A[0], A[0], 1
    for i:= 1; i<len(A); i++ {
        if A[i] < max {
            max = global_max
            res = i+1
        } else {
           if A[i] > global_max { global_max = A[i] }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
