* Leetcode: Encode and Decode Strings                            :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, classic, oodesign
:END:
---------------------------------------------------------------------
Encode and Decode Strings
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/encode-and-decode-strings"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-string][#string]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-oodesign][#oodesign]]
---------------------------------------------------------------------
Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:
#+BEGIN_EXAMPLE
string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
#+END_EXAMPLE

Machine 2 (receiver) has the function:
#+BEGIN_EXAMPLE
vector<string> decode(string s) {
  //... your code
  return strs;
}
#+END_EXAMPLE

So Machine 1 does:
#+BEGIN_EXAMPLE
string encoded_string = encode(strs);
#+END_EXAMPLE
and Machine 2 does:
#+BEGIN_EXAMPLE
vector<string> strs2 = decode(encoded_string);
#+END_EXAMPLE

strs2 in Machine 2 should be the same as strs in Machine 1.

Implement the encode and decode methods.

Note:
- The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.
- Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.
- Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/encode-and-decode-strings][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/encode-and-decode-strings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Encode with length

#+BEGIN_SRC python
## https://code.dennyzhang.com/encode-and-decode-strings
## Basic Ideas:
## [count_of_strings] [length1] string1[length2] string2...
## Complexity:
class Codec:

    def encode(self, strs):
        """Encodes a list of strings to a single string.
        
        :type strs: List[str]
        :rtype: str
        """
        res = "%d " % len(strs)
        for s in strs:
            res = "%s%d %s" % (res, len(s), s)
        return res

    def decode(self, s):
        """Decodes a single string to a list of strings.
        
        :type s: str
        :rtype: List[str]
        """
        if s == "": return []
        res = []
        i = 0
        while s[i] != ' ': i += 1
        count = int(s[0:i])
        i += 1

        for k in range(count):
            # get length
            j = i
            while s[j] != ' ': j += 1
            length = int(s[i:j])
            i = j+1
            # get string
            res.append(s[i:i+length])
            i = i+length
        return res

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(strs))
#+END_SRC
---------------------------------------------------------------------
- Solution: Encode with length
#+BEGIN_SRC python
## https://code.dennyzhang.com/encode-and-decode-strings
## Basic Ideas:
## [length1] string1[length2] string2...
## Complexity:
class Codec:

    def encode(self, strs):
        """Encodes a list of strings to a single string.
        
        :type strs: List[str]
        :rtype: str
        """
        res = ""
        for s in strs:
            res = "%s%d %s" % (res, len(s), s)
        return res

    def decode(self, s):
        """Decodes a single string to a list of strings.
        
        :type s: str
        :rtype: List[str]
        """
        if s == "": return []
        res = []
        i = 0
        while i<len(s):
            # get length
            j = i
            while s[j] != ' ': j += 1
            length = int(s[i:j])
            i = j+1+length
            # get string
            res.append(s[j+1:i])
        return res


# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(strs))
#+END_SRC
---------------------------------------------------------------------
- Solution: Use invisible character as separator
#+BEGIN_SRC python
## https://code.dennyzhang.com/encode-and-decode-strings
## Basic Ideas:
## Use invisible character as separator
## Differentiate two cases: empty list, items with empty strings
## Complexity:
class Codec:

    def encode(self, strs):
        """Encodes a list of strings to a single string.
        :type strs: List[str]
        :rtype: str
        """
        if len(strs) == 0: return "\n"
        return "\t".join(strs)

    def decode(self, s):
        """Decodes a single string to a list of strings.
        :type s: str
        :rtype: List[str]
        """
        if s == "\n": return []
        return s.split('\t')
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
