* LeetCode: Evaluate Boolean Expression                         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     sql
:END:
---------------------------------------------------------------------
Evaluate Boolean Expression
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-boolean-expression"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-mysql-A4][CheatSheet: SQL & MySql]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: LeetCode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-sql][#sql]]
---------------------------------------------------------------------
Table Variables:
#+BEGIN_EXAMPLE
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| name          | varchar |
| value         | int     |
+---------------+---------+
name is the primary key for this table.
This table contains the stored variables and their values.
#+END_EXAMPLE
 
Table Expressions:
#+BEGIN_EXAMPLE
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| left_operand  | varchar |
| operator      | enum    |
| right_operand | varchar |
+---------------+---------+
(left_operand, operator, right_operand) is the primary key for this table.
This table contains a boolean expression that should be evaluated.
operator is an enum that takes one of the values ('<', '>', '=')
The values of left_operand and right_operand are guaranteed to be in the Variables table.
#+END_EXAMPLE
 
Write an SQL query to evaluate the boolean expressions in Expressions table.

Return the result table in any order.

The query result format is in the following example.
#+BEGIN_EXAMPLE
Variables table:
+------+-------+
| name | value |
+------+-------+
| x    | 66    |
| y    | 77    |
+------+-------+

Expressions table:
+--------------+----------+---------------+
| left_operand | operator | right_operand |
+--------------+----------+---------------+
| x            | >        | y             |
| x            | <        | y             |
| x            | =        | y             |
| y            | >        | x             |
| y            | <        | x             |
| x            | =        | x             |
+--------------+----------+---------------+

Result table:
+--------------+----------+---------------+-------+
| left_operand | operator | right_operand | value |
+--------------+----------+---------------+-------+
| x            | >        | y             | false |
| x            | <        | y             | true  |
| x            | =        | y             | false |
| y            | >        | x             | true  |
| y            | <        | x             | false |
| x            | =        | x             | true  |
+--------------+----------+---------------+-------+
As shown, you need find the value of each boolean exprssion in the table using the variables table.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/evaluate-boolean-expression][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/evaluate-boolean-expression/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC sql
## https://code.dennyzhang.com/evaluate-boolean-expression
# nested inner join can trim the volume of the intermediate table, which gives us better performance
select t.left_operand, t.operator, t.right_operand, 
    (case when v1_value>v2.value and operator = '>' then "true"
          when v1_value<v2.value and operator = '<' then "true"
          when v1_value=v2.value and operator = '=' then "true"
          else "false"
          end) as value
from 
   (select e.*, v1.value as v1_value
    from Expressions as e inner join Variables as v1
    on e.left_operand = v1.name) as t inner join Variables as v2 
    on t.right_operand = v2.name
#+END_SRC

- Solution:

#+BEGIN_SRC sql
## https://code.dennyzhang.com/evaluate-boolean-expression
select t.left_operand, t.operator, t.right_operand, 
    (case when operator = '>' then if(v1_value>v2.value, "true", "false")
          when operator = '<' then if(v1_value<v2.value, "true", "false")
          when operator = '=' then if(v1_value=v2.value, "true", "false")
          end) as value
from 
   (select e.*, v1.value as v1_value
    from Expressions as e inner join Variables as v1
    on e.left_operand = v1.name) as t inner join Variables as v2 
    on t.right_operand = v2.name
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
