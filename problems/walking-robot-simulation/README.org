* Leetcode: Walking Robot Simulation                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     walkrobot
:END:
---------------------------------------------------------------------
Walking Robot Simulation
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/walking-robot-simulation"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/walkrobot][#walkrobot]]
---------------------------------------------------------------------
A robot on an infinite grid starts at point (0, 0) and faces north.  The robot can receive one of three possible types of commands:

- -2: turn left 90 degrees
- -1: turn right 90 degrees
- 1 <= x <= 9: move forward x units
Some of the grid squares are obstacles. 

The i-th obstacle is at grid point (obstacles[i][0], obstacles[i][1])

If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)

Return the square of the maximum Euclidean distance that the robot will be from the origin.

Example 1:
#+BEGIN_EXAMPLE
Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: robot will go to (3, 4)
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)
#+END_EXAMPLE
 
Note:

1 .0 <= commands.length <= 10000
- 0 <= obstacles.length <= 10000
- -30000 <= obstacle[i][0] <= 30000
- -30000 <= obstacle[i][1] <= 30000
- The answer is guaranteed to be less than 2 ^ 31.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/walking-robot-simulation][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/walking-robot-simulation/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/walking-robot-simulation
// Basic Ideas: simulate step by step
// Note: case 3: 1 <= x <= 9: move forward x units
// Complexity: Time O(n+k), Space O(k)
//   k = len(obstacles)
func robotSim(commands []int, obstacles [][]int) int {
    res := 0
    // clock-wise: turn left
    d := [][]int {[]int{0, 1}, []int{-1, 0}, []int{0, -1}, []int{1, 0}}
    obstacles_dict := map[string]bool{}
    for _, o := range obstacles {
        s := fmt.Sprintf("%d-%d", o[0], o[1])
        obstacles_dict[s] = true
    }
    x, y, index := 0, 0, 0
    for _, c := range commands {
        if c == -2 {
            index = (index+1)%4
        } else {
            if c == -1 {
                index = (index-1+4)%4
            } else {
                for i:=0; i<c; i++ {
                    x2, y2 := x+d[index][0], y+d[index][1]
                    s := fmt.Sprintf("%d-%d", x2, y2)
                    if obstacles_dict[s] {
                        break
                    }
                    x, y = x2, y2
                    item := x*x+y*y
                    if res < item { res = item }
                }
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
