* Leetcode: Number of Islands                                    :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dfs, codetemplate, graph, island
:END:
---------------------------------------------------------------------
Number of Islands
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-islands"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/island-city][Island City]]
- [[https://code.dennyzhang.com/followup-island][Series: Island & Follow-up]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-graph][#graph]], [[https://code.dennyzhang.com/review-dfs][#dfs]], [[https://code.dennyzhang.com/review-bfs][#bfs]], [[https://code.dennyzhang.com/tag/island][#island]]
---------------------------------------------------------------------
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
#+BEGIN_EXAMPLE
Example 1:

11110
11010
11000
00000
Answer: 1
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:

11000
11000
00100
00011
Answer: 3
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/number-of-islands][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/number-of-islands/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/number-of-islands
class Solution(object):
    ## Basic Ideas: Avoid duplicate counting.
    ##   Mark all adjacent 1 to X. Thus we can avoid counting one the same island multiple times.
    ##
    ## Complexity: Time O(m*n), Space O(1)
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        self.row_count = len(grid)
        if self.row_count == 0: return 0
        self.col_count = len(grid[0])

        res = 0
        for i in xrange(self.row_count):
            for j in xrange(self.col_count):
                if grid[i][j] == '1':
                    res += 1
                    self.DFSMark(grid, i, j)
        return res

    def DFSMark(self, grid, i, j):
        if i < 0 or i >= self.row_count \
            or j < 0 or j >= self.col_count:
            return

        # stop digging, if not '1'
        if grid[i][j] != '1': return

        grid[i][j] = 'X'
        # mark four positions in a recursive way
        self.DFSMark(grid, i-1, j)
        self.DFSMark(grid, i+1, j)
        self.DFSMark(grid, i, j-1)
        self.DFSMark(grid, i, j+1)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
