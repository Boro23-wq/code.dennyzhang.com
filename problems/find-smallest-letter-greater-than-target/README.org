* Leetcode: Find Smallest Letter Greater Than Target                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, redo
:END:
---------------------------------------------------------------------
Find Smallest Letter Greater Than Target
---------------------------------------------------------------------
Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around. For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.

Examples:
#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "a"
Output: "c"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "c"
Output: "f"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "d"
Output: "f"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "g"
Output: "j"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "j"
Output: "c"
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input:
letters = ["c", "f", "j"]
target = "k"
Output: "c"
#+END_EXAMPLE

Note:

1. letters has a length in range [2, 10000].
- letters consists of lowercase letters, and contains at least 2 unique letters.
- target is a lowercase letter.



Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-smallest-letter-greater-than-target][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/find-smallest-letter-greater-than-target
// Basic Ideas: binary search
//
// How to check, drop and move?
//      If target == middle, check the right half
//            left = mid+1
//      If target > middle, check the right half
//            left = mid+1
//      If target < middle, check the left half
//            right = mid
//
// When to stop?
//      left < right: adjacent with two elements
//
// Corner cases:
//      No letter is greater than the target
//
// Complexity: Time O(log(n)) Space O(1)
func nextGreatestLetter(letters []byte, target byte) byte {
    // corner case: all letters smaller than the target
    if target >= letters[len(letters)-1] {
        return letters[0]
    }
    left, right := 0, len(letters)-1
    for left < right {
        mid := (right-left)/2 + left
        if letters[mid] <= target {
            left = mid+1
        } else {
            right = mid
        }
    }
    return letters[right]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
