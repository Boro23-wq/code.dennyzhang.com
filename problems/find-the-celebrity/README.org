* Leetcode: Find the Celebrity                                   :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     graph, inspiring
:END:
---------------------------------------------------------------------
Find the Celebrity
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-the-celebrity"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-graph][#graph]], [[https://code.dennyzhang.com/review-inspiring][#inspiring]]
---------------------------------------------------------------------
Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them.

Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: "Hi, A. Do you know B?" to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).

You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n). There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return -1.
 
Example 1:
[[image-blog:Leetcode: Find the Celebrity][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/find-the-celebrity/graph1.png]]
#+BEGIN_EXAMPLE
Input: graph = [
  [1,1,0],
  [0,1,0],
  [1,1,1]
]
Output: 1
Explanation: There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.
#+END_EXAMPLE

Example 2:
[[image-blog:Leetcode: Find the Celebrity][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/find-the-celebrity/graph2.png]]
#+BEGIN_EXAMPLE
Input: graph = [
  [1,0,1],
  [1,1,0],
  [0,1,1]
]
Output: -1
Explanation: There is no celebrity.
#+END_EXAMPLE
 
Note:

1. The directed graph is represented as an adjacency matrix, which is an n x n matrix where a[i][j] = 1 means person i knows person j while a[i][j] = 0 means the contrary.
- Remember that you won't have direct access to the adjacency matrix.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-the-celebrity][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-the-celebrity/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/find-the-celebrity
// Basic Ideas:
//  Notice: 
//    If A knows B then B knows C, A doesn't necessarily know C
// Complexity: Time O(n^2), Space O(n)
/**
 * The knows API is already defined for you.
 *     knows := func(a int, b int) bool
 */
func solution(knows func(a int, b int) bool) func(n int) int {
    return func(n int) int {
        candidates := make([]bool, n)
        for i, _ := range candidates {
            candidates[i] = true
        }
        l := make([]int, n)
        for i:=0; i<n; i++ {
            for j:=0; j<n; j++ {
                if i==j {
                    continue
                }
                if knows(i, j) {
                    candidates[i] = false
                    l[j]++
                }
            }
        }
        for i:=0; i<n; i++ {
            if candidates[i] && l[i] == n-1 {
                return i
            }
        }
        return -1
    }
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
