* Leetcode: Permutations II                                      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, backtracking, inspiring
:END:
---------------------------------------------------------------------
Permutations II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/permutations-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-combination][#combination]], [[https://code.dennyzhang.com/review-backtracking][#backtracking]]
---------------------------------------------------------------------
Given a collection of numbers that might contain duplicates, return all possible unique permutations.
#+BEGIN_EXAMPLE
For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/permutations-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/permutations-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/permutations-ii
// Basic Ideas: backtracking
//
// Complexity: Time O(n!), Space O(1)
import "sort"

func dfs(combination []int, visited []bool, nums []int, res *[][]int) {
    if len(combination) == len(nums) {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
        return
    }

    for i, b := range visited {
        if b { 
            continue
        }
        // avoid duplicated caculation
        if i>0 && nums[i-1] == nums[i] && ! visited[i-1] {
            continue
        }
        combination = append(combination, nums[i])
        visited[i] = true
        dfs(combination, visited, nums, res)
        visited[i] = false
        combination = combination[0:len(combination)-1]
    }
}

func permuteUnique(nums []int) [][]int {
    sort.Ints(nums)        
    res := [][]int{}
    visited := make([]bool, len(nums))
    dfs([]int{}, visited, nums, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
