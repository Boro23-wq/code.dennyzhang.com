* Leetcode: Best Time to Buy and Sell Stock with Cooldown       :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, buystock
:END:
---------------------------------------------------------------------
Best Time to Buy and Sell Stock with Cooldown
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/best-time-to-buy-and-sell-stock-with-cooldown"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/followup-buystock][#buystock]]
---------------------------------------------------------------------
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
#+BEGIN_EXAMPLE
Example:

Input: [1,2,3,0,2]
Output: 3 
Explanation: transactions = [buy, sell, cooldown, buy, sell]
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/best-time-to-buy-and-sell-stock-with-cooldown][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: dp + O(n) space

#+BEGIN_SRC go
// https://code.dennyzhang.com/best-time-to-buy-and-sell-stock-with-cooldown
// Basic Ideas: dynamic programming
//
//  dp(i, 0): has a stock
//  dp(i, 1): doesn't have a stock
//
//   dp(i, 0) = max(dp(i-1, 0), dp(i-2, 1)-prices[i]) 
//                              buy with cooldown
//   dp(i, 1) = max(dp(i-1, 1), dp(i-1, 0)+prices[i])
//
// Complexity: Time O(n), Space O(n)
func maxProfit(prices []int) int {
    if len(prices) <= 1 {
        return 0
    }
    dp := make([][2]int, len(prices))
    dp[0][0] = -prices[0]
    dp[0][1] = 0
    for i:=1; i<len(prices); i++ {
        // has
        dp[i][0] = dp[i-1][0]
        v := 0
        if i-2>=0 {
            v = dp[i-2][1]
        }
        if v-prices[i] > dp[i][0] {
            dp[i][0] = v-prices[i]
        }
        // don't has
        dp[i][1] = dp[i-1][1]
        if dp[i-1][0]+prices[i] > dp[i][1] {
            dp[i][1] = dp[i-1][0]+prices[i]
        }
    }
    return dp[len(prices)-1][1]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
