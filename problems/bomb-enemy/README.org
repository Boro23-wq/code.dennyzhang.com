* Leetcode: Bomb Enemy                                          :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     game, dynamicprogramming, redo
:END:
---------------------------------------------------------------------
Bomb Enemy
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/lonely-pixel-i][Lonely Pixel I]]
- [[https://code.dennyzhang.com/review-dynamicprogramming][Review: Dynamic Programming Problems]]
- [[https://code.dennyzhang.com/review-game][Review: Game Problems]]
- Tag: [[https://code.dennyzhang.com/tag/dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/game][#game]]
---------------------------------------------------------------------
Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.
Note that you can only put the bomb at an empty cell.

Example:
#+BEGIN_EXAMPLE
For the given grid

0 E 0 0
E 0 W E
0 E 0 0

return 3. (Placing a bomb at (1,1) kills 3 enemies)
#+END_EXAMPLE

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/bomb-enemy][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/bomb-enemy/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/bomb-enemy
## Basic Ideas: dynamic programming
##
## dp[i][j] = [x1, y1, x2, y2]
##  x1: from top to current row
##      How many enemies boom[i][j] can kill
##  y1: from left to current column
##  x2: from bottom to current row
##  y2: from right to current column
##
## Assumption: if we place a boom in 'W', we will kill no enemies
##
## Complexity: Time O(m*n), Space O(m*n)
class Solution:
    def maxKilledEnemies(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        row_count = len(grid)
        if row_count == 0: return 0
        col_count = len(grid[0])

        dp = [[[0, 0, 0, 0] for j in range(col_count)] for i in range(row_count)]

        # caculate: x1, y1. 
        for i in range(row_count):
            for j in range(col_count):
                ch = grid[i][j]
                if ch == 'W':
                    dp[i][j] = [0, 0, 0, 0]
                else:
                    k = 1 if ch == 'E' else 0
                    dp[i][j] = [dp[i-1][j][0]+k if i>0 else k, \
                                dp[i][j-1][1]+k if j>0 else k, \
                                k, k]

        max_count = 0
        # caculate: x2, y2, and get the result
        for i in range(row_count-1, -1, -1):
            for j in range(col_count-1, -1, -1):
                ch = grid[i][j]
                if ch == 'W': continue
                k = 1 if ch == 'E' else 0
                dp[i][j][2] = dp[i+1][j][2]+k if i<row_count-1 else k
                dp[i][j][3] = dp[i][j+1][3]+k if j<col_count-1 else k
                # get result
                if grid[i][j] == '0':
                    max_count = max(max_count, sum(dp[i][j]))

        return max_count
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="http://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
