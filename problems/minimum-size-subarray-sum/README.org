* Leetcode: Minimum Size Subarray Sum                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     twopointer, manydetails, subarray
:END:
---------------------------------------------------------------------
Minimum Size Subarray Sum
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-size-subarray-sum"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/subarray-product-less-than-k][Subarray Product Less Than K]]
- [[https://code.dennyzhang.com/two-sum][Two Sum]]
- Tag: [[https://code.dennyzhang.com/review-manydetails][#manydetails]], [[https://code.dennyzhang.comy/tag/twopointer][#twopointer]]
---------------------------------------------------------------------
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum >= s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-size-subarray-sum][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-size-subarray-sum/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/minimum-size-subarray-sum
## Basic Ideas: Two pointers + Ge accumulated sum
##
##   Corner case: 0 elements or 1 elements
##   Right pointer move one step each time.
##   Left pointer don't need to move left. Why? We only need to find the minimal length
##
## Complexity: Time O(n), Space O(1)
import sys
class Solution:
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        if length == 0: return 0

        min_length = sys.maxsize
        left, sum_v = 0, 0

        # always move right by 1 step
        for right in range(0, length):
            sum_v += nums[right]
            while sum_v >=s:
                min_length = min(min_length, right-left+1)
                # left won't pass right. Why? Because s>0
                sum_v -= nums[left]
                left += 1

        return min_length if min_length != sys.maxsize else 0
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
