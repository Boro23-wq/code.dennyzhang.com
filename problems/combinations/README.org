* Leetcode: Combinations                                          :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, classic
:END:
---------------------------------------------------------------------
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/combinations"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-combination][#combination]], [[https://code.dennyzhang.com/tag/classic][#classic]]
---------------------------------------------------------------------
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]



Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/combinations][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/combinations/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/combinations
// Basic Ideas: backtracking
//
// Complexity: Time ? Space ?
func dfs(combination []int, cnt int, pos int, n int, res *[][]int) {
    if cnt == 0 {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
        return
    }
    for i:=pos; i<n; i++ {
        combination = append(combination, i+1)
        dfs(combination, cnt-1, i+1, n, res)
        combination = combination[0:len(combination)-1]
    }
}

func combine(n int, k int) [][]int {
    res := [][]int{}
    dfs([]int{}, k, 0, n, &res)
    return res
}
#+END_SRC

#+BEGIN_SRC python
## https://code.dennyzhang.com/combinations
## Basic Ideas:
##          Get an array of n element, either 0 or 1
## Complexity: Time (Permutation), Space ?
class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        l = self.getCombine(n, k)
        res = []
        for combine in l:
            item = []
            for digit in xrange(n):
                if combine[digit] == 1:
                    item.append(digit + 1)
            if len(item) != 0:
                res.append(item)
        return res

    def getCombine(self, n, k):
        if n == k:
            return [[1]*n]
        if k > n or n == 0:
            return []
        if k == 0:
            return [[0]*n]
        res = []
        res_0 = self.getCombine(n-1, k)
        res_1 = self.getCombine(n-1, k-1)
        if len(res_0) != 0:
            for item in res_0:
                res.append([0] + item)

        if len(res_1) != 0:
            for item in res_1:
                res.append([1] + item)
        return res

# s = Solution()
# print s.combine(4, 2)
# print s.combine(1, 1)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
