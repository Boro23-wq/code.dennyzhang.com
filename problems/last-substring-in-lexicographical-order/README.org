* Leetcode: Last Substring in Lexicographical Order             :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     string, greedy, twopointer, redo
:END:
---------------------------------------------------------------------
Last Substring in Lexicographical Order
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/last-substring-in-lexicographical-order"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-string][#string]], [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/review-twopointer][#twopointer]]
---------------------------------------------------------------------
Given a string s, return the last substring of s in lexicographical order.
 
Example 1:
#+BEGIN_EXAMPLE
Input: "abab"
Output: "bab"
Explanation: The substrings are ["a", "ab", "aba", "abab", "b", "ba", "bab"]. The lexicographically maximum substring is "bab".
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "leetcode"
Output: "tcode"
#+END_EXAMPLE
 
Note:

- 1 <= s.length <= 4 * 10^5
- s contains only lowercase English letters.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/last-substring-in-lexicographical-order][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/last-substring-in-lexicographical-order/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/last-substring-in-lexicographical-order
// Basic Ideas: greedy + two pointer
//
//   The ending point of the result is the last character.
//   Need to define where is the starting point.
//   Apparently we know the value of the starting point.
//   It must be the biggest character in the string.
//
//   Use two slow and fast pointer:
//       - slow: starting point of the result
//       - fast: starting point of the candidate
//
//   The key part is slow pointer won't need to move back
//
//   If candidate of faster pointer is better than the slow pointer, 
//      just need to move the slow pointer to faster point.
//
//   No need to examining starting in between slow and fast characters!
//
//   cabcabcb
//   .  .  .
//
//   
// Complexity: Time O(n), Space O(1)
func max(x, y int) int {
    if x>y {
        return x
    } else {
        return y
    }
}

func lastSubstring(s string) string {
    i, j := 0, 1
    for k:=0; k+j<len(s); {
        if s[i+k] == s[j+k] {
            k++
            continue
        }
        if s[i+k] > s[j+k] {
            j = j+k+1
        } else {
            // Think: why not simply i=j
            i = max(i+k+1, j)
            j = i+1
        }
        k = 0
    }
    return s[i:]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
