* Leetcode: Available Captures for Rook                          :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     simulation
:END:
---------------------------------------------------------------------
Available Captures for Rook
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/available-captures-for-rook"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/simulation][#simulation]]
---------------------------------------------------------------------
On an 8 x 8 chessboard, there is one white rook.  There also may be empty squares, white bishops, and black pawns.  These are given as characters 'R', '.', 'B', and 'p' respectively. Uppercase characters represent white pieces, and lowercase characters represent black pieces.

The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east, west, and south), then moves in that direction until it chooses to stop, reaches the edge of the board, or captures an opposite colored pawn by moving to the same square it occupies.  Also, rooks cannot move into the same square as other friendly bishops.

Return the number of pawns the rook can capture in one move.

Example 1:
[[image-blog:Available Captures for Rook][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/available-captures-for-rook/1.png]]
#+BEGIN_EXAMPLE
Input: [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: 
In this example the rook is able to capture all the pawns.
#+END_EXAMPLE

Example 2:
[[image-blog:Available Captures for Rook][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/available-captures-for-rook/2.png]]
#+BEGIN_EXAMPLE
Input: [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 0
Explanation: 
Bishops are blocking the rook to capture any pawn.
#+END_EXAMPLE

Example 3:
[[image-blog:Available Captures for Rook][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/available-captures-for-rook/3.png]]
#+BEGIN_EXAMPLE
Input: [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
Output: 3
Explanation: 
The rook can capture the pawns at positions b5, d6 and f5.
#+END_EXAMPLE
 
Note:

1. board.length == board[i].length == 8
- board[i][j] is either 'R', '.', 'B', or 'p'
- There is exactly one cell with board[i][j] == 'R'


Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/available-captures-for-rook][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/available-captures-for-rook/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/available-captures-for-rook
// Basic Ideas:
// Complexity: Time O(n*m), Space O(1)
func numRookCaptures(board [][]byte) int {
    i, j := 0, 0
    for ; i<len(board); i++ {
        j = 0
        for ; j<len(board[i]); j++ {
            if board[i][j] == 'R' {
                break
            }
        }
        if j != len(board[i]) {
            break
        }
    }
    res := 0
    for _, direction := range [][]int{[]int{0, 1}, []int{0, -1},
                                      []int{1, 0}, []int{-1, 0}} {
        i2, j2 := i, j
        for i2>=0 && i2<len(board) && j2>=0 && j2<len(board[0]) {
            v := board[i2][j2]
            if v == 'B' { break }
            if v == 'p' {
                res++
                break
            }
            i2, j2 = i2+direction[0], j2+direction[1]
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
