* Leetcode: Sum of Distances in Tree                             :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, dfs, hashmap
:END:
---------------------------------------------------------------------
Sum of Distances in Tree
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-of-distances-in-tree"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/fermat-point-of-graphs][LintCode: Fermat Point Of Graphs]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/review-dfs][#dfs]], [[https://code.dennyzhang.com/review-hashmap][#hashmap]]
---------------------------------------------------------------------
An undirected, connected tree with N nodes labelled 0...N-1 and N-1 edges are given.

#+BEGIN_EXAMPLE
The ith edge connects nodes edges[i][0] and edges[i][1] together.
#+END_EXAMPLE

Return a list ans, where ans[i] is the sum of the distances between node i and all other nodes.

Example 1:
#+BEGIN_EXAMPLE
Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: 
Here is a diagram of the given tree:
  0
 / \
1   2
   /|\
  3 4 5
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.
#+END_EXAMPLE

Note: 1 <= N <= 10000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/sum-of-distances-in-tree][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/sum-of-distances-in-tree/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/sum-of-distances-in-tree
// When we move our root from one node to its connected node, 
//  one part of nodes get closer, one the other part get further.
// Basic Ideas: dfs, hashmap
// Complexity: Time O(n), Space O(n)
var m_edges map[int][]int

// No need to use hashmap here
var m_childcnt []int
var m_distances []int

func dfsCnt(node int, parent int, distance int) int {
    m_distances[0] += distance
    res := 1
    for _, child := range m_edges[node] {
        if child != parent {
            res += dfsCnt(child, node, distance+1)
        }
    }
    m_childcnt[node] = res
    return res
}

func dfsDistance(node int, parent int, N int) {
    if parent != -1 {
        m_distances[node] = m_distances[parent] + N - 2*m_childcnt[node]
    }
    for _, child := range m_edges[node] {
        if parent != child { dfsDistance(child, node, N) }
    }
}

func sumOfDistancesInTree(N int, edges [][]int) []int {
    m_edges = map[int][]int{}
    for i, _ := range edges {
        edge := edges[i]
        m_edges[edge[0]] = append(m_edges[edge[0]], edge[1])
        m_edges[edge[1]] = append(m_edges[edge[1]], edge[0])
    }
    m_childcnt = make([]int, N)
    m_distances = make([]int, N)
    m_distances[0] = 0
    dfsCnt(0, 0, 0)
    dfsDistance(0, -1, N)
    return m_distances
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
