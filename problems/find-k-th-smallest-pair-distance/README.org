* Leetcode: Find K-th Smallest Pair Distance                     :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     binarysearch, slidingwindow
:END:
---------------------------------------------------------------------
Find K-th Smallest Pair Distance
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-k-th-smallest-pair-distance"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-binarysearch][#binarysearch]], [[https://code.dennyzhang.com/review-slidingwindow][#slidingwindow]]
---------------------------------------------------------------------
Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:
#+BEGIN_EXAMPLE
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
#+END_EXAMPLE

Note:
1. 2 <= len(nums) <= 10000.
- 0 <= nums[i] < 1000000.
- 1 <= k <= len(nums) * (len(nums) - 1) / 2.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/find-k-th-smallest-pair-distance][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/find-k-th-smallest-pair-distance/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/find-k-th-smallest-pair-distance
// Basic Ideas: binary search + sliding window
//
// binary search: what distance the k-th smallest would be
//    range: [0, max-min]
//    monotone: If d is bigger, count would be bigger.
//
// Complexity: Time O(n*log(n)), Space O(n)
import "sort"
func distanceCount(nums []int, d int) int {
    // how many pairs with distance at most d
    count := 0
    // two pointer: l[i...j]
    i := 0
    for j:=0; j<len(nums); j++ {
        for nums[j]-nums[i]>d {
            i++
        }
        count += j-i
    }
    return count
}

func smallestDistancePair(nums []int, k int) int {
    sort.Ints(nums)
    left, right := 0, nums[len(nums)-1]-nums[0]
    // binary search: find the first true
    for left<right {
        mid := (right-left)/2+left
        if distanceCount(nums, mid) >= k {
            // left half
            right = mid
        } else {
            left = mid+1
        }
    }
    return left
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
