* Leetcode: Flatten a Multilevel Doubly Linked List             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     linkedlist
:END:
---------------------------------------------------------------------
Flatten a Multilevel Doubly Linked List
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/flatten-a-multilevel-doubly-linked-list"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/review-linkedlist][#linkedlist]]
---------------------------------------------------------------------
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

Example:
#+BEGIN_EXAMPLE
Input:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL

Output:
1-2-3-7-8-11-12-9-10-4-5-6-NULL
#+END_EXAMPLE

Explanation for the above example:

Given the following multilevel doubly linked list:

[[image-blog:Leetcode: Flatten a Multilevel Doubly Linked List][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/MultilevelLinkedList.png]]

We should return the following flattened doubly linked list:

[[image-blog:Leetcode: Flatten a Multilevel Doubly Linked List][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/MultilevelLinkedListFlattened.png]]

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/flatten-a-multilevel-doubly-linked-list][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Two pass

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/flatten-a-multilevel-doubly-linked-list
## Basic Ideas: dfs
## Get the next correct first, then set the prev and child
## Complexity:
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def dfs(self, head):
        # return the last node
        if head is None: return None
        res = head
        p = self.dfs(head.child)
        if p:
            p.next = head.next
            head.next = head.child
            head.child = None
            res = p
        q = self.dfs(head.next)
        if q: res = q
        return res
        
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        self.dfs(head)
        p = head
        while p and p.next:
            p.next.prev = p
            p = p.next
        return head
#+END_SRC

- Solution: One pass
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/flatten-a-multilevel-doubly-linked-list
## Basic Ideas: dfs
## Complexity:
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def dfs(self, head):
        # return the last node
        if head is None: return None
        res = head
        head_next = head.next
        p = self.dfs(head.child)
        if p:
            p.next = head.next
            if head.next: head.next.prev = p

            head.next = head.child
            if head.child: head.child.prev = head
            head.child = None
            res = p
        q = self.dfs(head_next)
        if q: res = q
        return res
        
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        self.dfs(head)
        return head
#+END_SRC

@@html:
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
@@

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
