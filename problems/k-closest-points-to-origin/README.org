* Leetcode: K Closest Points to Origin                           :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     quicksort, heap
:END:
---------------------------------------------------------------------
K Closest Points to Origin
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/k-closest-points-to-origin"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/tag/quicksort][#quicksort]], [[https://code.dennyzhang.com/review-heap][#heap]]
---------------------------------------------------------------------
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)
 
Example 1:
#+BEGIN_EXAMPLE
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
#+END_EXAMPLE

Note:

1. 1 <= K <= points.length <= 10000
- -10000 < points[i][0] < 10000
- -10000 < points[i][1] < 10000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/k-closest-points-to-origin][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/k-closest-points-to-origin/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/k-closest-points-to-origin
// Basic Ideas: sort
// Complexity: Time O(n*log(n)), Space O(n)
import "sort"
type Point struct {
    i int
    v int
}
func kClosest(points [][]int, K int) [][]int {
    l := []Point{}
    for i, p := range points {
        l = append(l, Point{i, p[0]*p[0]+p[1]*p[1]})
    }
    sort.Slice(l, func(i, j int) bool {
      return l[i].v < l[j].v
    })

    res := [][]int{}
    for i := K-1; i>=0; i-- {
        res = append(res, points[l[i].i])
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
