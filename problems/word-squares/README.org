* Leetcode: Word Squares                                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     trie, backtracking
:END:
---------------------------------------------------------------------
Word Squares
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-squares"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-trie][#trie]], [[https://code.dennyzhang.com/review-backtracking][#backtracking]]
---------------------------------------------------------------------
Given a set of words (without duplicates), find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 <= k < max(numRows, numColumns).

For example, the word sequence ["ball","area","lead","lady"] forms a word square because each word reads the same both horizontally and vertically.
#+BEGIN_EXAMPLE
b a l l
a r e a
l e a d
l a d y
#+END_EXAMPLE

Note:
1. There are at least 1 and at most 1000 words.
- All words will have the exact same length.
- Word length is at least 1 and at most 5.
- Each word contains only lowercase English alphabet a-z.

Example 1:
#+BEGIN_EXAMPLE
Input:
["area","lead","wall","lady","ball"]

Output:
[
  [ "wall",
    "area",
    "lead",
    "lady"
  ],
  [ "ball",
    "area",
    "lead",
    "lady"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input:
["abat","baba","atan","atal"]

Output:
[
  [ "baba",
    "abat",
    "baba",
    "atan"
  ],
  [ "baba",
    "abat",
    "baba",
    "atal"
  ]
]

Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/word-squares][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/word-squares/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/word-squares
// Basic Ideas: trie + backtracking
//
//   a r e a
//   r
//   e
//   a
//
// Notice: could one word be used more than one time?
//
// Complexity: Time O(n^2) Space O(n^2)
type Trie struct {
    children map[byte]*Trie
    startIndices map[int]bool
}

func startsWith(root *Trie, prefix []byte) []int {
    p := root
    for _, ch := range prefix {
        if _, ok := p.children[ch]; !ok {
            return []int{}
        }
        p = p.children[ch]
    }
    res := []int{}
    for index, _ := range p.startIndices {
        res = append(res, index)
    }
    return res
}

func dfs(pos int, l []string, words []string, root *Trie, res *[][]string) {
    if pos == len(words[0]) {
        // get result
        l2 := make([]string, len(l))
        copy(l2, l)
        *res = append(*res, l2)
        return
    }
    prefix := make([]byte, len(l))
    for i:=0; i<len(l); i++ {
        prefix[i] = l[i][len(l)]
    }
    indices := []int{}
    if len(prefix) == 0 {
        for index, _ := range root.startIndices {
            indices = append(indices, index)
        }
    } else {
        indices = startsWith(root, prefix)
    }
    for _, index := range indices {
        l = append(l, words[index])
        dfs(pos+1, l, words, root, res)
        l = l[0:len(l)-1]
    }
}

func wordSquares(words []string) [][]string {
    // build a trie tree
    root := &Trie{startIndices:map[int]bool{}, children:map[byte]*Trie{}}
    for index, word := range words {
        p := root
        for i, _ := range word {
            ch := word[i]
            p.startIndices[index] = true
            if _, ok := p.children[ch]; !ok {
                q := &Trie{startIndices:map[int]bool{}, children:map[byte]*Trie{}}
                p.children[ch] = q
            }
            p = p.children[ch]
        }
    }
    // backtracking
    res := [][]string{}
    dfs(0, []string{}, words, root, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
