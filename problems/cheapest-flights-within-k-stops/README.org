* Leetcode: Cheapest Flights Within K Stops                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     bfs, inspiring, redo
:END:
---------------------------------------------------------------------
Cheapest Flights Within K Stops
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/cheapest-flights-within-k-stops"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/bus-routes][Bus Routes]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-bfs][#bfs]]
---------------------------------------------------------------------
There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.

Now given all the cities and fights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

#+BEGIN_EXAMPLE
Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:
#+END_EXAMPLE
[[image-blog:Leetcode: Cheapest Flights Within K Stops][https://raw.githubusercontent.com/dennyzhang/images/master/code/cheapest-flights-within-k-stops1.png]]

#+BEGIN_EXAMPLE
The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The graph looks like this:
#+END_EXAMPLE

[[image-blog:Leetcode: Cheapest Flights Within K Stops][https://raw.githubusercontent.com/dennyzhang/images/master/code/cheapest-flights-within-k-stops2.png]]

#+BEGIN_EXAMPLE
The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.
#+END_EXAMPLE

Note:

- The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
- The size of flights will be in range [0, n * (n - 1) / 2].
- The format of each flight will be (src, dst, price).
- The price of each flight will be in the range [1, 10000].
- k is in the range of [0, n - 1].
- There will not be any duplicated flights or self cycles.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/cheapest-flights-within-k-stops][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/cheapest-flights-within-k-stops/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/cheapest-flights-within-k-stops
## Basic Ideas: BFS
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def findCheapestPrice(self, n, flights, src, dst, K):
        """
        :type n: int
        :type flights: List[List[int]]
        :type src: int
        :type dst: int
        :type K: int
        :rtype: int
        """
        import collections
        import sys
        d = collections.defaultdict(lambda: {})
        for [start, end, price] in flights:
            m = d[start]
            m[end] = price
        price_map = {}

        queue = collections.deque()
        seen = set([])
        
        queue.append(src)
        seen.add(src)
        price_map[src] = 0
        level = 0
        min_price = sys.maxsize
        while len(queue) != 0:
            level += 1
            # print(level, K, src, dst, queue)
            if level>K+1: break
            for k in range(len(queue)):
                p = queue.popleft()
                # find the neighbors
                if p in d:
                    m = d[p]
                    for q in m:
                        if q == dst:
                            min_price = min(min_price, price_map[p]+m[q])
                            continue
                        # not visited
                        if (q not in seen):
                            # print(price_map, p, q, m)
                            price_map[q] = price_map[p]+m[q]
                            queue.append(q)
                            seen.add(q)
                        # we have a better solution
                        elif price_map[q] > price_map[p]+m[q]:
                            queue.append(q)
                            price_map[q] = price_map[p]+m[q]
                            
        return min_price if min_price != sys.maxsize else -1
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
