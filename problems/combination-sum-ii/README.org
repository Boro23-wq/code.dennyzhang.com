* Leetcode: Combination Sum II                                    :BLOG:Hard:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination
:END:
---------------------------------------------------------------------
Combination
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/review-combination][Review: Combinations and Permutations Problems]], [[https://code.dennyzhang.com/tag/combination][Tag: #combination]]
---------------------------------------------------------------------
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
- All numbers (including target) will be positive integers.
- The solution set must not contain duplicate combinations.

#+BEGIN_EXAMPLE
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
#+END_EXAMPLE



Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/combination-sum-ii][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/combination-sum-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/combination-sum-ii
## Basic Ideas: Sort the list with descending order
##
## Complexity: Time O(n*n), Space O(n)
class Solution:
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if len(candidates) == 0: return []
        candidates = sorted(candidates)
        length = len(candidates)
        res = []
        for i in range(length):
            if candidates[i] > target: continue
            if candidates[i] == target:
                if [target] not in res: res.append([target])
                continue
            # try to start the result with candidates[i]
            l = self.combinationSum2(candidates[i+1:], target - candidates[i])
            for element in l:
                if not [candidates[i]]+element in res:
                    res.append([candidates[i]]+element)

        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
