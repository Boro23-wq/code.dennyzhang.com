* Leetcode: Corporate Flight Bookings                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     array, combinedcaculation
:END:
---------------------------------------------------------------------
Corporate Flight Bookings
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/corporate-flight-bookings"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-array][#array]], [[https://code.dennyzhang.com/tag/ecombinedcaculation][#combinedcaculation]]
---------------------------------------------------------------------
There are n flights, and they are labeled from 1 to n.

We have a list of flight bookings.  The i-th booking bookings[i] = [i, j, k] means that we booked k seats from flights labeled i to j inclusive.

Return an array answer of length n, representing the number of seats booked on each flight in order of their label.
 
Example 1:
#+BEGIN_EXAMPLE
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
#+END_EXAMPLE
 
Constraints:

- 1 <= bookings.length <= 20000
- 1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000
- 1 <= bookings[i][2] <= 10000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/corporate-flight-bookings][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/corporate-flight-bookings/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Without addtional space

#+BEGIN_SRC go
// https://code.dennyzhang.com/corporate-flight-bookings
// Basic Ideas: combined caculation
//
// Complexity: Time O(n), Space O(1)
func corpFlightBookings(bookings [][]int, n int) []int {
    res := make([]int, n)
    for _, b := range bookings {
        res[b[0]-1] += b[2]
        if b[1] < n {
            res[b[1]] -= b[2]
        }
    }
    for i:=1; i<n; i++ {
        res[i] += res[i-1]
    }
    return res
}
#+END_SRC

- Solution: With addtional space

#+BEGIN_SRC go
// https://code.dennyzhang.com/corporate-flight-bookings
// Basic Ideas: combined caculation
//
// Complexity: Time O(n), Space O(n)
func corpFlightBookings(bookings [][]int, n int) []int {
    l := make([]int, n+2)
    for _, b := range bookings {
        l[b[0]] += b[2]
        l[b[1]+1] -= b[2]
    }
    res := make([]int, n)
    count:=0
    for i:=1; i<=n; i++ {
        count+=l[i]
        res[i-1] = count
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
