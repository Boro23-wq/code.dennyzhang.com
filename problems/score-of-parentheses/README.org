* Leetcode: Score of Parentheses                                 :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     stack, redo
:END:
---------------------------------------------------------------------
Score of Parentheses
---------------------------------------------------------------------
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/stack][#stack]]
---------------------------------------------------------------------
Given a balanced parentheses string S, compute the score of the string based on the following rule:

() has score 1
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.

Example 1:
#+BEGIN_EXAMPLE
Input: "()"
Output: 1
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "(())"
Output: 2
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: "()()"
Output: 2
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: "(()(()))"
Output: 6
#+END_EXAMPLE
 
Note:

1. S is a balanced parentheses string, containing only ( and ).
- 2 <= S.length <= 50

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/score-of-parentheses][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/score-of-parentheses/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/score-of-parentheses
// Basic Ideas: Stack
// Complexity: Time O(n), Space O(n)
func scoreOfParentheses(S string) int {
    stack := []int{}
    for _, ch := range S {
        if ch == '(' {
            stack = append(stack, 0)
        } else {
            // Find 0 and pop it
            num := 0
            i := len(stack)-1
            for stack[i] != 0 {
                num += stack[i]
                i--
            }
            v:= 2*num
            if num == 0 { v = 1 }
            if i == 0 {
                stack = []int{v}
            } else {
                stack = stack[0:i]
                stack = append(stack, v)
            }
        }
    }
    res := 0
    for _, num := range stack { res += num }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="http://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
