* Leetcode: Maximum Score Words Formed by Letters               :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     bfs
:END:
---------------------------------------------------------------------
Maximum Score Words Formed by Letters
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-score-words-formed-by-letters"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-bfs][#bfs]]
---------------------------------------------------------------------
Given a list of words, list of  single letters (might be repeating) and score of every character.

Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).

It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.
 
Example 1:
#+BEGIN_EXAMPLE
Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23.
Words "dad" and "dog" only get a score of 21.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words "ax" (4+5), "bx" (4+5) and "cx" (4+5) with a score of 27.
Word "xxxz" only get a score of 25.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter "e" can only be used once.
#+END_EXAMPLE
 
Constraints:

- 1 <= words.length <= 14
- 1 <= words[i].length <= 15
- 1 <= letters.length <= 100
- letters[i].length == 1
- score.length == 26
- 0 <= score[i] <= 10
- words[i], letters[i] contains only lower case English letters.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-score-words-formed-by-letters][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-score-words-formed-by-letters/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/maximum-score-words-formed-by-letters
// Basic Ideas: BFS
//
// Complexity: Time ?, Space ?
type MyNode struct {
    chars [26]int
    score int
}

func hasEnough(chars1 [26]int, chars2 [26]int) bool {
    k:=0
    for ; k<26; k++ {
        if chars1[k] < chars2[k] {
            break
        }
    }
    return k==26
}

func maxScoreWords(words []string, letters []byte, score []int) int {
    chars := [26]int{}
    for _, ch := range letters {
        chars[int(ch-'a')]++
    }
    res := 0
    l := []MyNode{MyNode{chars:chars, score:0}}
    for _, word := range words {
        wordChars := [26]int{}
        for j, _ := range word {
            wordChars[int(word[j]-'a')]++
        }
        if !hasEnough(chars, wordChars) {
            continue
        }
        // check all possible
		length:=len(l)
        for i:=0; i<length; i++ {
            // compose word from l[i]
            if hasEnough(l[i].chars, wordChars) {
                chars2 := [26]int{}
                s := l[i].score
                for j:=0; j<26; j++ {
                    chars2[j]=l[i].chars[j]-wordChars[j]
                    s += score[j]*wordChars[j]
                }
                if s>res {
                    res = s
                }
                l = append(l, MyNode{chars:chars2, score:s})
            }
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
