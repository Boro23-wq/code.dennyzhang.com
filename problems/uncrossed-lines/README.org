* Leetcode: Uncrossed Lines                                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, lcs
:END:
---------------------------------------------------------------------
Uncrossed Lines
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/uncrossed-lines"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/followup-lcs][#lcs]]
---------------------------------------------------------------------
We write the integers of A and B (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:

A[i] == B[j];
The line we draw does not intersect any other connecting (non-horizontal) line.
Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.

Example 1:
[[image-blog:Uncrossed Lines][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/problems/uncrossed-lines/line.png]]
#+BEGIN_EXAMPLE
Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
Output: 3
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
Output: 2
#+END_EXAMPLE
 
Note:

1. 1 <= A.length <= 500
- 1 <= B.length <= 500
- 1 <= A[i], B[i] <= 2000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/uncrossed-lines][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/uncrossed-lines/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: dp + O(m) space
#+BEGIN_SRC python
## https://code.dennyzhang.com/uncrossed-lines
## Basic Ideas: dynamic programming
##
##  Each time we need to draw a line from one tailing node
##    dp from left to right
##
##   dp(i, j): the result of A[:i] and B[:j]
##       dp(i-1, j), dp(i, j-1)
##         Need to check whether A[i] == B[j]
##
##       If A[i] != B[j]
##           dp(i, j) = max(dp(i-1, j), dp(i, j-1))
##
##       If A[i] == B[j]
##           draw a line between A[i] and B[j]
##           dp(i, j) = max(1 + dp(i-1, j-1), previous case)
##
## Complexity: Time O(n*m), Space O(m)
class Solution:
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        dp = [0 for _ in range(len(B)+1)]
        # base condition is the virtual row and virtual column
        # dp: from left to right, from top to down
        for i in range(len(A)):
            dp2 = copy.deepcopy(dp)
            for j in range (1, len(dp)):
                dp[j] = max(dp2[j], dp[j-1], dp2[j-1] + (A[i]==B[j-1]))
        return dp[-1]
#+END_SRC

- Solution: dp + hashmap + O(n*m) space
#+BEGIN_SRC python
## https://code.dennyzhang.com/uncrossed-lines
## Basic Ideas: dynamic programming
##
##  Each time we need to draw a line from one tailing node
##    dp from left to right
##
##  Once draw a line, the two nodes can't be used any more
##
##   dp(i, j): the result of A[:i] and B[:j]
##       dp(i-1, j), dp(i, j-1)
##         Need to check whether A[i] == B[j]
##
##       If A[i] != B[j]
##           dp(i, j) = max(dp(i-1, j), dp(i, j-1))
##
##       If A[i] == B[j]
##           draw a line between A[i] and B[j]
##           dp(i, j) = max(1 + dp(i-1, j-1), previous case)
##
##           dp(i, j) = max(1 + dp(i-1, j-1))
##
## Complexity: Time O(n*m), Space O(n*m)
class Solution:
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        dp, n, m = collections.defaultdict(int), len(A), len(B)
        res = 0
        # dp: from left to right, from top to down
        for i in range(n):
            for j in range(m):
                # For base case of dp[-1, 3], it would be 0 by default.
                dp[i, j] = max(dp[i-1, j], dp[i, j-1], dp[i-1, j-1] + (A[i]==B[j]))
        return dp[n-1, m-1]
#+END_SRC

- Solution: dp
#+BEGIN_SRC python
## https://code.dennyzhang.com/uncrossed-lines
## Basic Ideas: dynamic programming
##
##  LCS
##  Each time we need to draw a line from one tailing node
##    dp from left to right
##
##   dp(i, j): the result of A[:i] and B[:j]
##       dp(i-1, j), dp(i, j-1)
##         Need to check whether A[i] == B[j]
##
##       If A[i] != B[j]
##           dp(i, j) = max(dp(i-1, j), dp(i, j-1))
##
##       If A[i] == B[j]
##           draw a line between A[i] and B[j]
##           dp(i, j) = max(1 + dp(i-1, j-1), previous case)
##
## Complexity: Time O(n*m), Space O(n*m)
class Solution:
    def maxUncrossedLines(self, A: List[int], B: List[int]) -> int:
        dp = [[0 for _ in range(len(B)+1)] for _ in range(len(A)+1)]
        # base condition is the virtual row and virtual column
        res = 0
        # dp: from left to right, from top to down
        for i in range(1, len(dp)):
            for j in range (1, len(dp[0])):
                dp[i][j]= max(dp[i-1][j], dp[i][j-1])
                if A[i-1] == B[j-1]:
                    dp[i][j] = max(dp[i][j], 1+dp[i-1][j-1])
                res = max(res, dp[i][j])
        return res
#+END_SRC
- Solution: dp + Space O(m)

#+BEGIN_SRC go
// https://code.dennyzhang.com/uncrossed-lines
// Basic Ideas: dynamic programming
//  LCS
//  Notice: Can't reuse node
//   The line we draw does not intersect any other connecting (non-horizontal) line.
//  dp(i, j): count with A[0:i] and B[0:j]
//         if A[i] == B[j], dp(i-1, j-1)+1
//         else max(dp(i-1, j), dp(i, j-1))
//
//  return dp(n, m)
//
// Complexity: Time O(n*m), Space O(m)
func maxUncrossedLines(A []int, B []int) int {
    dp := make([]int, len(B)+1)
    for i:=1; i<=len(A); i++ {
        dp2 := make([]int, len(dp))
        copy(dp2, dp)
        for j:=1; j<len(dp); j++ {
            if A[i-1] == B[j-1] {
                dp2[j] = dp[j-1]+1
            } else {
                dp2[j] = dp[j]
                if dp2[j]<dp2[j-1] {
                    dp2[j]=dp2[j-1]
                }
            }
        }
        copy(dp, dp2)
    }
    return dp[len(B)]
}
#+END_SRC

- Solution: dp + Space O(n*m)

#+BEGIN_SRC go
// https://code.dennyzhang.com/uncrossed-lines
// Basic Ideas: dynamic programming
//
//  dp(i, j): count with A[0:i] and B[0:j]
//         if A[i] == B[j], dp(i-1, j-1)+1
//         else max(dp(i-1, j), dp(i, j-1))
//
//  return dp(n, m)
//
// Complexity: Time O(n*m), Space O(n*m)
func maxUncrossedLines(A []int, B []int) int {
    // Add virtual column and row to avoid initialization
    dp := make([][]int, len(A)+1)
    for i, _ := range dp {
        dp[i] = make([]int, len(B)+1)
    }
    for i:=1; i<len(dp); i++ {
        for j:=1; j<len(dp[0]); j++ {
            if A[i-1] == B[j-1] {
                dp[i][j] = dp[i-1][j-1]+1
            } else {
                dp[i][j] = dp[i-1][j]
                if dp[i][j]<dp[i][j-1] {
                    dp[i][j] = dp[i][j-1]
                }
            }
        }
    }
    return dp[len(A)][len(B)]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
