* Leetcode: Increasing Subsequences                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     subsequence, classic, subset, hashmap
:END:
---------------------------------------------------------------------
Increasing Subsequences
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/increasing-subsequences"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- Tag: [[https://code.dennyzhang.com/tag/subsequence][#subsequence]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/subset][#subset]], [[https://code.dennyzhang.com/tag/hashmap][#hashmap]]
---------------------------------------------------------------------
Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .

Example:
#+BEGIN_EXAMPLE
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
#+END_EXAMPLE

Note:
- The length of the given array will not exceed 15.
- The range of integer in the given array is [-100,100].
- The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/increasing-subsequences][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/increasing-subsequences/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/increasing-subsequences
// Blog link: https://code.dennyzhang.com/increasing-subsequences
// Basic Ideas: backtracking
//
// Complexity: Time O(pow(2, n)), Space O(pow(2, n))
func dfs(combination []int, pos int, nums []int, res *[][]int) {
    if len(combination) >= 2 {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
    }
    // use a local hashmap, instead of a global one
    m := map[int]bool{}
    for i:=pos; i<len(nums); i++ {
        if m[nums[i]] { continue }
        if len(combination) == 0 || nums[i] >= combination[len(combination)-1] {
            m[nums[i]] = true
            combination = append(combination, nums[i])
            dfs(combination, i+1, nums, res)
            combination = combination[0:len(combination)-1]
        }
    }
}

func findSubsequences(nums []int) [][]int {
    res := [][]int{}
    dfs([]int{}, 0, nums, &res)
    return res
}
#+END_SRC

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/increasing-subsequences
// Basic Ideas: backtracking
//
// Complexity: Time O(pow(2, n)), Space O(pow(2, n))
import ("strings"
        "strconv")
func toString(l []int) string {
    strs := make([]string, len(l))
    for i, v := range l {
        strs[i] = strconv.Itoa(v)
    }
    return strings.Join(strs, ",")
}

var m map[string]bool
func dfs(combination []int, pos int, nums []int, res *[][]int) {
    if len(combination) >= 2 {
        combination2 := make([]int, len(combination))
        copy(combination2, combination)
        *res = append(*res, combination2)
    }
    
    for i:=pos; i<len(nums); i++ {
        if i>pos && nums[i] == nums[i-1] { continue }
        if len(combination) == 0 || nums[i] >= combination[len(combination)-1] {
            combination = append(combination, nums[i])
            str := toString(combination)
            if ! m[str] {
                dfs(combination, i+1, nums, res)
                m[str] = true
            }
            combination = combination[0:len(combination)-1]
        }
    }
}

func findSubsequences(nums []int) [][]int {
    res := [][]int{}
    m = map[string]bool{}
    dfs([]int{}, 0, nums, &res)
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
