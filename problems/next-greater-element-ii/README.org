* Leetcode: Next Greater Element II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     monotone
:END:
---------------------------------------------------------------------
Next Greater Element II
---------------------------------------------------------------------
Similar Problems:
- [[https://code.dennyzhang.com/next-greater-element-i][Leetcode: Leetcode: Next Greater Element I]]
- [[https://code.dennyzhang.com/review-monotone][Review: Monotone Stack Or Monotone Queue Problems]], Tag: [[https://code.dennyzhang.com/tag/monotone][monotone]]
---------------------------------------------------------------------
Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.
#+BEGIN_EXAMPLE
Example 1:
Input: [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number; 
The second 1's next greater number needs to search circularly, which is also 2.
#+END_EXAMPLE

Note: The length of given array won't exceed 10000.

Github: [[https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/problems/next-greater-element-ii][challenges-leetcode-interesting]]

Credits To: [[https://leetcode.com/problems/next-greater-element-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/next-greater-element-ii
## Basic Idea: Descending stack
##
## Complexity: Time O(n), Space O(n)
class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        length = len(nums)
        stack = []
        res = [None]*length
        for i in xrange(length*2):
            i = i % length
            # if current element is bigger, it's the target of previous undecided elements
            while len(stack) != 0 and nums[i] > nums[stack[-1]]:
                k = stack.pop()
                res[k] = nums[i]
            # No need to check if already examined
            if res[i] is None:
                stack.append(i)

        for i in xrange(length):
            if res[i] is None: res[i] = -1
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="http://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>
#+END_HTML
