* Leetcode: Car Pooling                                         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     interval, meetingconflict, limitedrange, inspiring
:END:
---------------------------------------------------------------------
Car Pooling
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/car-pooling"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/meeting-rooms-ii][Leetcode: Meeting Rooms II]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-interval][#interval]], [[https://code.dennyzhang.com/review-heap][#heap]], [[https://code.dennyzhang.com/followup-meetingconflict][#meetingconflict]], [[https://code.dennyzhang.com/tag/limitedrange][#limitedrange]]
---------------------------------------------------------------------
You are driving a vehicle that has capacity empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)

Given a list of trips, trip[i] = [num_passengers, start_location, end_location] contains information about the i-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.

Return true if and only if it is possible to pick up and drop off all passengers for all the given trips. 
 
Example 1:
#+BEGIN_EXAMPLE
Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: trips = [[2,1,5],[3,5,7]], capacity = 3
Output: true
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
Output: true
#+END_EXAMPLE
 
Constraints:

1. trips.length <= 1000
- trips[i].length == 3
- 1 <= trips[i][0] <= 100
- 0 <= trips[i][1] < trips[i][2] <= 1000
- 1 <= capacity <= 100000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/car-pooling][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/car-pooling/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:
#+BEGIN_SRC go
// https://code.dennyzhang.com/car-pooling
// Basic Ideas: greedy
//
// Examine the capacity of all timestamp
//
// Complexity: Time O(n), Space O(n)
func carPooling(trips [][]int, capacity int) bool {
    l := make([]int, 1001)
    for _, trip := range trips {
        l[trip[1]] += trip[0] // claim
        l[trip[2]] -= trip[0] // release
    }
    for _, v := range l {
        capacity -= v
        if capacity < 0 {
            return false
        }
    }
    return true
}
#+END_SRC

#+BEGIN_SRC go
// https://code.dennyzhang.com/car-pooling
// Basic Ideas: heap
//
// Complexity: Time O(n*log(n)), Space O(n)
import ("sort"
        "container/heap")

type Trip struct {
    l []int
}

type MyHeap []Trip
func (h MyHeap) Len() int {
    return len(h)
}

func (h MyHeap) Less(i, j int) bool {
    return h[i].l[2] < h[j].l[2]
}

func (h MyHeap) Swap(i, j int) {
    h[i], h[j] = h[j], h[i]
}

func (h *MyHeap) Push(x interface {}) {
    *h = append(*h, x.(Trip))
}

func (h *MyHeap) Pop() interface{} {
    res := (*h)[len(*h)-1]
    *h = (*h)[0:len(*h)-1]
    return res
}

func carPooling(trips [][]int, capacity int) bool {
    sort.Slice(trips, func(i, j int) bool {
        return trips[i][1]<trips[j][1]
    })
    h := &MyHeap{}
    heap.Init(h)
    for _, trip := range trips {
        // release capacity
        for h.Len() >0 {
            last := heap.Pop(h).(Trip)
            if last.l[2] <= trip[1] {
                capacity += last.l[0]
            } else {
                heap.Push(h, last)
                break
            }
        }
        // claim capacity
        capacity -= trip[0]
        if capacity < 0 {
            return false
        }
        heap.Push(h, Trip{l:trip})
    }
    return true
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
