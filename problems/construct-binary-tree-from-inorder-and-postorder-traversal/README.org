* Leetcode: Construct Binary Tree from Inorder and Postorder Traversal :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     treetraversal
:END:
---------------------------------------------------------------------
Construct Binary Tree from Inorder and Postorder Traversal
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/construct-binary-tree-from-inorder-and-postorder-traversal"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-treetraversal][#treetraversal]]
---------------------------------------------------------------------
Given inorder and postorder traversal of a tree, construct the binary tree.

Note: You may assume that duplicates do not exist in the tree.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/construct-binary-tree-from-inorder-and-postorder-traversal][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/construct-binary-tree-from-inorder-and-postorder-traversal
## Basic Ideas:
##         Inorder:    L M R
##         Postorder:  L R M
##       Take the last in postorder as root
##       Find root in inorder
##       Then locate left sub-tree and right sub-tree
## Complexity: Time O(n), Space O(n)
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        if len(inorder) == 0:
            return None
        root_val = postorder[-1]
        ltree_index = inorder.index(root_val)
        left_node = self.buildTree(inorder[0:ltree_index], postorder[0:ltree_index])
        right_node = self.buildTree(inorder[ltree_index+1:], postorder[ltree_index:-1])

        node = TreeNode(root_val)
        node.left, node.right = left_node, right_node
        return node
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
