* Leetcode: Minimum Cost For Tickets                             :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming
:END:
---------------------------------------------------------------------
Minimum Cost For Tickets
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-cost-for-tickets"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]]
---------------------------------------------------------------------
In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array days.  Each day is an integer from 1 to 365.

Train tickets are sold in 3 different ways:

- a 1-day pass is sold for costs[0] dollars;
- a 7-day pass is sold for costs[1] dollars;
- a 30-day pass is sold for costs[2] dollars.
The passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of days.

Example 1:
#+BEGIN_EXAMPLE
Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total you spent $11 and covered all the days of your travel.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total you spent $17 and covered all the days of your travel.
#+END_EXAMPLE
 
Note:

1. 1 <= days.length <= 365
- 1 <= days[i] <= 365
- days is in strictly increasing order.
- costs.length == 3
- 1 <= costs[i] <= 1000

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/minimum-cost-for-tickets][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/minimum-cost-for-tickets/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/minimum-cost-for-tickets
// Basic Ideas: dynamic programming
//   Every day we have 4 choices: reuse old, 1-day pass, 7-day, 30-day
//   List all candidate for each day.
//   dp(i) = (cost, days)
//           0 <= days <= 29
//           For a given days, we always choose the minimum cost
//           If previous day already has quota, no need to buy
// Complexity: Time O(n), Space O(1)
func mincostTickets(days []int, costs []int) int {
    l := make([]int, 30)
    for i, _ := range l { l[i] = 1<<31 }
    l[0], l[6], l[29] = costs[0], costs[1], costs[2]
    for i:=1; i<len(days); i++ {
        l2 := make([]int, 30)
        for i, _ := range l2 { l2[i] = 1<<31 }
        off := days[i]-days[i-1]
        for i, _ := range l {
            if i < off {
                if l[i] != 1<<31 {
                    // need to buy pass
                    if l2[0] > l[i]+costs[0] {
                        l2[0] = l[i]+costs[0]
                    }
                    if l2[6] > l[i]+costs[1] {
                        l2[6] = l[i]+costs[1]
                    }
                    if l2[29] > l[i]+costs[2] {
                        l2[29] = l[i]+costs[2]
                    }
                }
            } else {
                // reuse old pass
                if l[i] != 1<<31 && l2[i-off] > l[i] {
                    l2[i-off] = l[i]
                }
            }
        }
        copy(l, l2)
    }
    res := 1<<31
    for _, v := range l {
        if v < res {
            res = v
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
