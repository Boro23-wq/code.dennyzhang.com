* Leetcode: Maximum Length of Pair Chain                         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, game, lis
:END:
---------------------------------------------------------------------
Maximum Length of Pair Chain
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-length-of-pair-chain"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/review-game][#game]], [[https://code.dennyzhang.com/tag/lis][#lis]]
---------------------------------------------------------------------
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
#+BEGIN_EXAMPLE
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
#+END_EXAMPLE

Note:
- The number of given pairs will be in the range [1, 1000].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-length-of-pair-chain][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-length-of-pair-chain/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/maximum-length-of-pair-chain
// Basic Ideas: dynamic programming + LIS
//
// Complexity: Time O(n*n), Space O(n)
import "sort"
func findLongestChain(pairs [][]int) int {
    sort.Slice(pairs, func(i, j int) bool {
        return pairs[i][0] < pairs[j][0]
    })
    l := make([]int, len(pairs))
    l[0] = 1
    for i:=1; i<len(l); i++ {
        max := 0
        for j:=i-1; j>=0; j-- {
            if pairs[j][1] < pairs[i][0] && l[j] > max {
                max = l[j]
            }
        }
        l[i] = max+1
    }
    return l[len(l)-1]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
