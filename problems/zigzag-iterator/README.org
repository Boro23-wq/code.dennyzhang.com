* Leetcode: Zigzag Iterator                                     :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     iterator, redo
:END:
---------------------------------------------------------------------
Zigzag Iterator
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/zigzag-iterator"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/iterator][#iterator]], [[https://code.dennyzhang.com/tag/zigzag][#zigzag]]
---------------------------------------------------------------------
Given two 1d vectors, implement an iterator to return their elements alternately.

Example:
#+BEGIN_EXAMPLE
Input:
v1 = [1,2]
v2 = [3,4,5,6] 

Output: [1,3,2,4,5,6]

Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,3,2,4,5,6].
#+END_EXAMPLE

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:
#+BEGIN_EXAMPLE
Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/zigzag-iterator][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/zigzag-iterator/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Use queue

#+BEGIN_SRC python
## https://code.dennyzhang.com/zigzag-iterator
## Basic Ideas: array
##
## Complexity: Time O(1), Space O(1)
class ZigzagIterator(object):
    def __init__(self, v1, v2):
        """
        Initialize your data structure here.
        :type v1: List[int]
        :type v2: List[int]
        """
        self.queue = collections.deque([])
        if len(v1) != 0:
            self.queue.append((0, v1))
        if len(v2) != 0:
            self.queue.append((0, v2))
        
    def next(self):
        """
        :rtype: int
        """
        (i, v) = self.queue.popleft()
        res = v[i]
        i += 1
        if i != len(v):
            self.queue.append((i, v))
        return res

    def hasNext(self):
        """
        :rtype: bool
        """
        return len(self.queue) != 0

# Your ZigzagIterator object will be instantiated and called as such:
# i, v = ZigzagIterator(v1, v2), []
# while i.hasNext(): v.append(i.next())
#+END_SRC

- Solution: Use list

#+BEGIN_SRC python
## https://code.dennyzhang.com/zigzag-iterator
## Basic Ideas: array
##
## Complexity: Time O(1), Space O(1)
class ZigzagIterator(object):
    def __init__(self, v1, v2):
        """
        Initialize your data structure here.
        :type v1: List[int]
        :type v2: List[int]
        """
        self.l = [v1, v2]
        self.indices = [0, 0]
        self.pos = 0
        
    def next(self):
        """
        :rtype: int
        """
        # skip finished list
        if self.indices[self.pos] == len(self.l[self.pos]):
            self.pos = (self.pos + 1)%len(self.l)
        
        index = self.indices[self.pos]
        res = self.l[self.pos][index]
        self.indices[self.pos] += 1
        # flip pointer
        self.pos = (self.pos + 1)%len(self.l)

        # TODO: how to avoid the overhead of finished list
        return res

    def hasNext(self):
        """
        :rtype: bool
        """
        for i in range(len(self.l)):
            if self.indices[i] != len(self.l[i]):
                return True
        return False

# Your ZigzagIterator object will be instantiated and called as such:
# i, v = ZigzagIterator(v1, v2), []
# while i.hasNext(): v.append(i.next())
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
