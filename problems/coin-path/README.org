* Leetcode: Coin Path                                           :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     dynamicprogramming, frogjump
:END:
---------------------------------------------------------------------
Coin Path
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/coin-path"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/followup-frogjump][#frogjump]]
---------------------------------------------------------------------
Given an array A (index starts at 1) consisting of N integers: A1, A2, ..., AN and an integer B. The integer B denotes that from any place (suppose the index is i) in the array A, you can jump to any one of the place in the array A indexed i+1, i+2, ..., i+B if this place can be jumped to. Also, if you step on the index i, you have to pay Ai coins. If Ai is -1, it means you can't jump to the place indexed i in the array.

Now, you start from the place indexed 1 in the array A, and your aim is to reach the place indexed N using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed N using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it's not possible to reach the place indexed N then you need to return an empty array.

Example 1:
#+BEGIN_EXAMPLE
Input: [1,2,4,-1,2], 2
Output: [1,3,5]
#+END_EXAMPLE
 
Example 2:
#+BEGIN_EXAMPLE
Input: [1,2,4,-1,2], 1
Output: []
#+END_EXAMPLE
 
Note:

1. Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first i where Pai and Pbi differ, Pai < Pbi; when no such i exists, then n < m.
- A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].
- Length of A is in the range of [1, 1000].
- B is in the range of [1, 100].
 
Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/coin-path][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/coin-path/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC go
// https://code.dennyzhang.com/coin-path
// Basic Ideas: dynamic programming
//
//  For each position, there is one best choice
//  track the cost, and also the previous position
//
// Complexity: Time O(n*B), Space O(n)
func cheapestJump(A []int, B int) []int {
    costs := make([]int, len(A))
    prevs := make([]int, len(A))
    for i, _ := range costs {
        costs[i] = 1<<31-1
        prevs[i] = -1
    }
    costs[0] = 0
    for i, c := range A {
        // Can't move
        if c == -1 {
            continue
        }
        // from i jump to i+j
        for j:=1; j<=B && i+j<len(A); j++ {
            // Can't jump to
            if A[i+j] == -1 {
                continue
            }
            // In favor of small jumps to get lexicographically smallest path
            if costs[i+j] == 1<<31-1 || costs[i]+c <= costs[i+j] {
                costs[i+j] = costs[i]+c
                prevs[i+j] = i
            }
        }
    }
    res := []int{}
    i := len(A)-1
    for i != -1 {
        res = append(res, i+1)
        i = prevs[i]
    }
    fmt.Println(costs, prevs, res)
    if res[len(res)-1] != 1 {
        res = []int{}
    } else {
        // reverse res
        left, right := 0, len(res)-1
        for left < right {
            res[left], res[right] = res[right], res[left]
            left++
            right--
        }
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
