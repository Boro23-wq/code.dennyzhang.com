* Leetcode: Smallest Subsequence of Distinct Characters         :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     greedy, string, lexicographical
:END:
---------------------------------------------------------------------
Smallest Subsequence of Distinct Characters
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/smallest-subsequence-of-distinct-characters"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/remove-duplicate-letters][Leetcode: Remove Duplicate Letters]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-greedy][#greedy]], [[https://code.dennyzhang.com/review-string][#string]]
---------------------------------------------------------------------
Return the lexicographically smallest subsequence of text that contains all the distinct characters of text exactly once.
 
Example 1:
#+BEGIN_EXAMPLE
Input: "cdadabcc"
Output: "adbc"
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: "abcd"
Output: "abcd"
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: "ecbacba"
Output: "eacb"
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: "leetcode"
Output: "letcod"
#+END_EXAMPLE
 
Note:

1. 1 <= text.length <= 1000
- text consists of lowercase English letters.
 
Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/smallest-subsequence-of-distinct-characters][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

*General Thinkings:*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

*Key Observations:*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

*Walk Through Testdata*
#+BEGIN_EXAMPLE

#+END_EXAMPLE

#+BEGIN_SRC go
// https://code.dennyzhang.com/smallest-subsequence-of-distinct-characters
// Basic Ideas: greedy + stack + hashmap
//   Try to iterate into the final result
//   If current letter is smaller than previous one, treat current one as preferency
//      If the previous character exists in the following ones, we can safely remove it
// Complexity: Time O(n), Space O(1)
func smallestSubsequence(text string) string {
    stack := []byte{}
    l := make([]int, 26)
    exists := make([]bool, 26)
    for i, _ := range text {
        l[text[i]-'a']++
    }
    for i, _ := range text {
        v := text[i]-'a'
        l[v]--
        // skip if already exists
        if exists[v] {
            continue
        }
        // current one is better than previous
        for len(stack) > 0 && stack[len(stack)-1] > v && l[stack[len(stack)-1]] != 0 {
            exists[stack[len(stack)-1]] = false
            stack = stack[0:len(stack)-1]
        }
        // add current one
        stack = append(stack, v)
        exists[v] = true
    }
    res := ""
    for i, _ := range stack {
        res += string(stack[i]+'a')
    }
    return res
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
