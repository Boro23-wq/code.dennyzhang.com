* Leetcode: Rotting Oranges                                      :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     bfs
:END:
---------------------------------------------------------------------
Rotting Oranges
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/rotting-oranges"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-bfs][#bfs]]
---------------------------------------------------------------------
In a given grid, each cell can have one of three values:

- the value 0 representing an empty cell;
- the value 1 representing a fresh orange;
- the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

Example 1:

[[image-blog:Leetcode: Rotting Oranges][https://raw.githubusercontent.com/dennyzhang/code.dennyzhang.com/master/images/oranges.png]]
#+BEGIN_EXAMPLE
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
#+END_EXAMPLE
 
Note:

1. 1 <= grid.length <= 10
- 1 <= grid[0].length <= 10
- grid[i][j] is only 0, 1, or 2.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/rotting-oranges][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/rotting-oranges/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// https://code.dennyzhang.com/rotting-oranges
// Basic Ideas: BFS
// Complexity: Time O(n), Space O(n)
type point struct {
    i, j int
}

func orangesRotting(grid [][]int) int {
    row_count, col_count := len(grid), len(grid[0])
    queue := []point{}
    for i, row := range grid {
        for j, val := range row {
            if val == 2 {
                queue = append(queue, point{i, j})
            }
        }
    }
    
    level := -1
    for len(queue) != 0 {
        l := []point{}
        for _, p := range queue {
            for _, offset := range [][]int{[]int{1, 0}, []int{-1, 0}, []int{0, 1}, []int{0, -1}} {
                i2, j2 := p.i + offset[0], p.j + offset[1]
                if i2<0 || i2>=row_count || j2<0 || j2>=col_count { continue }
                if grid[i2][j2] == 1 {
                    grid[i2][j2] = 2
                    l = append(l, point{i2, j2})
                }
            }
        }
        queue = l
        level++
    }
    // check if good ones
    for _, row := range grid {
        for _, val := range row {
            if val == 1 { return -1 }
        }
    }

    if level == -1 { level = 0 }
    return level
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
