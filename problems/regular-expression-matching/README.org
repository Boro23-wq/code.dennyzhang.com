* Leetcode: Regular Expression Matching                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, dynamicprogramming, editdistance
:END:
---------------------------------------------------------------------
Regular Expression Matching
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/regular-expression-matching"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/wildcard-matching][Leetcode: Wildcard Matching]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-dynamicprogramming][#dynamicprogramming]], [[https://code.dennyzhang.com/tag/classic][#classic]], [[https://code.dennyzhang.com/tag/editdistance][#editdistance]]
---------------------------------------------------------------------
Implement regular expression matching with support for '.' and '*'.
#+BEGIN_EXAMPLE
'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") -> false
isMatch("aa","aa") -> true
isMatch("aaa","aa") -> false
isMatch("aa", "a*") -> true
isMatch("aa", ".*") -> true
isMatch("ab", ".*") -> true
isMatch("aab", "c*a*b") -> true
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/regular-expression-matching][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/regular-expression-matching/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------

#+BEGIN_SRC go
// https://code.dennyzhang.com/regular-expression-matching
// Basic Ideas: dynamic programming
//
// Notice: fast fail doesn't work
// Notice: how to treat * in pattern, when it means multiple copies
//
// Complexity: Time O(n*m), Space O(n*m)
func isMatch(s string, p string) bool {
    dp := make([][]bool, len(s)+1)
    for i, _ := range dp {
        dp[i] = make([]bool, len(p)+1)
    }
    dp[0][0] = true
    for i:=0; i<len(p); i++ {
        // When *, check the previous previous node
        if p[i] == '*' && dp[0][i-1] {
            dp[0][i+1] = true
        }
    }
    // dp
    for i:=0; i<len(s); i++ {
        for j:=0; j<len(p); j++ {
            // caculate dp[i+1][j+1]
            // same characters or .
            if s[i] == p[j] || p[j] == '.' {
                dp[i+1][j+1] = dp[i][j]
            }
            if p[j] == '*' {
                if p[j-1] != s[i] && p[j-1] != '.' {
                    // need to treat as repeating 0 times
                    dp[i+1][j+1] = dp[i+1][j-1]
                } else {
                    // treat it as repeating 0 times, 1 times and multiple times
                    dp[i+1][j+1] = dp[i+1][j-1] || dp[i+1][j] || dp[i][j+1]
                }
            }
        }
    }
    return dp[len(s)][len(p)]
}
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
