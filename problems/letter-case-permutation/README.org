* Leetcode: Letter Case Permutation                                              :BLOG:Basic:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     combination, recursive, classic, bfs
:END:
---------------------------------------------------------------------
Letter Case Permutation
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-case-permutation"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://code.dennyzhang.com/generalized-abbreviation][Generalized Abbreviation]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- Tag: [[https://code.dennyzhang.com/review-recursive][#recursive]], [[https://code.dennyzhang.com/review-combination][#combination]]
---------------------------------------------------------------------
Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.  Return a list of all possible strings we could create.

Examples:
#+BEGIN_EXAMPLE
Input: S = "a1b2"
Output: ["a1b2", "a1B2", "A1b2", "A1B2"]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input: S = "3z4"
Output: ["3z4", "3Z4"]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Input: S = "12345"
Output: ["12345"]
#+END_EXAMPLE

Note:

- S will be a string with length at most 12.
- S will consist only of letters or digits.

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/letter-case-permutation][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/letter-case-permutation/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
#+BEGIN_SRC go
// Blog link: https://code.dennyzhang.com/letter-case-permutation
// Basic Ideas: backtracking
//
// Complexity: Time ?, Space ?
func dfs(combination string, S string, pos int, res *[]string) {
    if pos == len(S) {
        *res = append(*res, combination)
        return
    }
    ch := S[pos]
    dfs(combination + string(ch), S, pos+1, res)
    if ch >= 'a' && ch <= 'z' {
        dfs(combination + string(ch+'A'-'a'), S, pos+1, res)
    } else {
        if ch >= 'A' && ch <= 'Z' {
            dfs(combination + string(ch+'a'-'A'), S, pos+1, res)
        }
    }
}
func letterCasePermutation(S string) []string {
    res := []string{}
    dfs("", S, 0, &res)
    return res
}
#+END_SRC

#+BEGIN_SRC python
## Blog link: https://code.dennyzhang.com/letter-case-permutation
class Solution:
    ## Basic Ideas: One pass (similar like DFS)
    ##
    ## Complexity: Time O(n*pow(2,n)), Space O(pow(2, n))
    def letterCasePermutation(self, S):
        """
        :type S: str
        :rtype: List[str]
        """
        res = [""]
        for ch in S:
            l = []
            for item in res:
                if ch.isdigit():
                    l.append("%s%s" % (item, ch))
                else:
                    l.append("%s%s" % (item, ch.lower()))
                    l.append("%s%s" % (item, ch.upper()))
            res = l
        return res
        
    ## Basic Ideas: BFS
    ##
    ## Complexity: Time O(n*pow(2, n)), Space O(pow(2, n))
    def letterCasePermutation_v1(self, S):
        """
        :type S: str
        :rtype: List[str]
        """
        length = len(S)
        if length == 0: return [""]
        import collections
        queue = collections.deque()
        queue.append("")
        level = -1
        while True:
            level += 1
            if level == length: break
            for k in range(len(queue)):
                ch = S[level]
                element = queue.popleft()
                if ch.isdigit():
                    queue.append("%s%s" % (element, ch))
                else:
                    queue.append("%s%s" % (element, ch.lower()))
                    queue.append("%s%s" % (element, ch.upper()))
        return list(queue)
            
    ## Basic Ideas: recursive
    ##
    ## Complexity: Time O(n*pow(2, n)), Space O(pow(2, n))
    def letterCasePermutation_v1(self, S):
        """
        :type S: str
        :rtype: List[str]
        """
        length = len(S)
        if length == 0: return [""]
        res = []
        ch = S[0]
        for item in self.letterCasePermutation(S[1:]):
            if ch.isdigit():
                res.append("%s%s" % (ch, item))
            else:
                res.append("%s%s" % (ch.lower(), item))
                res.append("%s%s" % (ch.upper(), item))
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
