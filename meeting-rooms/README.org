* Leetcode: Meeting Rooms                                        :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     classic, interval, calendarconflict
:END:
---------------------------------------------------------------------
Meeting Rooms
---------------------------------------------------------------------
Similar Problems:
- [[https://brain.dennyzhang.com/meeting-rooms-ii][Meeting Rooms II]]
- Tag: [[https://brain.dennyzhang.com/tag/interval][#interval]]
---------------------------------------------------------------------
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.

Github: [[url-external:https://github.com/DennyZhang/challenges-leetcode-interesting/tree/master/meeting-rooms][challenges-leetcode-interesting]]

Credits To: [[url-external:https://leetcode.com/problems/meeting-rooms/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.

#+BEGIN_SRC python
## Blog link: https://brain.dennyzhang.com/meeting-rooms
## Basic Ideas:
##
## Complexity: Time O(n*log(n)), Space O(1)
##
# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def canAttendMeetings(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: bool
        """
        length = len(intervals)
        if length <= 1: return True
        intervals.sort(key=lambda x: x.start)
        for i in range(1, length):
            if intervals[i].start < intervals[i-1].end:
                return False
        return True
#+END_SRC
